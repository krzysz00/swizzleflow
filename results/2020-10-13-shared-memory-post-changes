Processing specs/swinv_like/l1/extra-long/mult-64-with-16-shared.swflow
construction:all time=0.008875159;
spec:specs/swinv_like/l1/extra-long/mult-64-with-16-shared.swflow
file_map:11e3a344bd raw=4x4,-[0>0]transpose-4x4,.
load:matrices/11e3a344bd density=0.00390625; time=0.000320479;
file_map:73479059f4 raw=4x4x4x4,-[0>0]reshape{fold_len=16}-4x4,.4x4,-[0>0]transpose-4x4,.
load:matrices/73479059f4 density=0.00390625; time=0.008818037;
file_map:c6c9550153 raw=4x4x4,-[0>0]broadcast{group=1}-4x4x4x4,.4x4x4x4,-[0>0]reshape{fold_len=16}-4x4,.4x4,-[0>0]transpose-4x4,.
load:matrices/c6c9550153 density=0.0625; time=0.001133104;
file_map:98697fd663 raw=4x4x4,4x4x4-[0,1>0 -1]stack{fold_len=2}-4x4x4,.4x4x4,-[0>0]broadcast{group=1}-4x4x4x4,.4x4x4x4,-[0>0]reshape{fold_len=16}-4x4,.4x4,-[0>0]transpose-4x4,.
load:matrices/98697fd663 density=0.0625; time=0.002044333;
file_map:e45fbe7853 raw=.[0<1]exit_block_outputs_b_for_mult.4x4x4,4x4x4-[0,1>0 -1]stack{fold_len=2}-4x4x4,.4x4x4,-[0>0]broadcast{group=1}-4x4x4x4,.4x4x4x4,-[0>0]reshape{fold_len=16}-4x4,.4x4,-[0>0]transpose-4x4,.
load:matrices/e45fbe7853 density=0.0625; time=0.000679385;
file_map:9040a81837 raw=4x4x2,-[0>0]b_dup_mult64-4x4x4,..[0<1]exit_block_outputs_b_for_mult.4x4x4,4x4x4-[0,1>0 -1]stack{fold_len=2}-4x4x4,.4x4x4,-[0>0]broadcast{group=1}-4x4x4x4,.4x4x4x4,-[0>0]reshape{fold_len=16}-4x4,.4x4,-[0>0]transpose-4x4,.
load:matrices/9040a81837 density=0.0625; time=0.000639017;
file_map:2a9b136d76 raw=4x4,4x4-[1,0>0 -1]stack-4x4x2,.4x4x2,-[0>0]b_dup_mult64-4x4x4,..[0<1]exit_block_outputs_b_for_mult.4x4x4,4x4x4-[0,1>0 -1]stack{fold_len=2}-4x4x4,.4x4x4,-[0>0]broadcast{group=1}-4x4x4x4,.4x4x4x4,-[0>0]reshape{fold_len=16}-4x4,.4x4,-[0>0]transpose-4x4,.
load:matrices/2a9b136d76 density=0.0625; time=0.000313663;
file_map:5789b3b445 raw=4x8,4x4-[0>0]rots_no_group{main=1,out=1,second=0}-4x4,4x4.4x4,4x4-[1,0>0 -1]stack-4x4x2,.4x4x2,-[0>0]b_dup_mult64-4x4x4,..[0<1]exit_block_outputs_b_for_mult.4x4x4,4x4x4-[0,1>0 -1]stack{fold_len=2}-4x4x4,.4x4x4,-[0>0]broadcast{group=1}-4x4x4x4,.4x4x4x4,-[0>0]reshape{fold_len=16}-4x4,.4x4,-[0>0]transpose-4x4,.
load:matrices/5789b3b445 density=0.059027777777777776; time=0.000608654;
file_map:aed0ad0c64 raw=4x4x4,-[>1]-4x4x4,4x4x4.4x4x4,4x4x4-[0,1>0 -1]stack{fold_len=2}-4x4x4,.4x4x4,-[0>0]broadcast{group=1}-4x4x4x4,.4x4x4x4,-[0>0]reshape{fold_len=16}-4x4,.4x4,-[0>0]transpose-4x4,.
load:matrices/aed0ad0c64 density=0.0625; time=0.000628395;
file_map:957f6b0124 raw=.[0<0]exit_block_outputs_a_for_mult.4x4x4,-[>1]-4x4x4,4x4x4.4x4x4,4x4x4-[0,1>0 -1]stack{fold_len=2}-4x4x4,.4x4x4,-[0>0]broadcast{group=1}-4x4x4x4,.4x4x4x4,-[0>0]reshape{fold_len=16}-4x4,.4x4,-[0>0]transpose-4x4,.
load:matrices/957f6b0124 density=0.0625; time=0.000604729;
file_map:f47dfed001 raw=4x4x2,-[0>0]a_dup_mult64-4x4x4,..[0<0]exit_block_outputs_a_for_mult.4x4x4,-[>1]-4x4x4,4x4x4.4x4x4,4x4x4-[0,1>0 -1]stack{fold_len=2}-4x4x4,.4x4x4,-[0>0]broadcast{group=1}-4x4x4x4,.4x4x4x4,-[0>0]reshape{fold_len=16}-4x4,.4x4,-[0>0]transpose-4x4,.
load:matrices/f47dfed001 density=0.0625; time=0.000344121;
file_map:2fe03ffc3e raw=4x4,4x4-[1,0>0 -1]stack-4x4x2,.4x4x2,-[0>0]a_dup_mult64-4x4x4,..[0<0]exit_block_outputs_a_for_mult.4x4x4,-[>1]-4x4x4,4x4x4.4x4x4,4x4x4-[0,1>0 -1]stack{fold_len=2}-4x4x4,.4x4x4,-[0>0]broadcast{group=1}-4x4x4x4,.4x4x4x4,-[0>0]reshape{fold_len=16}-4x4,.4x4,-[0>0]transpose-4x4,.
load:matrices/2fe03ffc3e density=0.0625; time=0.000341193;
file_map:c00a089747 raw=4x8,4x4-[0>0]rots_no_group{main=1,out=1,second=0}-4x4,4x4.4x4,4x4-[1,0>0 -1]stack-4x4x2,.4x4x2,-[0>0]a_dup_mult64-4x4x4,..[0<0]exit_block_outputs_a_for_mult.4x4x4,-[>1]-4x4x4,4x4x4.4x4x4,4x4x4-[0,1>0 -1]stack{fold_len=2}-4x4x4,.4x4x4,-[0>0]broadcast{group=1}-4x4x4x4,.4x4x4x4,-[0>0]reshape{fold_len=16}-4x4,.4x4,-[0>0]transpose-4x4,.
load:matrices/c00a089747 density=0.059027777777777776; time=0.000492979;
file_map:fcbbdcb8fa raw=4x8,4x4-[0>0]xforms_no_group{main=1,out=1,second=0}-4x8,4x4.4x8,4x4-[0>0]rots_no_group{main=1,out=1,second=0}-4x4,4x4.4x4,4x4-[1,0>0 -1]stack-4x4x2,.4x4x2,-[0>0]a_dup_mult64-4x4x4,..[0<0]exit_block_outputs_a_for_mult.4x4x4,-[>1]-4x4x4,4x4x4.4x4x4,4x4x4-[0,1>0 -1]stack{fold_len=2}-4x4x4,.4x4x4,-[0>0]broadcast{group=1}-4x4x4x4,.4x4x4x4,-[0>0]reshape{fold_len=16}-4x4,.4x4,-[0>0]transpose-4x4,.
load:matrices/fcbbdcb8fa density=0.0625; time=0.000463113;
file_map:5d86138436 raw=4x8,4x8-[1>1]rots_no_group{main=1,out=1,second=0}-4x8,4x4.4x8,4x4-[0>0]xforms_no_group{main=1,out=1,second=0}-4x8,4x4.4x8,4x4-[0>0]rots_no_group{main=1,out=1,second=0}-4x4,4x4.4x4,4x4-[1,0>0 -1]stack-4x4x2,.4x4x2,-[0>0]a_dup_mult64-4x4x4,..[0<0]exit_block_outputs_a_for_mult.4x4x4,-[>1]-4x4x4,4x4x4.4x4x4,4x4x4-[0,1>0 -1]stack{fold_len=2}-4x4x4,.4x4x4,-[0>0]broadcast{group=1}-4x4x4x4,.4x4x4x4,-[0>0]reshape{fold_len=16}-4x4,.4x4,-[0>0]transpose-4x4,.
load:matrices/5d86138436 density=0.060546875; time=0.000685745;
copy_counts:this time=0.00006819;
copy_counts:this time=0.000171861;
copy_counts:this time=0.000732776;
Begin search
Done searching block 2
Done searching block 1
solution: a_for_mult = (){  a = init_a; a = broadcast(a); recv_a1_1 = id(a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = id(a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); }; b_for_mult = (){  b = init_b; b = broadcast(b); recv_b1_1 = xform[cf=7,cr=1,dr=4](b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = xform[cf=7,cr=1,dr=4](b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); }; mult = fold[2] stack(a_for_mult, b_for_mult); c0 = broadcast(mult); c1 = keep_if(false)(c0); c2 = keep_if[d0 >= +d2](c1); c3 = keep_if(false)(c2); c4 = keep_if[d0 < +d2](c3); c5 = keep_if[d0 >= +d2](c4); c6 = keep_if(false)(c5); c7 = keep_if[d0 < +d2](c6); c8 = keep_if(false)(c7); c9 = keep_if(false)(c8); c10 = keep_if(false)(c9); c11 = keep_if(true)(c10); c12 = keep_if(false)(c11); c13 = keep_if(false)(c12); c14 = keep_if(true)(c13); c15 = keep_if(false)(c14); c16 = keep_if(false)(c15); thread_by_accum = fold[16] id(c16); accum_by_thread = tr(thread_by_accum); out = id(accum_by_thread);
solution: a_for_mult = (){  a = init_a; a = broadcast(a); recv_a1_1 = id(a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = id(a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); }; b_for_mult = (){  b = init_b; b = broadcast(b); recv_b1_1 = xform[cf=7,cr=1,dr=4](b); recv_b1 = rot[shift=4](recv_b1_1); recv_b2_1 = xform[cf=7,cr=1,dr=4](b); recv_b2 = rot[shift=0](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); }; mult = fold[2] stack(a_for_mult, b_for_mult); c0 = broadcast(mult); c1 = keep_if(false)(c0); c2 = keep_if(false)(c1); c3 = keep_if(true)(c2); c4 = keep_if(false)(c3); c5 = keep_if(false)(c4); c6 = keep_if(true)(c5); c7 = keep_if(false)(c6); c8 = keep_if(false)(c7); c9 = keep_if(false)(c8); c10 = keep_if[d0 >= +d2](c9); c11 = keep_if(false)(c10); c12 = keep_if[d0 < +d2](c11); c13 = keep_if[d0 >= +d2](c12); c14 = keep_if(false)(c13); c15 = keep_if[d0 < +d2](c14); c16 = keep_if(false)(c15); thread_by_accum = fold[16] id(c16); accum_by_thread = tr(thread_by_accum); out = id(accum_by_thread);
solution: a_for_mult = (){  a = init_a; a = broadcast(a); recv_a1_1 = id(a); recv_a1 = rot[shift=0](recv_a1_1); recv_a2_1 = id(a); recv_a2 = rot[shift=4](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); }; b_for_mult = (){  b = init_b; b = broadcast(b); recv_b1_1 = xform[cf=7,cr=1,dr=4](b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = xform[cf=7,cr=1,dr=4](b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); }; mult = fold[2] stack(a_for_mult, b_for_mult); c0 = broadcast(mult); c1 = keep_if[d0 >= +d2](c0); c2 = keep_if(false)(c1); c3 = keep_if[d0 < +d2](c2); c4 = keep_if(false)(c3); c5 = keep_if(false)(c4); c6 = keep_if[d0 >= +d2](c5); c7 = keep_if(false)(c6); c8 = keep_if[d0 < +d2](c7); c9 = keep_if(false)(c8); c10 = keep_if(true)(c9); c11 = keep_if(false)(c10); c12 = keep_if(false)(c11); c13 = keep_if(false)(c12); c14 = keep_if(false)(c13); c15 = keep_if(true)(c14); c16 = keep_if(false)(c15); thread_by_accum = fold[16] id(c16); accum_by_thread = tr(thread_by_accum); out = id(accum_by_thread);
solution: a_for_mult = (){  a = init_a; a = broadcast(a); recv_a1_1 = id(a); recv_a1 = rot[shift=0](recv_a1_1); recv_a2_1 = id(a); recv_a2 = rot[shift=4](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); }; b_for_mult = (){  b = init_b; b = broadcast(b); recv_b1_1 = xform[cf=7,cr=1,dr=4](b); recv_b1 = rot[shift=4](recv_b1_1); recv_b2_1 = xform[cf=7,cr=1,dr=4](b); recv_b2 = rot[shift=0](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); }; mult = fold[2] stack(a_for_mult, b_for_mult); c0 = broadcast(mult); c1 = keep_if(false)(c0); c2 = keep_if(true)(c1); c3 = keep_if(false)(c2); c4 = keep_if(false)(c3); c5 = keep_if(false)(c4); c6 = keep_if(false)(c5); c7 = keep_if(true)(c6); c8 = keep_if(false)(c7); c9 = keep_if[d0 >= +d2](c8); c10 = keep_if(false)(c9); c11 = keep_if[d0 < +d2](c10); c12 = keep_if(false)(c11); c13 = keep_if(false)(c12); c14 = keep_if[d0 >= +d2](c13); c15 = keep_if(false)(c14); c16 = keep_if[d0 < +d2](c15); thread_by_accum = fold[16] id(c16); accum_by_thread = tr(thread_by_accum); out = id(accum_by_thread);
