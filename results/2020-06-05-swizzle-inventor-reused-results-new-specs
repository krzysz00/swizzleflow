./swizzle-inventor-benchmarks/benchmark.sh swizzle-inventor-benchmarks/big_l3_2d-stencil-5.rkt swizzle-inventor-benchmarks/small_l3_trove-crc-5.rkt swizzle-inventor-benchmarks/small_l1_trove-rcr-1.rkt swizzle-inventor-benchmarks/small_l1_trove-crc-4.rkt swizzle-inventor-benchmarks/small_l1_trove-crc-2.rkt swizzle-inventor-benchmarks/small_l2_2d-stencil-3.rkt swizzle-inventor-benchmarks/small_l1_trove-rcr-4.rkt swizzle-inventor-benchmarks/small_l3_1d-stencil.rkt swizzle-inventor-benchmarks/small_l1_1d-stencil.rkt swizzle-inventor-benchmarks/small_l2_2d-stencil-5.rkt swizzle-inventor-benchmarks/small_l3_trove-crc-7.rkt swizzle-inventor-benchmarks/small_l1_trove-crc-5.rkt swizzle-inventor-benchmarks/small_l1_2d-stencil-5.rkt swizzle-inventor-benchmarks/small_l3_1d-conv.rkt swizzle-inventor-benchmarks/small_l1_trove-crc-1.rkt swizzle-inventor-benchmarks/small_l1_1d-conv.rkt swizzle-inventor-benchmarks/small_l3_trove-crc-3.rkt swizzle-inventor-benchmarks/small_l1_trove-rcr-5.rkt swizzle-inventor-benchmarks/small_l2_1d-stencil.rkt swizzle-inventor-benchmarks/small_l1_trove-crc-3.rkt swizzle-inventor-benchmarks/small_l1_trove-rcr-2.rkt swizzle-inventor-benchmarks/small_l3_trove-crc-1.rkt swizzle-inventor-benchmarks/small_l3_trove-crc-4.rkt swizzle-inventor-benchmarks/small_l2_1d-conv.rkt swizzle-inventor-benchmarks/small_l3_2d-stencil-3.rkt swizzle-inventor-benchmarks/small_l1_trove-rcr-7.rkt swizzle-inventor-benchmarks/small_l1_2d-stencil-3.rkt swizzle-inventor-benchmarks/small_l1_trove-crc-7.rkt swizzle-inventor-benchmarks/small_l3_trove-crc-2.rkt swizzle-inventor-benchmarks/small_l1_trove-rcr-3.rkt
big_l3_2d-stencil-5.rkt - 0
solving...
(warpSize 16)
(blockID
 (0 0)
 (16 1)
 #((0 0)
   (1 0)
   (2 0)
   (3 0)
   (4 0)
   (5 0)
   (6 0)
   (7 0)
   (8 0)
   (9 0)
   (10 0)
   (11 0)
   (12 0)
   (13 0)
   (14 0)
   (15 0)))
run:l3/2d-stencil-5 577110
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/big_l3_2d-stencil-5.rkt:106:0
'(define (stencil-2d-sketch threadId blockID blockDim I O I-sizes O-sizes)
   (define gid (+ (* blockID blockDim) threadId))
   (define gx (get-x gid))
   (define gy (get-y gid))
   (define id (modulo (get-x threadId) warpSize))
   (define warp-col (modulo id W))
   (define warp-row (quotient id W))
   (define offset-x (* (quotient gx warpSize) W))
   (define offset-y (* gy H))
   (define I-cached (create-matrix-local (x-y-z 2 2)))
   (global-to-local
    I
    I-cached
    (x-y-z 1 1)
    (lov2vol (x-y-z offset-x offset-y))
    (+ warp-shape 2)
    #f
    #:warp-shape
    warp-shape
    #:round
    (x-y-z 2 2))
   (define o (create-accumulator (list +) /9 blockDim))
   (for*
    ((ky 5) (kx 5))
    (let* ((index-j (ite (> warp-row (+ -1 ky)) (@dup 0) (@dup 1)))
           (index-i (ite (< kx (+ 1 warp-col)) (@dup 0) (@dup 1)))
           (lane-x (sw-xform warp-col W 1 4 4 1 kx 5 0 1 0))
           (lane-y (sw-xform warp-row H 0 1 4 -1 ky 5 0 1 0))
           (lane (+ (* lane-y W) lane-x))
           (x (shfl (get I-cached index-i index-j) lane)))
      (accumulate o x)))
   (reg-to-global
    (accumulate-final o)
    O
    (lov2vol (x-y-z (+ offset-x warp-col) (+ offset-y warp-row)))))
577
small_l3_trove-crc-5.rkt - 0
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 5)
(i 0 5)
(i 1 5)
(i 2 5)
(i 3 5)
(i 4 5)
(permute-vector 5)
(i 0 5)
(i 1 5)
(i 2 5)
(i 3 5)
(i 4 5)
run:l3/trove-crc-5 119832
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-crc-5.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 3 5 5 1 localId warpSize 2 32 0))))
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 5 32 32 1 i struct-size 0 1 0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 0 1 5 -1 localId warpSize -1 1 0))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
120
small_l3_trove-crc-5.rkt - 1
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 5)
(i 0 5)
(i 1 5)
(i 2 5)
(i 3 5)
(i 4 5)
(permute-vector 5)
(i 0 5)
(i 1 5)
(i 2 5)
(i 3 5)
(i 4 5)
run:l3/trove-crc-5 121157
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-crc-5.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 3 5 5 1 localId warpSize 2 32 0))))
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 5 32 32 1 i struct-size 0 1 0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 0 1 5 -1 localId warpSize -1 1 0))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
122
small_l3_trove-crc-5.rkt - 2
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 5)
(i 0 5)
(i 1 5)
(i 2 5)
(i 3 5)
(i 4 5)
(permute-vector 5)
(i 0 5)
(i 1 5)
(i 2 5)
(i 3 5)
(i 4 5)
run:l3/trove-crc-5 120180
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-crc-5.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 3 5 5 1 localId warpSize 2 32 0))))
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 5 32 32 1 i struct-size 0 1 0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 0 1 5 -1 localId warpSize -1 1 0))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
121
small_l1_trove-rcr-1.rkt - 0
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 1)
(i 0 1)
run:l1/trove-rcr-1 314
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-rcr-1.rkt:76:0
'(define (AOS-load-rcr-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform
       localId
       warpSize
       -1
       warpSize
       warpSize
       1
       i
       struct-size
       31
       struct-size
       31)))
   (define O-cached
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         0
         struct-size
         struct-size
         1
         localId
         warpSize
         0
         warpSize
         0))))
   (local-to-global
    O-cached
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform
       localId
       warpSize
       31
       warpSize
       warpSize
       1
       i
       struct-size
       31
       struct-size
       31))))
(cost 0)
0
small_l1_trove-rcr-1.rkt - 1
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 1)
(i 0 1)
run:l1/trove-rcr-1 313
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-rcr-1.rkt:76:0
'(define (AOS-load-rcr-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform
       localId
       warpSize
       -1
       warpSize
       warpSize
       1
       i
       struct-size
       31
       struct-size
       31)))
   (define O-cached
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         0
         struct-size
         struct-size
         1
         localId
         warpSize
         0
         warpSize
         0))))
   (local-to-global
    O-cached
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform
       localId
       warpSize
       31
       warpSize
       warpSize
       1
       i
       struct-size
       31
       struct-size
       31))))
(cost 0)
1
small_l1_trove-rcr-1.rkt - 2
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 1)
(i 0 1)
run:l1/trove-rcr-1 318
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-rcr-1.rkt:76:0
'(define (AOS-load-rcr-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform
       localId
       warpSize
       -1
       warpSize
       warpSize
       1
       i
       struct-size
       31
       struct-size
       31)))
   (define O-cached
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         0
         struct-size
         struct-size
         1
         localId
         warpSize
         0
         warpSize
         0))))
   (local-to-global
    O-cached
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform
       localId
       warpSize
       31
       warpSize
       warpSize
       1
       i
       struct-size
       31
       struct-size
       31))))
(cost 0)
1
small_l1_trove-crc-4.rkt - 0
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 4)
(i 0 4)
(i 1 4)
(i 2 4)
(i 3 4)
(permute-vector 4)
(i 0 4)
(i 1 4)
(i 2 4)
(i 3 4)
run:l1/trove-crc-4 782
small_l1_trove-crc-4.rkt - 1
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 4)
(i 0 4)
(i 1 4)
(i 2 4)
(i 3 4)
(permute-vector 4)
(i 0 4)
(i 1 4)
(i 2 4)
(i 3 4)
run:l1/trove-crc-4 784
small_l1_trove-crc-4.rkt - 2
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 4)
(i 0 4)
(i 1 4)
(i 2 4)
(i 3 4)
(permute-vector 4)
(i 0 4)
(i 1 4)
(i 2 4)
(i 3 4)
run:l1/trove-crc-4 776
small_l1_trove-crc-2.rkt - 0
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 2)
(i 0 2)
(i 1 2)
(permute-vector 2)
(i 0 2)
(i 1 2)
run:l1/trove-crc-2 342
small_l1_trove-crc-2.rkt - 1
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 2)
(i 0 2)
(i 1 2)
(permute-vector 2)
(i 0 2)
(i 1 2)
run:l1/trove-crc-2 343
small_l1_trove-crc-2.rkt - 2
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 2)
(i 0 2)
(i 1 2)
(permute-vector 2)
(i 0 2)
(i 1 2)
run:l1/trove-crc-2 342
small_l2_2d-stencil-3.rkt - 0
solving...
(warpSize 16)
(blockID
 (0 0)
 (16 1)
 #((0 0)
   (1 0)
   (2 0)
   (3 0)
   (4 0)
   (5 0)
   (6 0)
   (7 0)
   (8 0)
   (9 0)
   (10 0)
   (11 0)
   (12 0)
   (13 0)
   (14 0)
   (15 0)))
run:l2/2d-stencil-3 45934
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l2_2d-stencil-3.rkt:106:0
'(define (stencil-2d-sketch threadId blockID blockDim I O I-sizes O-sizes)
   (define gid (+ (* blockID blockDim) threadId))
   (define gx (get-x gid))
   (define gy (get-y gid))
   (define id (modulo (get-x threadId) warpSize))
   (define warp-col (modulo id W))
   (define warp-row (quotient id W))
   (define offset-x (* (quotient gx warpSize) W))
   (define offset-y (* gy H))
   (define I-cached (create-matrix-local (x-y-z 2 2)))
   (global-to-local
    I
    I-cached
    (x-y-z 1 1)
    (lov2vol (x-y-z offset-x offset-y))
    (+ warp-shape 2)
    #f
    #:warp-shape
    warp-shape
    #:round
    (x-y-z 2 2))
   (define o (create-accumulator (list +) /9 blockDim))
   (for*
    ((ky 3) (kx 3))
    (let* ((index-j (ite (> warp-row (+ -1 ky)) (@dup 0) (@dup 1)))
           (index-i (ite (> warp-col (- 1 kx)) (@dup 0) (@dup 1)))
           (lane-x (sw-xform warp-col W 1 W W 1 kx 3 3 3 2))
           (lane-y (sw-xform warp-row H 1 H H 1 ky 3 1 3 0))
           (lane (+ (* lane-y W) lane-x))
           (x (shfl (get I-cached index-i index-j) lane)))
      (accumulate o x)))
   (reg-to-global
    (accumulate-final o)
    O
    (lov2vol (x-y-z (+ offset-x warp-col) (+ offset-y warp-row)))))
46
small_l2_2d-stencil-3.rkt - 1
solving...
(warpSize 16)
(blockID
 (0 0)
 (16 1)
 #((0 0)
   (1 0)
   (2 0)
   (3 0)
   (4 0)
   (5 0)
   (6 0)
   (7 0)
   (8 0)
   (9 0)
   (10 0)
   (11 0)
   (12 0)
   (13 0)
   (14 0)
   (15 0)))
run:l2/2d-stencil-3 45811
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l2_2d-stencil-3.rkt:106:0
'(define (stencil-2d-sketch threadId blockID blockDim I O I-sizes O-sizes)
   (define gid (+ (* blockID blockDim) threadId))
   (define gx (get-x gid))
   (define gy (get-y gid))
   (define id (modulo (get-x threadId) warpSize))
   (define warp-col (modulo id W))
   (define warp-row (quotient id W))
   (define offset-x (* (quotient gx warpSize) W))
   (define offset-y (* gy H))
   (define I-cached (create-matrix-local (x-y-z 2 2)))
   (global-to-local
    I
    I-cached
    (x-y-z 1 1)
    (lov2vol (x-y-z offset-x offset-y))
    (+ warp-shape 2)
    #f
    #:warp-shape
    warp-shape
    #:round
    (x-y-z 2 2))
   (define o (create-accumulator (list +) /9 blockDim))
   (for*
    ((ky 3) (kx 3))
    (let* ((index-j (ite (> warp-row (+ -1 ky)) (@dup 0) (@dup 1)))
           (index-i (ite (> warp-col (- 1 kx)) (@dup 0) (@dup 1)))
           (lane-x (sw-xform warp-col W 1 W W 1 kx 3 3 3 2))
           (lane-y (sw-xform warp-row H 1 H H 1 ky 3 1 3 0))
           (lane (+ (* lane-y W) lane-x))
           (x (shfl (get I-cached index-i index-j) lane)))
      (accumulate o x)))
   (reg-to-global
    (accumulate-final o)
    O
    (lov2vol (x-y-z (+ offset-x warp-col) (+ offset-y warp-row)))))
46
small_l2_2d-stencil-3.rkt - 2
solving...
(warpSize 16)
(blockID
 (0 0)
 (16 1)
 #((0 0)
   (1 0)
   (2 0)
   (3 0)
   (4 0)
   (5 0)
   (6 0)
   (7 0)
   (8 0)
   (9 0)
   (10 0)
   (11 0)
   (12 0)
   (13 0)
   (14 0)
   (15 0)))
run:l2/2d-stencil-3 46399
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l2_2d-stencil-3.rkt:106:0
'(define (stencil-2d-sketch threadId blockID blockDim I O I-sizes O-sizes)
   (define gid (+ (* blockID blockDim) threadId))
   (define gx (get-x gid))
   (define gy (get-y gid))
   (define id (modulo (get-x threadId) warpSize))
   (define warp-col (modulo id W))
   (define warp-row (quotient id W))
   (define offset-x (* (quotient gx warpSize) W))
   (define offset-y (* gy H))
   (define I-cached (create-matrix-local (x-y-z 2 2)))
   (global-to-local
    I
    I-cached
    (x-y-z 1 1)
    (lov2vol (x-y-z offset-x offset-y))
    (+ warp-shape 2)
    #f
    #:warp-shape
    warp-shape
    #:round
    (x-y-z 2 2))
   (define o (create-accumulator (list +) /9 blockDim))
   (for*
    ((ky 3) (kx 3))
    (let* ((index-j (ite (> warp-row (+ -1 ky)) (@dup 0) (@dup 1)))
           (index-i (ite (> warp-col (- 1 kx)) (@dup 0) (@dup 1)))
           (lane-x (sw-xform warp-col W 1 W W 1 kx 3 3 3 2))
           (lane-y (sw-xform warp-row H 1 H H 1 ky 3 1 3 0))
           (lane (+ (* lane-y W) lane-x))
           (x (shfl (get I-cached index-i index-j) lane)))
      (accumulate o x)))
   (reg-to-global
    (accumulate-final o)
    O
    (lov2vol (x-y-z (+ offset-x warp-col) (+ offset-y warp-row)))))
47
small_l1_trove-rcr-4.rkt - 0
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 4)
(i 0 4)
(i 1 4)
(i 2 4)
(i 3 4)
run:l1/trove-rcr-4 6210
small_l1_trove-rcr-4.rkt - 1
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 4)
(i 0 4)
(i 1 4)
(i 2 4)
(i 3 4)
run:l1/trove-rcr-4 6178
small_l1_trove-rcr-4.rkt - 2
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 4)
(i 0 4)
(i 1 4)
(i 2 4)
(i 3 4)
run:l1/trove-rcr-4 6292
small_l3_1d-stencil.rkt - 0
solving...
(blockID
 (0)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
(blockID
 (1)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
run:l3/1d-stencil 15779
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_1d-stencil.rkt:89:0
'(define (stencil-1d-sketch threadId blockID blockDim I O I-sizes O-sizes)
   (define I-cached (create-matrix-local (x-y-z 2)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (define offset (- gid localId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (+ warpSize 2))
    #f
    #:round
    2)
   (define o (create-accumulator (list +) /3 blockDim))
   (for/bounded
    ((i 3))
    (let* ((index (ite (> localId (+ -1 (@dup i))) (@dup 0) (@dup 1)))
           (lane (sw-xform localId warpSize 0 1 32 -1 i warpSize 1 4 0))
           (x (shfl (get I-cached index) lane)))
      (accumulate o x #:pred (>= (choose localId) (- -1 (choose localId))))))
   (reg-to-global o O gid))
16
small_l3_1d-stencil.rkt - 1
solving...
(blockID
 (0)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
(blockID
 (1)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
run:l3/1d-stencil 15864
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_1d-stencil.rkt:89:0
'(define (stencil-1d-sketch threadId blockID blockDim I O I-sizes O-sizes)
   (define I-cached (create-matrix-local (x-y-z 2)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (define offset (- gid localId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (+ warpSize 2))
    #f
    #:round
    2)
   (define o (create-accumulator (list +) /3 blockDim))
   (for/bounded
    ((i 3))
    (let* ((index (ite (> localId (+ -1 (@dup i))) (@dup 0) (@dup 1)))
           (lane (sw-xform localId warpSize 0 1 32 -1 i warpSize 1 4 0))
           (x (shfl (get I-cached index) lane)))
      (accumulate o x #:pred (>= (choose localId) (- -1 (choose localId))))))
   (reg-to-global o O gid))
16
small_l3_1d-stencil.rkt - 2
solving...
(blockID
 (0)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
(blockID
 (1)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
run:l3/1d-stencil 15869
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_1d-stencil.rkt:89:0
'(define (stencil-1d-sketch threadId blockID blockDim I O I-sizes O-sizes)
   (define I-cached (create-matrix-local (x-y-z 2)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (define offset (- gid localId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (+ warpSize 2))
    #f
    #:round
    2)
   (define o (create-accumulator (list +) /3 blockDim))
   (for/bounded
    ((i 3))
    (let* ((index (ite (> localId (+ -1 (@dup i))) (@dup 0) (@dup 1)))
           (lane (sw-xform localId warpSize 0 1 32 -1 i warpSize 1 4 0))
           (x (shfl (get I-cached index) lane)))
      (accumulate o x #:pred (>= (choose localId) (- -1 (choose localId))))))
   (reg-to-global o O gid))
16
small_l1_1d-stencil.rkt - 0
solving...
(blockID
 (0)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
(blockID
 (1)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
run:l1/1d-stencil 6759
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_1d-stencil.rkt:89:0
'(define (stencil-1d-sketch threadId blockID blockDim I O I-sizes O-sizes)
   (define I-cached (create-matrix-local (x-y-z 2)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (define offset (- gid localId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (+ warpSize 2))
    #f
    #:round
    2)
   (define o (create-accumulator (list +) /3 blockDim))
   (for/bounded
    ((i 3))
    (let* ((index (ite (>= localId (@dup i)) (@dup 0) (@dup 1)))
           (lane
            (sw-xform
             localId
             warpSize
             1
             warpSize
             warpSize
             1
             i
             warpSize
             1
             warpSize
             0))
           (x (shfl (get I-cached index) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid))
7
small_l1_1d-stencil.rkt - 1
solving...
(blockID
 (0)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
(blockID
 (1)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
run:l1/1d-stencil 6742
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_1d-stencil.rkt:89:0
'(define (stencil-1d-sketch threadId blockID blockDim I O I-sizes O-sizes)
   (define I-cached (create-matrix-local (x-y-z 2)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (define offset (- gid localId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (+ warpSize 2))
    #f
    #:round
    2)
   (define o (create-accumulator (list +) /3 blockDim))
   (for/bounded
    ((i 3))
    (let* ((index (ite (>= localId (@dup i)) (@dup 0) (@dup 1)))
           (lane
            (sw-xform
             localId
             warpSize
             1
             warpSize
             warpSize
             1
             i
             warpSize
             1
             warpSize
             0))
           (x (shfl (get I-cached index) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid))
7
small_l1_1d-stencil.rkt - 2
solving...
(blockID
 (0)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
(blockID
 (1)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
run:l1/1d-stencil 6753
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_1d-stencil.rkt:89:0
'(define (stencil-1d-sketch threadId blockID blockDim I O I-sizes O-sizes)
   (define I-cached (create-matrix-local (x-y-z 2)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (define offset (- gid localId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (+ warpSize 2))
    #f
    #:round
    2)
   (define o (create-accumulator (list +) /3 blockDim))
   (for/bounded
    ((i 3))
    (let* ((index (ite (>= localId (@dup i)) (@dup 0) (@dup 1)))
           (lane
            (sw-xform
             localId
             warpSize
             1
             warpSize
             warpSize
             1
             i
             warpSize
             1
             warpSize
             0))
           (x (shfl (get I-cached index) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid))
7
small_l2_2d-stencil-5.rkt - 0
solving...
(warpSize 16)
(blockID
 (0 0)
 (16 1)
 #((0 0)
   (1 0)
   (2 0)
   (3 0)
   (4 0)
   (5 0)
   (6 0)
   (7 0)
   (8 0)
   (9 0)
   (10 0)
   (11 0)
   (12 0)
   (13 0)
   (14 0)
   (15 0)))
run:l2/2d-stencil-5 138076
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l2_2d-stencil-5.rkt:106:0
'(define (stencil-2d-sketch threadId blockID blockDim I O I-sizes O-sizes)
   (define gid (+ (* blockID blockDim) threadId))
   (define gx (get-x gid))
   (define gy (get-y gid))
   (define id (modulo (get-x threadId) warpSize))
   (define warp-col (modulo id W))
   (define warp-row (quotient id W))
   (define offset-x (* (quotient gx warpSize) W))
   (define offset-y (* gy H))
   (define I-cached (create-matrix-local (x-y-z 2 2)))
   (global-to-local
    I
    I-cached
    (x-y-z 1 1)
    (lov2vol (x-y-z offset-x offset-y))
    (+ warp-shape 2)
    #f
    #:warp-shape
    warp-shape
    #:round
    (x-y-z 2 2))
   (define o (create-accumulator (list +) /9 blockDim))
   (for*
    ((ky 5) (kx 5))
    (let* ((index-j (ite (> warp-row (+ -1 ky)) (@dup 0) (@dup 1)))
           (index-i (ite (<= kx (+ 0 warp-col)) (@dup 0) (@dup 1)))
           (lane-x (sw-xform warp-col W 1 W W 1 kx 5 1 5 0))
           (lane-y (sw-xform warp-row H 1 H H 1 ky 5 1 5 0))
           (lane (+ (* lane-y W) lane-x))
           (x (shfl (get I-cached index-i index-j) lane)))
      (accumulate o x)))
   (reg-to-global
    (accumulate-final o)
    O
    (lov2vol (x-y-z (+ offset-x warp-col) (+ offset-y warp-row)))))
138
small_l2_2d-stencil-5.rkt - 1
solving...
(warpSize 16)
(blockID
 (0 0)
 (16 1)
 #((0 0)
   (1 0)
   (2 0)
   (3 0)
   (4 0)
   (5 0)
   (6 0)
   (7 0)
   (8 0)
   (9 0)
   (10 0)
   (11 0)
   (12 0)
   (13 0)
   (14 0)
   (15 0)))
run:l2/2d-stencil-5 138319
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l2_2d-stencil-5.rkt:106:0
'(define (stencil-2d-sketch threadId blockID blockDim I O I-sizes O-sizes)
   (define gid (+ (* blockID blockDim) threadId))
   (define gx (get-x gid))
   (define gy (get-y gid))
   (define id (modulo (get-x threadId) warpSize))
   (define warp-col (modulo id W))
   (define warp-row (quotient id W))
   (define offset-x (* (quotient gx warpSize) W))
   (define offset-y (* gy H))
   (define I-cached (create-matrix-local (x-y-z 2 2)))
   (global-to-local
    I
    I-cached
    (x-y-z 1 1)
    (lov2vol (x-y-z offset-x offset-y))
    (+ warp-shape 2)
    #f
    #:warp-shape
    warp-shape
    #:round
    (x-y-z 2 2))
   (define o (create-accumulator (list +) /9 blockDim))
   (for*
    ((ky 5) (kx 5))
    (let* ((index-j (ite (> warp-row (+ -1 ky)) (@dup 0) (@dup 1)))
           (index-i (ite (<= kx (+ 0 warp-col)) (@dup 0) (@dup 1)))
           (lane-x (sw-xform warp-col W 1 W W 1 kx 5 1 5 0))
           (lane-y (sw-xform warp-row H 1 H H 1 ky 5 1 5 0))
           (lane (+ (* lane-y W) lane-x))
           (x (shfl (get I-cached index-i index-j) lane)))
      (accumulate o x)))
   (reg-to-global
    (accumulate-final o)
    O
    (lov2vol (x-y-z (+ offset-x warp-col) (+ offset-y warp-row)))))
138
small_l2_2d-stencil-5.rkt - 2
solving...
(warpSize 16)
(blockID
 (0 0)
 (16 1)
 #((0 0)
   (1 0)
   (2 0)
   (3 0)
   (4 0)
   (5 0)
   (6 0)
   (7 0)
   (8 0)
   (9 0)
   (10 0)
   (11 0)
   (12 0)
   (13 0)
   (14 0)
   (15 0)))
run:l2/2d-stencil-5 137558
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l2_2d-stencil-5.rkt:106:0
'(define (stencil-2d-sketch threadId blockID blockDim I O I-sizes O-sizes)
   (define gid (+ (* blockID blockDim) threadId))
   (define gx (get-x gid))
   (define gy (get-y gid))
   (define id (modulo (get-x threadId) warpSize))
   (define warp-col (modulo id W))
   (define warp-row (quotient id W))
   (define offset-x (* (quotient gx warpSize) W))
   (define offset-y (* gy H))
   (define I-cached (create-matrix-local (x-y-z 2 2)))
   (global-to-local
    I
    I-cached
    (x-y-z 1 1)
    (lov2vol (x-y-z offset-x offset-y))
    (+ warp-shape 2)
    #f
    #:warp-shape
    warp-shape
    #:round
    (x-y-z 2 2))
   (define o (create-accumulator (list +) /9 blockDim))
   (for*
    ((ky 5) (kx 5))
    (let* ((index-j (ite (> warp-row (+ -1 ky)) (@dup 0) (@dup 1)))
           (index-i (ite (<= kx (+ 0 warp-col)) (@dup 0) (@dup 1)))
           (lane-x (sw-xform warp-col W 1 W W 1 kx 5 1 5 0))
           (lane-y (sw-xform warp-row H 1 H H 1 ky 5 1 5 0))
           (lane (+ (* lane-y W) lane-x))
           (x (shfl (get I-cached index-i index-j) lane)))
      (accumulate o x)))
   (reg-to-global
    (accumulate-final o)
    O
    (lov2vol (x-y-z (+ offset-x warp-col) (+ offset-y warp-row)))))
137
small_l3_trove-crc-7.rkt - 0
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 7)
(i 0 7)
(i 1 7)
(i 2 7)
(i 3 7)
(i 4 7)
(i 5 7)
(i 6 7)
(permute-vector 7)
(i 0 7)
(i 1 7)
(i 2 7)
(i 3 7)
(i 4 7)
(i 5 7)
(i 6 7)
run:l3/trove-crc-7 143733
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-crc-7.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 5 7 7 1 localId warpSize -1 -1 5))))
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 7 32 32 1 i struct-size 30 1 6))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 0 -1 7 -1 localId warpSize -1 1 6))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
145
small_l3_trove-crc-7.rkt - 1
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 7)
(i 0 7)
(i 1 7)
(i 2 7)
(i 3 7)
(i 4 7)
(i 5 7)
(i 6 7)
(permute-vector 7)
(i 0 7)
(i 1 7)
(i 2 7)
(i 3 7)
(i 4 7)
(i 5 7)
(i 6 7)
run:l3/trove-crc-7 144104
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-crc-7.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 5 7 7 1 localId warpSize -1 -1 5))))
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 7 32 32 1 i struct-size 30 1 6))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 0 -1 7 -1 localId warpSize -1 1 6))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
145
small_l3_trove-crc-7.rkt - 2
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 7)
(i 0 7)
(i 1 7)
(i 2 7)
(i 3 7)
(i 4 7)
(i 5 7)
(i 6 7)
(permute-vector 7)
(i 0 7)
(i 1 7)
(i 2 7)
(i 3 7)
(i 4 7)
(i 5 7)
(i 6 7)
run:l3/trove-crc-7 143187
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-crc-7.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 5 7 7 1 localId warpSize -1 -1 5))))
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 7 32 32 1 i struct-size 30 1 6))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 0 -1 7 -1 localId warpSize -1 1 6))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
144
small_l1_trove-crc-5.rkt - 0
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 5)
(i 0 5)
(i 1 5)
(i 2 5)
(i 3 5)
(i 4 5)
(permute-vector 5)
(i 0 5)
(i 1 5)
(i 2 5)
(i 3 5)
(i 4 5)
run:l1/trove-crc-5 2138
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-crc-5.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         3
         struct-size
         struct-size
         1
         localId
         warpSize
         2
         warpSize
         0))))
   (for
    ((i struct-size))
    (let* ((lane
            (sw-xform
             localId
             warpSize
             5
             warpSize
             warpSize
             1
             i
             struct-size
             1
             struct-size
             0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         1
         struct-size
         struct-size
         1
         localId
         warpSize
         0
         warpSize
         0))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
2
small_l1_trove-crc-5.rkt - 1
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 5)
(i 0 5)
(i 1 5)
(i 2 5)
(i 3 5)
(i 4 5)
(permute-vector 5)
(i 0 5)
(i 1 5)
(i 2 5)
(i 3 5)
(i 4 5)
run:l1/trove-crc-5 2140
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-crc-5.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         3
         struct-size
         struct-size
         1
         localId
         warpSize
         2
         warpSize
         0))))
   (for
    ((i struct-size))
    (let* ((lane
            (sw-xform
             localId
             warpSize
             5
             warpSize
             warpSize
             1
             i
             struct-size
             1
             struct-size
             0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         1
         struct-size
         struct-size
         1
         localId
         warpSize
         0
         warpSize
         0))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
2
small_l1_trove-crc-5.rkt - 2
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 5)
(i 0 5)
(i 1 5)
(i 2 5)
(i 3 5)
(i 4 5)
(permute-vector 5)
(i 0 5)
(i 1 5)
(i 2 5)
(i 3 5)
(i 4 5)
run:l1/trove-crc-5 2136
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-crc-5.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         3
         struct-size
         struct-size
         1
         localId
         warpSize
         2
         warpSize
         0))))
   (for
    ((i struct-size))
    (let* ((lane
            (sw-xform
             localId
             warpSize
             5
             warpSize
             warpSize
             1
             i
             struct-size
             1
             struct-size
             0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         1
         struct-size
         struct-size
         1
         localId
         warpSize
         0
         warpSize
         0))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
3
small_l1_2d-stencil-5.rkt - 0
solving...
(warpSize 16)
(blockID
 (0 0)
 (16 1)
 #((0 0)
   (1 0)
   (2 0)
   (3 0)
   (4 0)
   (5 0)
   (6 0)
   (7 0)
   (8 0)
   (9 0)
   (10 0)
   (11 0)
   (12 0)
   (13 0)
   (14 0)
   (15 0)))
run:l1/2d-stencil-5 64645
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_2d-stencil-5.rkt:106:0
'(define (stencil-2d-sketch threadId blockID blockDim I O I-sizes O-sizes)
   (define gid (+ (* blockID blockDim) threadId))
   (define gx (get-x gid))
   (define gy (get-y gid))
   (define id (modulo (get-x threadId) warpSize))
   (define warp-col (modulo id W))
   (define warp-row (quotient id W))
   (define offset-x (* (quotient gx warpSize) W))
   (define offset-y (* gy H))
   (define I-cached (create-matrix-local (x-y-z 2 2)))
   (global-to-local
    I
    I-cached
    (x-y-z 1 1)
    (lov2vol (x-y-z offset-x offset-y))
    (+ warp-shape 2)
    #f
    #:warp-shape
    warp-shape
    #:round
    (x-y-z 2 2))
   (define o (create-accumulator (list +) /9 blockDim))
   (for*
    ((ky 5) (kx 5))
    (let* ((index-j (ite (<= ky warp-row) (@dup 0) (@dup 1)))
           (index-i (ite (>= warp-col kx) (@dup 0) (@dup 1)))
           (lane-x (sw-xform warp-col W 1 W W 1 kx 5 1 5 0))
           (lane-y (sw-xform warp-row H 1 H H 1 ky 5 1 5 0))
           (lane (+ (* lane-y W) lane-x))
           (x (shfl (get I-cached index-i index-j) lane)))
      (accumulate o x)))
   (reg-to-global
    (accumulate-final o)
    O
    (lov2vol (x-y-z (+ offset-x warp-col) (+ offset-y warp-row)))))
65
small_l1_2d-stencil-5.rkt - 1
solving...
(warpSize 16)
(blockID
 (0 0)
 (16 1)
 #((0 0)
   (1 0)
   (2 0)
   (3 0)
   (4 0)
   (5 0)
   (6 0)
   (7 0)
   (8 0)
   (9 0)
   (10 0)
   (11 0)
   (12 0)
   (13 0)
   (14 0)
   (15 0)))
run:l1/2d-stencil-5 66198
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_2d-stencil-5.rkt:106:0
'(define (stencil-2d-sketch threadId blockID blockDim I O I-sizes O-sizes)
   (define gid (+ (* blockID blockDim) threadId))
   (define gx (get-x gid))
   (define gy (get-y gid))
   (define id (modulo (get-x threadId) warpSize))
   (define warp-col (modulo id W))
   (define warp-row (quotient id W))
   (define offset-x (* (quotient gx warpSize) W))
   (define offset-y (* gy H))
   (define I-cached (create-matrix-local (x-y-z 2 2)))
   (global-to-local
    I
    I-cached
    (x-y-z 1 1)
    (lov2vol (x-y-z offset-x offset-y))
    (+ warp-shape 2)
    #f
    #:warp-shape
    warp-shape
    #:round
    (x-y-z 2 2))
   (define o (create-accumulator (list +) /9 blockDim))
   (for*
    ((ky 5) (kx 5))
    (let* ((index-j (ite (<= ky warp-row) (@dup 0) (@dup 1)))
           (index-i (ite (>= warp-col kx) (@dup 0) (@dup 1)))
           (lane-x (sw-xform warp-col W 1 W W 1 kx 5 1 5 0))
           (lane-y (sw-xform warp-row H 1 H H 1 ky 5 1 5 0))
           (lane (+ (* lane-y W) lane-x))
           (x (shfl (get I-cached index-i index-j) lane)))
      (accumulate o x)))
   (reg-to-global
    (accumulate-final o)
    O
    (lov2vol (x-y-z (+ offset-x warp-col) (+ offset-y warp-row)))))
67
small_l1_2d-stencil-5.rkt - 2
solving...
(warpSize 16)
(blockID
 (0 0)
 (16 1)
 #((0 0)
   (1 0)
   (2 0)
   (3 0)
   (4 0)
   (5 0)
   (6 0)
   (7 0)
   (8 0)
   (9 0)
   (10 0)
   (11 0)
   (12 0)
   (13 0)
   (14 0)
   (15 0)))
run:l1/2d-stencil-5 65945
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_2d-stencil-5.rkt:106:0
'(define (stencil-2d-sketch threadId blockID blockDim I O I-sizes O-sizes)
   (define gid (+ (* blockID blockDim) threadId))
   (define gx (get-x gid))
   (define gy (get-y gid))
   (define id (modulo (get-x threadId) warpSize))
   (define warp-col (modulo id W))
   (define warp-row (quotient id W))
   (define offset-x (* (quotient gx warpSize) W))
   (define offset-y (* gy H))
   (define I-cached (create-matrix-local (x-y-z 2 2)))
   (global-to-local
    I
    I-cached
    (x-y-z 1 1)
    (lov2vol (x-y-z offset-x offset-y))
    (+ warp-shape 2)
    #f
    #:warp-shape
    warp-shape
    #:round
    (x-y-z 2 2))
   (define o (create-accumulator (list +) /9 blockDim))
   (for*
    ((ky 5) (kx 5))
    (let* ((index-j (ite (<= ky warp-row) (@dup 0) (@dup 1)))
           (index-i (ite (>= warp-col kx) (@dup 0) (@dup 1)))
           (lane-x (sw-xform warp-col W 1 W W 1 kx 5 1 5 0))
           (lane-y (sw-xform warp-row H 1 H H 1 ky 5 1 5 0))
           (lane (+ (* lane-y W) lane-x))
           (x (shfl (get I-cached index-i index-j) lane)))
      (accumulate o x)))
   (reg-to-global
    (accumulate-final o)
    O
    (lov2vol (x-y-z (+ offset-x warp-col) (+ offset-y warp-row)))))
66
small_l3_1d-conv.rkt - 0
solving...
(blockID
 (0)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
(blockID
 (1)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
run:l3/1d-conv 22894
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_1d-conv.rkt:91:0
'(define (conv1d-sketch threadId blockID blockDim I O W I-sizes O-sizes)
   (define I-cached (create-matrix-local (x-y-z 2)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (define offset (- gid localId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (+ warpSize 2))
    #f
    #:round
    2)
   (define o (create-accumulator (list * +) identity blockDim))
   (for/bounded
    ((i 3))
    (let* ((index (ite (> localId (+ -1 (@dup i))) (@dup 0) (@dup 1)))
           (lane (sw-xform localId warpSize 1 32 32 1 i warpSize 0 1 0))
           (w-idx
            (sw-xform
             localId
             warpSize
             0
             warpSize
             warpSize
             1
             i
             warpSize
             1
             warpSize
             0))
           (x (shfl (get I-cached index) lane))
           (w (get W w-idx)))
      (accumulate
       o
       (list w x)
       #:pred
       (>= (choose localId) (- -1 (choose localId))))))
   (reg-to-global o O gid))
23
small_l3_1d-conv.rkt - 1
solving...
(blockID
 (0)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
(blockID
 (1)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
run:l3/1d-conv 22879
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_1d-conv.rkt:91:0
'(define (conv1d-sketch threadId blockID blockDim I O W I-sizes O-sizes)
   (define I-cached (create-matrix-local (x-y-z 2)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (define offset (- gid localId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (+ warpSize 2))
    #f
    #:round
    2)
   (define o (create-accumulator (list * +) identity blockDim))
   (for/bounded
    ((i 3))
    (let* ((index (ite (> localId (+ -1 (@dup i))) (@dup 0) (@dup 1)))
           (lane (sw-xform localId warpSize 1 32 32 1 i warpSize 0 1 0))
           (w-idx
            (sw-xform
             localId
             warpSize
             0
             warpSize
             warpSize
             1
             i
             warpSize
             1
             warpSize
             0))
           (x (shfl (get I-cached index) lane))
           (w (get W w-idx)))
      (accumulate
       o
       (list w x)
       #:pred
       (>= (choose localId) (- -1 (choose localId))))))
   (reg-to-global o O gid))
23
small_l3_1d-conv.rkt - 2
solving...
(blockID
 (0)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
(blockID
 (1)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
run:l3/1d-conv 22856
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_1d-conv.rkt:91:0
'(define (conv1d-sketch threadId blockID blockDim I O W I-sizes O-sizes)
   (define I-cached (create-matrix-local (x-y-z 2)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (define offset (- gid localId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (+ warpSize 2))
    #f
    #:round
    2)
   (define o (create-accumulator (list * +) identity blockDim))
   (for/bounded
    ((i 3))
    (let* ((index (ite (> localId (+ -1 (@dup i))) (@dup 0) (@dup 1)))
           (lane (sw-xform localId warpSize 1 32 32 1 i warpSize 0 1 0))
           (w-idx
            (sw-xform
             localId
             warpSize
             0
             warpSize
             warpSize
             1
             i
             warpSize
             1
             warpSize
             0))
           (x (shfl (get I-cached index) lane))
           (w (get W w-idx)))
      (accumulate
       o
       (list w x)
       #:pred
       (>= (choose localId) (- -1 (choose localId))))))
   (reg-to-global o O gid))
22
small_l1_trove-crc-1.rkt - 0
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 1)
(i 0 1)
(permute-vector 1)
(i 0 1)
run:l1/trove-crc-1 123
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-crc-1.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         0
         struct-size
         struct-size
         1
         localId
         warpSize
         0
         warpSize
         0))))
   (for
    ((i struct-size))
    (let* ((lane
            (sw-xform
             localId
             warpSize
             1
             warpSize
             warpSize
             1
             i
             struct-size
             31
             struct-size
             0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         0
         struct-size
         struct-size
         1
         localId
         warpSize
         0
         warpSize
         0))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
0
small_l1_trove-crc-1.rkt - 1
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 1)
(i 0 1)
(permute-vector 1)
(i 0 1)
run:l1/trove-crc-1 122
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-crc-1.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         0
         struct-size
         struct-size
         1
         localId
         warpSize
         0
         warpSize
         0))))
   (for
    ((i struct-size))
    (let* ((lane
            (sw-xform
             localId
             warpSize
             1
             warpSize
             warpSize
             1
             i
             struct-size
             31
             struct-size
             0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         0
         struct-size
         struct-size
         1
         localId
         warpSize
         0
         warpSize
         0))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
0
small_l1_trove-crc-1.rkt - 2
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 1)
(i 0 1)
(permute-vector 1)
(i 0 1)
run:l1/trove-crc-1 123
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-crc-1.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         0
         struct-size
         struct-size
         1
         localId
         warpSize
         0
         warpSize
         0))))
   (for
    ((i struct-size))
    (let* ((lane
            (sw-xform
             localId
             warpSize
             1
             warpSize
             warpSize
             1
             i
             struct-size
             31
             struct-size
             0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         0
         struct-size
         struct-size
         1
         localId
         warpSize
         0
         warpSize
         0))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
0
small_l1_1d-conv.rkt - 0
solving...
(blockID
 (0)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
(blockID
 (1)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
run:l1/1d-conv 9120
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_1d-conv.rkt:91:0
'(define (conv1d-sketch threadId blockID blockDim I O W I-sizes O-sizes)
   (define I-cached (create-matrix-local (x-y-z 2)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (define offset (- gid localId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (+ warpSize 2))
    #f
    #:round
    2)
   (define o (create-accumulator (list * +) identity blockDim))
   (for/bounded
    ((i 3))
    (let* ((index (ite (>= localId (@dup i)) (@dup 0) (@dup 1)))
           (lane
            (sw-xform
             localId
             warpSize
             1
             warpSize
             warpSize
             1
             i
             warpSize
             1
             warpSize
             0))
           (w-idx
            (sw-xform
             localId
             warpSize
             0
             warpSize
             warpSize
             1
             i
             warpSize
             1
             warpSize
             0))
           (x (shfl (get I-cached index) lane))
           (w (get W w-idx)))
      (accumulate o (list w x) #:pred #t)))
   (reg-to-global o O gid))
9
small_l1_1d-conv.rkt - 1
solving...
(blockID
 (0)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
(blockID
 (1)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
run:l1/1d-conv 9023
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_1d-conv.rkt:91:0
'(define (conv1d-sketch threadId blockID blockDim I O W I-sizes O-sizes)
   (define I-cached (create-matrix-local (x-y-z 2)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (define offset (- gid localId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (+ warpSize 2))
    #f
    #:round
    2)
   (define o (create-accumulator (list * +) identity blockDim))
   (for/bounded
    ((i 3))
    (let* ((index (ite (>= localId (@dup i)) (@dup 0) (@dup 1)))
           (lane
            (sw-xform
             localId
             warpSize
             1
             warpSize
             warpSize
             1
             i
             warpSize
             1
             warpSize
             0))
           (w-idx
            (sw-xform
             localId
             warpSize
             0
             warpSize
             warpSize
             1
             i
             warpSize
             1
             warpSize
             0))
           (x (shfl (get I-cached index) lane))
           (w (get W w-idx)))
      (accumulate o (list w x) #:pred #t)))
   (reg-to-global o O gid))
10
small_l1_1d-conv.rkt - 2
solving...
(blockID
 (0)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
(blockID
 (1)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
run:l1/1d-conv 9073
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_1d-conv.rkt:91:0
'(define (conv1d-sketch threadId blockID blockDim I O W I-sizes O-sizes)
   (define I-cached (create-matrix-local (x-y-z 2)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (define offset (- gid localId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (+ warpSize 2))
    #f
    #:round
    2)
   (define o (create-accumulator (list * +) identity blockDim))
   (for/bounded
    ((i 3))
    (let* ((index (ite (>= localId (@dup i)) (@dup 0) (@dup 1)))
           (lane
            (sw-xform
             localId
             warpSize
             1
             warpSize
             warpSize
             1
             i
             warpSize
             1
             warpSize
             0))
           (w-idx
            (sw-xform
             localId
             warpSize
             0
             warpSize
             warpSize
             1
             i
             warpSize
             1
             warpSize
             0))
           (x (shfl (get I-cached index) lane))
           (w (get W w-idx)))
      (accumulate o (list w x) #:pred #t)))
   (reg-to-global o O gid))
9
small_l3_trove-crc-3.rkt - 0
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 3)
(i 0 3)
(i 1 3)
(i 2 3)
(permute-vector 3)
(i 0 3)
(i 1 3)
(i 2 3)
run:l3/trove-crc-3 17028
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-crc-3.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 0 1 3 -1 localId warpSize 1 32 1))))
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 3 32 32 1 i struct-size -1 3 2))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 0 -1 3 -1 localId warpSize -1 1 2))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
18
small_l3_trove-crc-3.rkt - 1
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 3)
(i 0 3)
(i 1 3)
(i 2 3)
(permute-vector 3)
(i 0 3)
(i 1 3)
(i 2 3)
run:l3/trove-crc-3 17163
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-crc-3.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 0 1 3 -1 localId warpSize 1 32 1))))
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 3 32 32 1 i struct-size -1 3 2))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 0 -1 3 -1 localId warpSize -1 1 2))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
17
small_l3_trove-crc-3.rkt - 2
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 3)
(i 0 3)
(i 1 3)
(i 2 3)
(permute-vector 3)
(i 0 3)
(i 1 3)
(i 2 3)
run:l3/trove-crc-3 17039
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-crc-3.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 0 1 3 -1 localId warpSize 1 32 1))))
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 3 32 32 1 i struct-size -1 3 2))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 0 -1 3 -1 localId warpSize -1 1 2))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
17
small_l1_trove-rcr-5.rkt - 0
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 5)
(i 0 5)
(i 1 5)
(i 2 5)
(i 3 5)
(i 4 5)
run:l1/trove-rcr-5 10757
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-rcr-5.rkt:76:0
'(define (AOS-load-rcr-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform
       localId
       warpSize
       1
       warpSize
       warpSize
       1
       i
       struct-size
       0
       struct-size
       0)))
   (define O-cached
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         3
         struct-size
         struct-size
         1
         localId
         warpSize
         2
         warpSize
         0))))
   (local-to-global
    O-cached
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform
       localId
       warpSize
       13
       warpSize
       warpSize
       1
       i
       struct-size
       19
       struct-size
       0))))
(cost 0)
13
small_l1_trove-rcr-5.rkt - 1
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 5)
(i 0 5)
(i 1 5)
(i 2 5)
(i 3 5)
(i 4 5)
run:l1/trove-rcr-5 10881
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-rcr-5.rkt:76:0
'(define (AOS-load-rcr-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform
       localId
       warpSize
       1
       warpSize
       warpSize
       1
       i
       struct-size
       0
       struct-size
       0)))
   (define O-cached
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         3
         struct-size
         struct-size
         1
         localId
         warpSize
         2
         warpSize
         0))))
   (local-to-global
    O-cached
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform
       localId
       warpSize
       13
       warpSize
       warpSize
       1
       i
       struct-size
       19
       struct-size
       0))))
(cost 0)
13
small_l1_trove-rcr-5.rkt - 2
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 5)
(i 0 5)
(i 1 5)
(i 2 5)
(i 3 5)
(i 4 5)
run:l1/trove-rcr-5 10708
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-rcr-5.rkt:76:0
'(define (AOS-load-rcr-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform
       localId
       warpSize
       1
       warpSize
       warpSize
       1
       i
       struct-size
       0
       struct-size
       0)))
   (define O-cached
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         3
         struct-size
         struct-size
         1
         localId
         warpSize
         2
         warpSize
         0))))
   (local-to-global
    O-cached
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform
       localId
       warpSize
       13
       warpSize
       warpSize
       1
       i
       struct-size
       19
       struct-size
       0))))
(cost 0)
13
small_l2_1d-stencil.rkt - 0
solving...
(blockID
 (0)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
(blockID
 (1)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
run:l2/1d-stencil 11641
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l2_1d-stencil.rkt:89:0
'(define (stencil-1d-sketch threadId blockID blockDim I O I-sizes O-sizes)
   (define I-cached (create-matrix-local (x-y-z 2)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (define offset (- gid localId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (+ warpSize 2))
    #f
    #:round
    2)
   (define o (create-accumulator (list +) /3 blockDim))
   (for/bounded
    ((i 3))
    (let* ((index (ite (> localId (+ -1 (@dup i))) (@dup 0) (@dup 1)))
           (lane
            (sw-xform
             localId
             warpSize
             1
             warpSize
             warpSize
             1
             i
             warpSize
             1
             warpSize
             0))
           (x (shfl (get I-cached index) lane)))
      (accumulate o x #:pred (= (choose localId) (+ 0 (choose localId))))))
   (reg-to-global o O gid))
12
small_l2_1d-stencil.rkt - 1
solving...
(blockID
 (0)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
(blockID
 (1)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
run:l2/1d-stencil 11775
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l2_1d-stencil.rkt:89:0
'(define (stencil-1d-sketch threadId blockID blockDim I O I-sizes O-sizes)
   (define I-cached (create-matrix-local (x-y-z 2)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (define offset (- gid localId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (+ warpSize 2))
    #f
    #:round
    2)
   (define o (create-accumulator (list +) /3 blockDim))
   (for/bounded
    ((i 3))
    (let* ((index (ite (> localId (+ -1 (@dup i))) (@dup 0) (@dup 1)))
           (lane
            (sw-xform
             localId
             warpSize
             1
             warpSize
             warpSize
             1
             i
             warpSize
             1
             warpSize
             0))
           (x (shfl (get I-cached index) lane)))
      (accumulate o x #:pred (= (choose localId) (+ 0 (choose localId))))))
   (reg-to-global o O gid))
12
small_l2_1d-stencil.rkt - 2
solving...
(blockID
 (0)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
(blockID
 (1)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
run:l2/1d-stencil 11604
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l2_1d-stencil.rkt:89:0
'(define (stencil-1d-sketch threadId blockID blockDim I O I-sizes O-sizes)
   (define I-cached (create-matrix-local (x-y-z 2)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (define offset (- gid localId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (+ warpSize 2))
    #f
    #:round
    2)
   (define o (create-accumulator (list +) /3 blockDim))
   (for/bounded
    ((i 3))
    (let* ((index (ite (> localId (+ -1 (@dup i))) (@dup 0) (@dup 1)))
           (lane
            (sw-xform
             localId
             warpSize
             1
             warpSize
             warpSize
             1
             i
             warpSize
             1
             warpSize
             0))
           (x (shfl (get I-cached index) lane)))
      (accumulate o x #:pred (= (choose localId) (+ 0 (choose localId))))))
   (reg-to-global o O gid))
12
small_l1_trove-crc-3.rkt - 0
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 3)
(i 0 3)
(i 1 3)
(i 2 3)
(permute-vector 3)
(i 0 3)
(i 1 3)
(i 2 3)
run:l1/trove-crc-3 1078
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-crc-3.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         1
         struct-size
         struct-size
         1
         localId
         warpSize
         1
         warpSize
         1))))
   (for
    ((i struct-size))
    (let* ((lane
            (sw-xform
             localId
             warpSize
             3
             warpSize
             warpSize
             1
             i
             struct-size
             31
             struct-size
             2))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         -1
         struct-size
         struct-size
         1
         localId
         warpSize
         0
         warpSize
         2))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
1
small_l1_trove-crc-3.rkt - 1
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 3)
(i 0 3)
(i 1 3)
(i 2 3)
(permute-vector 3)
(i 0 3)
(i 1 3)
(i 2 3)
run:l1/trove-crc-3 1078
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-crc-3.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         1
         struct-size
         struct-size
         1
         localId
         warpSize
         1
         warpSize
         1))))
   (for
    ((i struct-size))
    (let* ((lane
            (sw-xform
             localId
             warpSize
             3
             warpSize
             warpSize
             1
             i
             struct-size
             31
             struct-size
             2))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         -1
         struct-size
         struct-size
         1
         localId
         warpSize
         0
         warpSize
         2))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
2
small_l1_trove-crc-3.rkt - 2
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 3)
(i 0 3)
(i 1 3)
(i 2 3)
(permute-vector 3)
(i 0 3)
(i 1 3)
(i 2 3)
run:l1/trove-crc-3 1105
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-crc-3.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         1
         struct-size
         struct-size
         1
         localId
         warpSize
         1
         warpSize
         1))))
   (for
    ((i struct-size))
    (let* ((lane
            (sw-xform
             localId
             warpSize
             3
             warpSize
             warpSize
             1
             i
             struct-size
             31
             struct-size
             2))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         -1
         struct-size
         struct-size
         1
         localId
         warpSize
         0
         warpSize
         2))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
1
small_l1_trove-rcr-2.rkt - 0
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 2)
(i 0 2)
(i 1 2)
run:l1/trove-rcr-2 1936
small_l1_trove-rcr-2.rkt - 1
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 2)
(i 0 2)
(i 1 2)
run:l1/trove-rcr-2 1935
small_l1_trove-rcr-2.rkt - 2
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 2)
(i 0 2)
(i 1 2)
run:l1/trove-rcr-2 1928
small_l3_trove-crc-1.rkt - 0
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 1)
(i 0 1)
(permute-vector 1)
(i 0 1)
run:l3/trove-crc-1 3954
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-crc-1.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform i struct-size 0 1 1 (choose 1 -1) localId warpSize 0 16 0))))
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 1 32 32 -1 i struct-size 30 -1 16))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i)
        (sw-xform i struct-size 0 1 1 (choose 1 -1) localId warpSize 0 -1 0))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
4
small_l3_trove-crc-1.rkt - 1
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 1)
(i 0 1)
(permute-vector 1)
(i 0 1)
run:l3/trove-crc-1 3985
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-crc-1.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform i struct-size 0 1 1 (choose 1 -1) localId warpSize 0 16 0))))
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 1 32 32 -1 i struct-size 30 -1 16))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i)
        (sw-xform i struct-size 0 1 1 (choose 1 -1) localId warpSize 0 -1 0))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
5
small_l3_trove-crc-1.rkt - 2
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 1)
(i 0 1)
(permute-vector 1)
(i 0 1)
run:l3/trove-crc-1 3974
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-crc-1.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform i struct-size 0 1 1 (choose 1 -1) localId warpSize 0 16 0))))
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 1 32 32 -1 i struct-size 30 -1 16))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i)
        (sw-xform i struct-size 0 1 1 (choose 1 -1) localId warpSize 0 -1 0))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
4
small_l3_trove-crc-4.rkt - 0
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 4)
(i 0 4)
(i 1 4)
(i 2 4)
(i 3 4)
(permute-vector 4)
(i 0 4)
(i 1 4)
(i 2 4)
(i 3 4)
run:l3/trove-crc-4 20647
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-crc-4.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 0 1 4 -1 localId warpSize 0 1 3))))
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 4 8 32 -1 i struct-size 8 -1 17))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i) (sw-xform i struct-size -1 4 4 1 localId warpSize 0 8 1))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
21
small_l3_trove-crc-4.rkt - 1
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 4)
(i 0 4)
(i 1 4)
(i 2 4)
(i 3 4)
(permute-vector 4)
(i 0 4)
(i 1 4)
(i 2 4)
(i 3 4)
run:l3/trove-crc-4 20740
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-crc-4.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 0 1 4 -1 localId warpSize 0 1 3))))
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 4 8 32 -1 i struct-size 8 -1 17))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i) (sw-xform i struct-size -1 4 4 1 localId warpSize 0 8 1))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
22
small_l3_trove-crc-4.rkt - 2
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 4)
(i 0 4)
(i 1 4)
(i 2 4)
(i 3 4)
(permute-vector 4)
(i 0 4)
(i 1 4)
(i 2 4)
(i 3 4)
run:l3/trove-crc-4 20663
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-crc-4.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 0 1 4 -1 localId warpSize 0 1 3))))
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 4 8 32 -1 i struct-size 8 -1 17))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i) (sw-xform i struct-size -1 4 4 1 localId warpSize 0 8 1))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
21
small_l2_1d-conv.rkt - 0
solving...
(blockID
 (0)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
(blockID
 (1)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
run:l2/1d-conv 10751
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l2_1d-conv.rkt:91:0
'(define (conv1d-sketch threadId blockID blockDim I O W I-sizes O-sizes)
   (define I-cached (create-matrix-local (x-y-z 2)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (define offset (- gid localId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (+ warpSize 2))
    #f
    #:round
    2)
   (define o (create-accumulator (list * +) identity blockDim))
   (for/bounded
    ((i 3))
    (let* ((index (ite (> localId (+ -1 (@dup i))) (@dup 0) (@dup 1)))
           (lane
            (sw-xform
             localId
             warpSize
             1
             warpSize
             warpSize
             1
             i
             warpSize
             1
             warpSize
             0))
           (w-idx
            (sw-xform
             localId
             warpSize
             0
             warpSize
             warpSize
             1
             i
             warpSize
             1
             warpSize
             0))
           (x (shfl (get I-cached index) lane))
           (w (get W w-idx)))
      (accumulate
       o
       (list w x)
       #:pred
       (>= (choose localId) (- -1 (choose localId))))))
   (reg-to-global o O gid))
11
small_l2_1d-conv.rkt - 1
solving...
(blockID
 (0)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
(blockID
 (1)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
run:l2/1d-conv 10793
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l2_1d-conv.rkt:91:0
'(define (conv1d-sketch threadId blockID blockDim I O W I-sizes O-sizes)
   (define I-cached (create-matrix-local (x-y-z 2)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (define offset (- gid localId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (+ warpSize 2))
    #f
    #:round
    2)
   (define o (create-accumulator (list * +) identity blockDim))
   (for/bounded
    ((i 3))
    (let* ((index (ite (> localId (+ -1 (@dup i))) (@dup 0) (@dup 1)))
           (lane
            (sw-xform
             localId
             warpSize
             1
             warpSize
             warpSize
             1
             i
             warpSize
             1
             warpSize
             0))
           (w-idx
            (sw-xform
             localId
             warpSize
             0
             warpSize
             warpSize
             1
             i
             warpSize
             1
             warpSize
             0))
           (x (shfl (get I-cached index) lane))
           (w (get W w-idx)))
      (accumulate
       o
       (list w x)
       #:pred
       (>= (choose localId) (- -1 (choose localId))))))
   (reg-to-global o O gid))
10
small_l2_1d-conv.rkt - 2
solving...
(blockID
 (0)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
(blockID
 (1)
 (64)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)
   (32)
   (33)
   (34)
   (35)
   (36)
   (37)
   (38)
   (39)
   (40)
   (41)
   (42)
   (43)
   (44)
   (45)
   (46)
   (47)
   (48)
   (49)
   (50)
   (51)
   (52)
   (53)
   (54)
   (55)
   (56)
   (57)
   (58)
   (59)
   (60)
   (61)
   (62)
   (63)))
run:l2/1d-conv 10641
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l2_1d-conv.rkt:91:0
'(define (conv1d-sketch threadId blockID blockDim I O W I-sizes O-sizes)
   (define I-cached (create-matrix-local (x-y-z 2)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (define offset (- gid localId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (+ warpSize 2))
    #f
    #:round
    2)
   (define o (create-accumulator (list * +) identity blockDim))
   (for/bounded
    ((i 3))
    (let* ((index (ite (> localId (+ -1 (@dup i))) (@dup 0) (@dup 1)))
           (lane
            (sw-xform
             localId
             warpSize
             1
             warpSize
             warpSize
             1
             i
             warpSize
             1
             warpSize
             0))
           (w-idx
            (sw-xform
             localId
             warpSize
             0
             warpSize
             warpSize
             1
             i
             warpSize
             1
             warpSize
             0))
           (x (shfl (get I-cached index) lane))
           (w (get W w-idx)))
      (accumulate
       o
       (list w x)
       #:pred
       (>= (choose localId) (- -1 (choose localId))))))
   (reg-to-global o O gid))
10
small_l3_2d-stencil-3.rkt - 0
solving...
(warpSize 16)
(blockID
 (0 0)
 (16 1)
 #((0 0)
   (1 0)
   (2 0)
   (3 0)
   (4 0)
   (5 0)
   (6 0)
   (7 0)
   (8 0)
   (9 0)
   (10 0)
   (11 0)
   (12 0)
   (13 0)
   (14 0)
   (15 0)))
run:l3/2d-stencil-3 51320
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_2d-stencil-3.rkt:106:0
'(define (stencil-2d-sketch threadId blockID blockDim I O I-sizes O-sizes)
   (define gid (+ (* blockID blockDim) threadId))
   (define gx (get-x gid))
   (define gy (get-y gid))
   (define id (modulo (get-x threadId) warpSize))
   (define warp-col (modulo id W))
   (define warp-row (quotient id W))
   (define offset-x (* (quotient gx warpSize) W))
   (define offset-y (* gy H))
   (define I-cached (create-matrix-local (x-y-z 2 2)))
   (global-to-local
    I
    I-cached
    (x-y-z 1 1)
    (lov2vol (x-y-z offset-x offset-y))
    (+ warp-shape 2)
    #f
    #:warp-shape
    warp-shape
    #:round
    (x-y-z 2 2))
   (define o (create-accumulator (list +) /9 blockDim))
   (for*
    ((ky 3) (kx 3))
    (let* ((index-j (ite (<= ky (+ 0 warp-row)) (@dup 0) (@dup 1)))
           (index-i (ite (> kx (- 1 warp-col)) (@dup 0) (@dup 1)))
           (lane-x (sw-xform warp-col W 1 4 4 1 kx 3 -1 -3 2))
           (lane-y (sw-xform warp-row H 0 1 4 -1 ky 3 1 3 0))
           (lane (+ (* lane-y W) lane-x))
           (x (shfl (get I-cached index-i index-j) lane)))
      (accumulate o x)))
   (reg-to-global
    (accumulate-final o)
    O
    (lov2vol (x-y-z (+ offset-x warp-col) (+ offset-y warp-row)))))
51
small_l3_2d-stencil-3.rkt - 1
solving...
(warpSize 16)
(blockID
 (0 0)
 (16 1)
 #((0 0)
   (1 0)
   (2 0)
   (3 0)
   (4 0)
   (5 0)
   (6 0)
   (7 0)
   (8 0)
   (9 0)
   (10 0)
   (11 0)
   (12 0)
   (13 0)
   (14 0)
   (15 0)))
run:l3/2d-stencil-3 51497
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_2d-stencil-3.rkt:106:0
'(define (stencil-2d-sketch threadId blockID blockDim I O I-sizes O-sizes)
   (define gid (+ (* blockID blockDim) threadId))
   (define gx (get-x gid))
   (define gy (get-y gid))
   (define id (modulo (get-x threadId) warpSize))
   (define warp-col (modulo id W))
   (define warp-row (quotient id W))
   (define offset-x (* (quotient gx warpSize) W))
   (define offset-y (* gy H))
   (define I-cached (create-matrix-local (x-y-z 2 2)))
   (global-to-local
    I
    I-cached
    (x-y-z 1 1)
    (lov2vol (x-y-z offset-x offset-y))
    (+ warp-shape 2)
    #f
    #:warp-shape
    warp-shape
    #:round
    (x-y-z 2 2))
   (define o (create-accumulator (list +) /9 blockDim))
   (for*
    ((ky 3) (kx 3))
    (let* ((index-j (ite (<= ky (+ 0 warp-row)) (@dup 0) (@dup 1)))
           (index-i (ite (> kx (- 1 warp-col)) (@dup 0) (@dup 1)))
           (lane-x (sw-xform warp-col W 1 4 4 1 kx 3 -1 -3 2))
           (lane-y (sw-xform warp-row H 0 1 4 -1 ky 3 1 3 0))
           (lane (+ (* lane-y W) lane-x))
           (x (shfl (get I-cached index-i index-j) lane)))
      (accumulate o x)))
   (reg-to-global
    (accumulate-final o)
    O
    (lov2vol (x-y-z (+ offset-x warp-col) (+ offset-y warp-row)))))
52
small_l3_2d-stencil-3.rkt - 2
solving...
(warpSize 16)
(blockID
 (0 0)
 (16 1)
 #((0 0)
   (1 0)
   (2 0)
   (3 0)
   (4 0)
   (5 0)
   (6 0)
   (7 0)
   (8 0)
   (9 0)
   (10 0)
   (11 0)
   (12 0)
   (13 0)
   (14 0)
   (15 0)))
run:l3/2d-stencil-3 51530
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_2d-stencil-3.rkt:106:0
'(define (stencil-2d-sketch threadId blockID blockDim I O I-sizes O-sizes)
   (define gid (+ (* blockID blockDim) threadId))
   (define gx (get-x gid))
   (define gy (get-y gid))
   (define id (modulo (get-x threadId) warpSize))
   (define warp-col (modulo id W))
   (define warp-row (quotient id W))
   (define offset-x (* (quotient gx warpSize) W))
   (define offset-y (* gy H))
   (define I-cached (create-matrix-local (x-y-z 2 2)))
   (global-to-local
    I
    I-cached
    (x-y-z 1 1)
    (lov2vol (x-y-z offset-x offset-y))
    (+ warp-shape 2)
    #f
    #:warp-shape
    warp-shape
    #:round
    (x-y-z 2 2))
   (define o (create-accumulator (list +) /9 blockDim))
   (for*
    ((ky 3) (kx 3))
    (let* ((index-j (ite (<= ky (+ 0 warp-row)) (@dup 0) (@dup 1)))
           (index-i (ite (> kx (- 1 warp-col)) (@dup 0) (@dup 1)))
           (lane-x (sw-xform warp-col W 1 4 4 1 kx 3 -1 -3 2))
           (lane-y (sw-xform warp-row H 0 1 4 -1 ky 3 1 3 0))
           (lane (+ (* lane-y W) lane-x))
           (x (shfl (get I-cached index-i index-j) lane)))
      (accumulate o x)))
   (reg-to-global
    (accumulate-final o)
    O
    (lov2vol (x-y-z (+ offset-x warp-col) (+ offset-y warp-row)))))
52
small_l1_trove-rcr-7.rkt - 0
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 7)
(i 0 7)
(i 1 7)
(i 2 7)
(i 3 7)
(i 4 7)
(i 5 7)
(i 6 7)
run:l1/trove-rcr-7 20144
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-rcr-7.rkt:76:0
'(define (AOS-load-rcr-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform
       localId
       warpSize
       -1
       warpSize
       warpSize
       1
       i
       struct-size
       0
       struct-size
       31)))
   (define O-cached
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         2
         struct-size
         struct-size
         1
         localId
         warpSize
         2
         warpSize
         1))))
   (local-to-global
    O-cached
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform
       localId
       warpSize
       9
       warpSize
       warpSize
       1
       i
       struct-size
       9
       struct-size
       9))))
(cost 0)
25
small_l1_trove-rcr-7.rkt - 1
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 7)
(i 0 7)
(i 1 7)
(i 2 7)
(i 3 7)
(i 4 7)
(i 5 7)
(i 6 7)
run:l1/trove-rcr-7 20087
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-rcr-7.rkt:76:0
'(define (AOS-load-rcr-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform
       localId
       warpSize
       -1
       warpSize
       warpSize
       1
       i
       struct-size
       0
       struct-size
       31)))
   (define O-cached
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         2
         struct-size
         struct-size
         1
         localId
         warpSize
         2
         warpSize
         1))))
   (local-to-global
    O-cached
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform
       localId
       warpSize
       9
       warpSize
       warpSize
       1
       i
       struct-size
       9
       struct-size
       9))))
(cost 0)
24
small_l1_trove-rcr-7.rkt - 2
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 7)
(i 0 7)
(i 1 7)
(i 2 7)
(i 3 7)
(i 4 7)
(i 5 7)
(i 6 7)
run:l1/trove-rcr-7 19884
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-rcr-7.rkt:76:0
'(define (AOS-load-rcr-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform
       localId
       warpSize
       -1
       warpSize
       warpSize
       1
       i
       struct-size
       0
       struct-size
       31)))
   (define O-cached
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         2
         struct-size
         struct-size
         1
         localId
         warpSize
         2
         warpSize
         1))))
   (local-to-global
    O-cached
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform
       localId
       warpSize
       9
       warpSize
       warpSize
       1
       i
       struct-size
       9
       struct-size
       9))))
(cost 0)
25
small_l1_2d-stencil-3.rkt - 0
solving...
(warpSize 16)
(blockID
 (0 0)
 (16 1)
 #((0 0)
   (1 0)
   (2 0)
   (3 0)
   (4 0)
   (5 0)
   (6 0)
   (7 0)
   (8 0)
   (9 0)
   (10 0)
   (11 0)
   (12 0)
   (13 0)
   (14 0)
   (15 0)))
run:l1/2d-stencil-3 21160
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_2d-stencil-3.rkt:106:0
'(define (stencil-2d-sketch threadId blockID blockDim I O I-sizes O-sizes)
   (define gid (+ (* blockID blockDim) threadId))
   (define gx (get-x gid))
   (define gy (get-y gid))
   (define id (modulo (get-x threadId) warpSize))
   (define warp-col (modulo id W))
   (define warp-row (quotient id W))
   (define offset-x (* (quotient gx warpSize) W))
   (define offset-y (* gy H))
   (define I-cached (create-matrix-local (x-y-z 2 2)))
   (global-to-local
    I
    I-cached
    (x-y-z 1 1)
    (lov2vol (x-y-z offset-x offset-y))
    (+ warp-shape 2)
    #f
    #:warp-shape
    warp-shape
    #:round
    (x-y-z 2 2))
   (define o (create-accumulator (list +) /9 blockDim))
   (for*
    ((ky 3) (kx 3))
    (let* ((index-j (ite (>= warp-row ky) (@dup 0) (@dup 1)))
           (index-i (ite (<= kx warp-col) (@dup 0) (@dup 1)))
           (lane-x (sw-xform warp-col W 1 W W 1 kx 3 1 3 0))
           (lane-y (sw-xform warp-row H 1 H H 1 ky 3 1 3 0))
           (lane (+ (* lane-y W) lane-x))
           (x (shfl (get I-cached index-i index-j) lane)))
      (accumulate o x)))
   (reg-to-global
    (accumulate-final o)
    O
    (lov2vol (x-y-z (+ offset-x warp-col) (+ offset-y warp-row)))))
21
small_l1_2d-stencil-3.rkt - 1
solving...
(warpSize 16)
(blockID
 (0 0)
 (16 1)
 #((0 0)
   (1 0)
   (2 0)
   (3 0)
   (4 0)
   (5 0)
   (6 0)
   (7 0)
   (8 0)
   (9 0)
   (10 0)
   (11 0)
   (12 0)
   (13 0)
   (14 0)
   (15 0)))
run:l1/2d-stencil-3 21005
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_2d-stencil-3.rkt:106:0
'(define (stencil-2d-sketch threadId blockID blockDim I O I-sizes O-sizes)
   (define gid (+ (* blockID blockDim) threadId))
   (define gx (get-x gid))
   (define gy (get-y gid))
   (define id (modulo (get-x threadId) warpSize))
   (define warp-col (modulo id W))
   (define warp-row (quotient id W))
   (define offset-x (* (quotient gx warpSize) W))
   (define offset-y (* gy H))
   (define I-cached (create-matrix-local (x-y-z 2 2)))
   (global-to-local
    I
    I-cached
    (x-y-z 1 1)
    (lov2vol (x-y-z offset-x offset-y))
    (+ warp-shape 2)
    #f
    #:warp-shape
    warp-shape
    #:round
    (x-y-z 2 2))
   (define o (create-accumulator (list +) /9 blockDim))
   (for*
    ((ky 3) (kx 3))
    (let* ((index-j (ite (>= warp-row ky) (@dup 0) (@dup 1)))
           (index-i (ite (<= kx warp-col) (@dup 0) (@dup 1)))
           (lane-x (sw-xform warp-col W 1 W W 1 kx 3 1 3 0))
           (lane-y (sw-xform warp-row H 1 H H 1 ky 3 1 3 0))
           (lane (+ (* lane-y W) lane-x))
           (x (shfl (get I-cached index-i index-j) lane)))
      (accumulate o x)))
   (reg-to-global
    (accumulate-final o)
    O
    (lov2vol (x-y-z (+ offset-x warp-col) (+ offset-y warp-row)))))
21
small_l1_2d-stencil-3.rkt - 2
solving...
(warpSize 16)
(blockID
 (0 0)
 (16 1)
 #((0 0)
   (1 0)
   (2 0)
   (3 0)
   (4 0)
   (5 0)
   (6 0)
   (7 0)
   (8 0)
   (9 0)
   (10 0)
   (11 0)
   (12 0)
   (13 0)
   (14 0)
   (15 0)))
run:l1/2d-stencil-3 21250
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_2d-stencil-3.rkt:106:0
'(define (stencil-2d-sketch threadId blockID blockDim I O I-sizes O-sizes)
   (define gid (+ (* blockID blockDim) threadId))
   (define gx (get-x gid))
   (define gy (get-y gid))
   (define id (modulo (get-x threadId) warpSize))
   (define warp-col (modulo id W))
   (define warp-row (quotient id W))
   (define offset-x (* (quotient gx warpSize) W))
   (define offset-y (* gy H))
   (define I-cached (create-matrix-local (x-y-z 2 2)))
   (global-to-local
    I
    I-cached
    (x-y-z 1 1)
    (lov2vol (x-y-z offset-x offset-y))
    (+ warp-shape 2)
    #f
    #:warp-shape
    warp-shape
    #:round
    (x-y-z 2 2))
   (define o (create-accumulator (list +) /9 blockDim))
   (for*
    ((ky 3) (kx 3))
    (let* ((index-j (ite (>= warp-row ky) (@dup 0) (@dup 1)))
           (index-i (ite (<= kx warp-col) (@dup 0) (@dup 1)))
           (lane-x (sw-xform warp-col W 1 W W 1 kx 3 1 3 0))
           (lane-y (sw-xform warp-row H 1 H H 1 ky 3 1 3 0))
           (lane (+ (* lane-y W) lane-x))
           (x (shfl (get I-cached index-i index-j) lane)))
      (accumulate o x)))
   (reg-to-global
    (accumulate-final o)
    O
    (lov2vol (x-y-z (+ offset-x warp-col) (+ offset-y warp-row)))))
21
small_l1_trove-crc-7.rkt - 0
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 7)
(i 0 7)
(i 1 7)
(i 2 7)
(i 3 7)
(i 4 7)
(i 5 7)
(i 6 7)
(permute-vector 7)
(i 0 7)
(i 1 7)
(i 2 7)
(i 3 7)
(i 4 7)
(i 5 7)
(i 6 7)
run:l1/trove-crc-7 11097
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-crc-7.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         2
         struct-size
         struct-size
         1
         localId
         warpSize
         5
         warpSize
         0))))
   (for
    ((i struct-size))
    (let* ((lane
            (sw-xform
             localId
             warpSize
             7
             warpSize
             warpSize
             1
             i
             struct-size
             1
             struct-size
             0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         1
         struct-size
         struct-size
         1
         localId
         warpSize
         0
         warpSize
         0))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
12
small_l1_trove-crc-7.rkt - 1
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 7)
(i 0 7)
(i 1 7)
(i 2 7)
(i 3 7)
(i 4 7)
(i 5 7)
(i 6 7)
(permute-vector 7)
(i 0 7)
(i 1 7)
(i 2 7)
(i 3 7)
(i 4 7)
(i 5 7)
(i 6 7)
run:l1/trove-crc-7 11062
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-crc-7.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         2
         struct-size
         struct-size
         1
         localId
         warpSize
         5
         warpSize
         0))))
   (for
    ((i struct-size))
    (let* ((lane
            (sw-xform
             localId
             warpSize
             7
             warpSize
             warpSize
             1
             i
             struct-size
             1
             struct-size
             0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         1
         struct-size
         struct-size
         1
         localId
         warpSize
         0
         warpSize
         0))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
12
small_l1_trove-crc-7.rkt - 2
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 7)
(i 0 7)
(i 1 7)
(i 2 7)
(i 3 7)
(i 4 7)
(i 5 7)
(i 6 7)
(permute-vector 7)
(i 0 7)
(i 1 7)
(i 2 7)
(i 3 7)
(i 4 7)
(i 5 7)
(i 6 7)
run:l1/trove-crc-7 11025
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-crc-7.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         2
         struct-size
         struct-size
         1
         localId
         warpSize
         5
         warpSize
         0))))
   (for
    ((i struct-size))
    (let* ((lane
            (sw-xform
             localId
             warpSize
             7
             warpSize
             warpSize
             1
             i
             struct-size
             1
             struct-size
             0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         1
         struct-size
         struct-size
         1
         localId
         warpSize
         0
         warpSize
         0))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
11
small_l3_trove-crc-2.rkt - 0
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 2)
(i 0 2)
(i 1 2)
(permute-vector 2)
(i 0 2)
(i 1 2)
run:l3/trove-crc-2 8742
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-crc-2.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 0 -1 2 -1 localId warpSize 0 -1 0))))
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 2 16 32 -1 i struct-size -1 -2 18))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 0 1 2 -1 localId warpSize 0 16 0))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
9
small_l3_trove-crc-2.rkt - 1
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 2)
(i 0 2)
(i 1 2)
(permute-vector 2)
(i 0 2)
(i 1 2)
run:l3/trove-crc-2 8710
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-crc-2.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 0 -1 2 -1 localId warpSize 0 -1 0))))
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 2 16 32 -1 i struct-size -1 -2 18))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 0 1 2 -1 localId warpSize 0 16 0))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
9
small_l3_trove-crc-2.rkt - 2
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 2)
(i 0 2)
(i 1 2)
(permute-vector 2)
(i 0 2)
(i 1 2)
run:l3/trove-crc-2 8780
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-crc-2.rkt:76:0
'(define (AOS-load-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define O-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 0 -1 2 -1 localId warpSize 0 -1 0))))
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 2 16 32 -1 i struct-size -1 -2 18))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (set O-cached (@dup i) x)))
   (define O-cached2
     (permute-vector
      O-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 0 1 2 -1 localId warpSize 0 16 0))))
   (local-to-global
    O-cached2
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size))
(cost 0)
9
small_l1_trove-rcr-3.rkt - 0
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 3)
(i 0 3)
(i 1 3)
(i 2 3)
run:l1/trove-rcr-3 5708
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-rcr-3.rkt:76:0
'(define (AOS-load-rcr-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform
       localId
       warpSize
       1
       warpSize
       warpSize
       1
       i
       struct-size
       0
       struct-size
       0)))
   (define O-cached
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         -1
         struct-size
         struct-size
         1
         localId
         warpSize
         1
         warpSize
         0))))
   (local-to-global
    O-cached
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform
       localId
       warpSize
       11
       warpSize
       warpSize
       1
       i
       struct-size
       21
       struct-size
       0))))
(cost 0)
7
small_l1_trove-rcr-3.rkt - 1
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 3)
(i 0 3)
(i 1 3)
(i 2 3)
run:l1/trove-rcr-3 5766
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-rcr-3.rkt:76:0
'(define (AOS-load-rcr-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform
       localId
       warpSize
       1
       warpSize
       warpSize
       1
       i
       struct-size
       0
       struct-size
       0)))
   (define O-cached
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         -1
         struct-size
         struct-size
         1
         localId
         warpSize
         1
         warpSize
         0))))
   (local-to-global
    O-cached
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform
       localId
       warpSize
       11
       warpSize
       warpSize
       1
       i
       struct-size
       21
       struct-size
       0))))
(cost 0)
7
small_l1_trove-rcr-3.rkt - 2
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 3)
(i 0 3)
(i 1 3)
(i 2 3)
run:l1/trove-rcr-3 5715
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-rcr-3.rkt:76:0
'(define (AOS-load-rcr-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform
       localId
       warpSize
       1
       warpSize
       warpSize
       1
       i
       struct-size
       0
       struct-size
       0)))
   (define O-cached
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         -1
         struct-size
         struct-size
         1
         localId
         warpSize
         1
         warpSize
         0))))
   (local-to-global
    O-cached
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform
       localId
       warpSize
       11
       warpSize
       warpSize
       1
       i
       struct-size
       21
       struct-size
       0))))
(cost 0)
7
small_l3_trove-rcr-1.rkt - 0
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 1)
(i 0 1)
run:l3/trove-rcr-1 9618
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-rcr-1.rkt:76:0
'(define (AOS-load-rcr-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform localId warpSize 0 1 32 -1 i struct-size 30 -1 24)))
   (define O-cached
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform i struct-size 0 1 1 (choose 1 -1) localId warpSize 0 32 0))))
   (local-to-global
    O-cached
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform localId warpSize 0 1 32 -1 i struct-size 30 1 24))))
(cost 0)
10
small_l3_trove-rcr-1.rkt - 1
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 1)
(i 0 1)
run:l3/trove-rcr-1 9584
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-rcr-1.rkt:76:0
'(define (AOS-load-rcr-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform localId warpSize 0 1 32 -1 i struct-size 30 -1 24)))
   (define O-cached
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform i struct-size 0 1 1 (choose 1 -1) localId warpSize 0 32 0))))
   (local-to-global
    O-cached
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform localId warpSize 0 1 32 -1 i struct-size 30 1 24))))
(cost 0)
10
small_l3_trove-rcr-1.rkt - 2
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 1)
(i 0 1)
run:l3/trove-rcr-1 9639
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-rcr-1.rkt:76:0
'(define (AOS-load-rcr-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform localId warpSize 0 1 32 -1 i struct-size 30 -1 24)))
   (define O-cached
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform i struct-size 0 1 1 (choose 1 -1) localId warpSize 0 32 0))))
   (local-to-global
    O-cached
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform localId warpSize 0 1 32 -1 i struct-size 30 1 24))))
(cost 0)
10
big_l3_trove-rcr-2.rkt - 0
solving...
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 2)
(i 0 2)
(i 1 2)
run:l3/trove-rcr-2 1540175
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/big_l3_trove-rcr-2.rkt:76:0
'(define (AOS-load-rcr-sketch threadId blockID blockDim I O a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define localId (modulo (get-x threadId) 32))
   (define offset
     (* struct-size (- (+ (* blockID blockDim) (get-x threadId)) localId)))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform localId warpSize 2 16 32 -1 i struct-size -1 -2 1)))
   (define O-cached
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 0 1 2 -1 localId warpSize 0 -16 1))))
   (local-to-global
    O-cached
    O
    (x-y-z 1)
    offset
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size
    #:shfl
    (lambda (localId i)
      (sw-xform localId warpSize 1 32 32 1 i struct-size 16 2 16))))
(cost 0)
1541
big_l2_2d-stencil-7.rkt - 0
solving...
(warpSize 16)
(blockID
 (0 0)
 (16 1)
 #((0 0)
   (1 0)
   (2 0)
   (3 0)
   (4 0)
   (5 0)
   (6 0)
   (7 0)
   (8 0)
   (9 0)
   (10 0)
   (11 0)
   (12 0)
   (13 0)
   (14 0)
   (15 0)))
run:l2/2d-stencil-7 851822
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/big_l2_2d-stencil-7.rkt:142:0
'(define (stencil-2d-sketch2 threadId blockID blockDim I O I-sizes O-sizes)
   (define gid (+ (* blockID blockDim) threadId))
   (define gx (get-x gid))
   (define gy (get-y gid))
   (define id (modulo (get-x threadId) warpSize))
   (define warp-col (modulo id W))
   (define warp-row (quotient id W))
   (define offset-x (* (quotient gx warpSize) W))
   (define offset-y (* gy H))
   (define I-cached (create-matrix-local (x-y-z 3 3)))
   (global-to-local
    I
    I-cached
    (x-y-z 1 1)
    (lov2vol (x-y-z offset-x offset-y))
    (+ warp-shape 6)
    #f
    #:warp-shape
    warp-shape
    #:round
    (x-y-z 3 3))
   (define o (create-accumulator (list +) /9 blockDim))
   (for*
    ((ky 7) (kx 7))
    (let* ((index-j
            (ite
             (<= ky (+ 0 warp-row))
             (@dup 0)
             (ite (> ky (- H ky)) (@dup 1) (@dup 2))))
           (index-i
            (ite
             (< kx (+ 1 warp-col))
             (@dup 0)
             (ite (> kx (- W kx)) (@dup 1) (@dup 2))))
           (lane-x (sw-xform warp-col W 1 W W 1 kx 7 1 7 0))
           (lane-y (sw-xform warp-row H 1 H H 1 ky 7 1 7 0))
           (lane (+ (* lane-y W) lane-x))
           (x (shfl (get I-cached index-i index-j) lane)))
      (accumulate o x)))
   (reg-to-global
    (accumulate-final o)
    O
    (lov2vol (x-y-z (+ offset-x warp-col) (+ offset-y warp-row)))))
852
small_l1_trove-cr_sum-1.rkt - 0
solving...
(spec-cost 32)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 1)
(i 0 1)
finish permute-vector
finish kernel
run:l1/trove-cr_sum-1 280
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-cr_sum-1.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         0
         struct-size
         struct-size
         1
         localId
         warpSize
         0
         warpSize
         0))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane
            (sw-xform
             localId
             warpSize
             1
             warpSize
             warpSize
             1
             i
             struct-size
             31
             struct-size
             0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 1)
1
small_l1_trove-cr_sum-1.rkt - 1
solving...
(spec-cost 32)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 1)
(i 0 1)
finish permute-vector
finish kernel
run:l1/trove-cr_sum-1 323
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-cr_sum-1.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         0
         struct-size
         struct-size
         1
         localId
         warpSize
         0
         warpSize
         0))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane
            (sw-xform
             localId
             warpSize
             1
             warpSize
             warpSize
             1
             i
             struct-size
             31
             struct-size
             0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 1)
0
small_l1_trove-cr_sum-1.rkt - 2
solving...
(spec-cost 32)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 1)
(i 0 1)
finish permute-vector
finish kernel
run:l1/trove-cr_sum-1 276
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-cr_sum-1.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         0
         struct-size
         struct-size
         1
         localId
         warpSize
         0
         warpSize
         0))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane
            (sw-xform
             localId
             warpSize
             1
             warpSize
             warpSize
             1
             i
             struct-size
             31
             struct-size
             0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 1)
1
small_l1_trove-cr_sum-2.rkt - 0
solving...
(spec-cost 64)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 2)
(i 0 2)
(i 1 2)
finish permute-vector
finish kernel
run:l1/trove-cr_sum-2 774
small_l1_trove-cr_sum-2.rkt - 1
solving...
(spec-cost 64)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 2)
(i 0 2)
(i 1 2)
finish permute-vector
finish kernel
run:l1/trove-cr_sum-2 714
small_l1_trove-cr_sum-2.rkt - 2
solving...
(spec-cost 64)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 2)
(i 0 2)
(i 1 2)
finish permute-vector
finish kernel
run:l1/trove-cr_sum-2 709
small_l1_trove-cr_sum-3.rkt - 0
solving...
(spec-cost 96)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 3)
(i 0 3)
(i 1 3)
(i 2 3)
finish permute-vector
finish kernel
run:l1/trove-cr_sum-3 2040
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-cr_sum-3.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         2
         struct-size
         struct-size
         1
         localId
         warpSize
         1
         warpSize
         0))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane
            (sw-xform
             localId
             warpSize
             3
             warpSize
             warpSize
             1
             i
             struct-size
             1
             struct-size
             0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 3)
3
small_l1_trove-cr_sum-3.rkt - 1
solving...
(spec-cost 96)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 3)
(i 0 3)
(i 1 3)
(i 2 3)
finish permute-vector
finish kernel
run:l1/trove-cr_sum-3 2029
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-cr_sum-3.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         2
         struct-size
         struct-size
         1
         localId
         warpSize
         1
         warpSize
         0))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane
            (sw-xform
             localId
             warpSize
             3
             warpSize
             warpSize
             1
             i
             struct-size
             1
             struct-size
             0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 3)
2
small_l1_trove-cr_sum-3.rkt - 2
solving...
(spec-cost 96)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 3)
(i 0 3)
(i 1 3)
(i 2 3)
finish permute-vector
finish kernel
run:l1/trove-cr_sum-3 2049
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-cr_sum-3.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         2
         struct-size
         struct-size
         1
         localId
         warpSize
         1
         warpSize
         0))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane
            (sw-xform
             localId
             warpSize
             3
             warpSize
             warpSize
             1
             i
             struct-size
             1
             struct-size
             0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 3)
3
small_l1_trove-cr_sum-4.rkt - 0
solving...
(spec-cost 128)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 4)
(i 0 4)
(i 1 4)
(i 2 4)
(i 3 4)
finish permute-vector
finish kernel
run:l1/trove-cr_sum-4 2300
small_l1_trove-cr_sum-4.rkt - 1
solving...
(spec-cost 128)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 4)
(i 0 4)
(i 1 4)
(i 2 4)
(i 3 4)
finish permute-vector
finish kernel
run:l1/trove-cr_sum-4 2317
small_l1_trove-cr_sum-4.rkt - 2
solving...
(spec-cost 128)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 4)
(i 0 4)
(i 1 4)
(i 2 4)
(i 3 4)
finish permute-vector
finish kernel
run:l1/trove-cr_sum-4 2255
small_l1_trove-cr_sum-5.rkt - 0
solving...
(spec-cost 160)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 5)
(i 0 5)
(i 1 5)
(i 2 5)
(i 3 5)
(i 4 5)
finish permute-vector
finish kernel
run:l1/trove-cr_sum-5 4725
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-cr_sum-5.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         3
         struct-size
         struct-size
         1
         localId
         warpSize
         2
         warpSize
         0))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane
            (sw-xform
             localId
             warpSize
             5
             warpSize
             warpSize
             1
             i
             struct-size
             1
             struct-size
             0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 5)
5
small_l1_trove-cr_sum-5.rkt - 1
solving...
(spec-cost 160)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 5)
(i 0 5)
(i 1 5)
(i 2 5)
(i 3 5)
(i 4 5)
finish permute-vector
finish kernel
run:l1/trove-cr_sum-5 4780
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-cr_sum-5.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         3
         struct-size
         struct-size
         1
         localId
         warpSize
         2
         warpSize
         0))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane
            (sw-xform
             localId
             warpSize
             5
             warpSize
             warpSize
             1
             i
             struct-size
             1
             struct-size
             0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 5)
5
small_l1_trove-cr_sum-5.rkt - 2
solving...
(spec-cost 160)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 5)
(i 0 5)
(i 1 5)
(i 2 5)
(i 3 5)
(i 4 5)
finish permute-vector
finish kernel
run:l1/trove-cr_sum-5 4815
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-cr_sum-5.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         3
         struct-size
         struct-size
         1
         localId
         warpSize
         2
         warpSize
         0))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane
            (sw-xform
             localId
             warpSize
             5
             warpSize
             warpSize
             1
             i
             struct-size
             1
             struct-size
             0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 5)
6
small_l1_trove-cr_sum-7.rkt - 0
solving...
(spec-cost 224)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 7)
(i 0 7)
(i 1 7)
(i 2 7)
(i 3 7)
(i 4 7)
(i 5 7)
(i 6 7)
finish permute-vector
finish kernel
run:l1/trove-cr_sum-7 7964
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-cr_sum-7.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         2
         struct-size
         struct-size
         1
         localId
         warpSize
         5
         warpSize
         0))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane
            (sw-xform
             localId
             warpSize
             7
             warpSize
             warpSize
             1
             i
             struct-size
             1
             struct-size
             0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 7)
9
small_l1_trove-cr_sum-7.rkt - 1
solving...
(spec-cost 224)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 7)
(i 0 7)
(i 1 7)
(i 2 7)
(i 3 7)
(i 4 7)
(i 5 7)
(i 6 7)
finish permute-vector
finish kernel
run:l1/trove-cr_sum-7 8151
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-cr_sum-7.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         2
         struct-size
         struct-size
         1
         localId
         warpSize
         5
         warpSize
         0))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane
            (sw-xform
             localId
             warpSize
             7
             warpSize
             warpSize
             1
             i
             struct-size
             1
             struct-size
             0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 7)
10
small_l1_trove-cr_sum-7.rkt - 2
solving...
(spec-cost 224)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 7)
(i 0 7)
(i 1 7)
(i 2 7)
(i 3 7)
(i 4 7)
(i 5 7)
(i 6 7)
finish permute-vector
finish kernel
run:l1/trove-cr_sum-7 7914
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l1_trove-cr_sum-7.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform
         i
         struct-size
         2
         struct-size
         struct-size
         1
         localId
         warpSize
         5
         warpSize
         0))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane
            (sw-xform
             localId
             warpSize
             7
             warpSize
             warpSize
             1
             i
             struct-size
             1
             struct-size
             0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 7)
9
small_l3_trove-cr_sum-1.rkt - 0
solving...
(spec-cost 32)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 1)
(i 0 1)
finish permute-vector
finish kernel
run:l3/trove-cr_sum-1 8861
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-cr_sum-1.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform i struct-size 0 1 1 (choose 1 -1) localId warpSize 0 1 0))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 1 32 32 -1 i struct-size 30 1 20))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 1)
10
small_l3_trove-cr_sum-1.rkt - 1
solving...
(spec-cost 32)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 1)
(i 0 1)
finish permute-vector
finish kernel
run:l3/trove-cr_sum-1 8917
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-cr_sum-1.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform i struct-size 0 1 1 (choose 1 -1) localId warpSize 0 1 0))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 1 32 32 -1 i struct-size 30 1 20))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 1)
10
small_l3_trove-cr_sum-1.rkt - 2
solving...
(spec-cost 32)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 1)
(i 0 1)
finish permute-vector
finish kernel
run:l3/trove-cr_sum-1 8948
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-cr_sum-1.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i)
        (sw-xform i struct-size 0 1 1 (choose 1 -1) localId warpSize 0 1 0))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 1 32 32 -1 i struct-size 30 1 20))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 1)
10
small_l3_trove-cr_sum-2.rkt - 0
solving...
(spec-cost 64)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 2)
(i 0 2)
(i 1 2)
finish permute-vector
finish kernel
run:l3/trove-cr_sum-2 15199
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-cr_sum-2.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 1 2 2 1 localId warpSize -1 32 0))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 2 16 32 -1 i struct-size 0 -1 0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 2)
16
small_l3_trove-cr_sum-2.rkt - 1
solving...
(spec-cost 64)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 2)
(i 0 2)
(i 1 2)
finish permute-vector
finish kernel
run:l3/trove-cr_sum-2 15305
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-cr_sum-2.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 1 2 2 1 localId warpSize -1 32 0))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 2 16 32 -1 i struct-size 0 -1 0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 2)
16
small_l3_trove-cr_sum-2.rkt - 2
solving...
(spec-cost 64)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 2)
(i 0 2)
(i 1 2)
finish permute-vector
finish kernel
run:l3/trove-cr_sum-2 15113
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-cr_sum-2.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 1 2 2 1 localId warpSize -1 32 0))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 2 16 32 -1 i struct-size 0 -1 0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 2)
15
small_l3_trove-cr_sum-3.rkt - 0
solving...
(spec-cost 96)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 3)
(i 0 3)
(i 1 3)
(i 2 3)
finish permute-vector
finish kernel
run:l3/trove-cr_sum-3 24029
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-cr_sum-3.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 0 -1 3 -1 localId warpSize 1 32 0))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 3 32 32 1 i struct-size 0 1 0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 3)
25
small_l3_trove-cr_sum-3.rkt - 1
solving...
(spec-cost 96)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 3)
(i 0 3)
(i 1 3)
(i 2 3)
finish permute-vector
finish kernel
run:l3/trove-cr_sum-3 23979
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-cr_sum-3.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 0 -1 3 -1 localId warpSize 1 32 0))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 3 32 32 1 i struct-size 0 1 0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 3)
24
small_l3_trove-cr_sum-3.rkt - 2
solving...
(spec-cost 96)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 3)
(i 0 3)
(i 1 3)
(i 2 3)
finish permute-vector
finish kernel
run:l3/trove-cr_sum-3 23974
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-cr_sum-3.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 0 -1 3 -1 localId warpSize 1 32 0))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 3 32 32 1 i struct-size 0 1 0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 3)
25
small_l3_trove-cr_sum-4.rkt - 0
solving...
(spec-cost 128)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 4)
(i 0 4)
(i 1 4)
(i 2 4)
(i 3 4)
finish permute-vector
finish kernel
run:l3/trove-cr_sum-4 34649
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-cr_sum-4.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 1 4 4 1 localId warpSize 0 1 2))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 4 8 32 -1 i struct-size 0 -1 2))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 4)
35
small_l3_trove-cr_sum-4.rkt - 1
solving...
(spec-cost 128)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 4)
(i 0 4)
(i 1 4)
(i 2 4)
(i 3 4)
finish permute-vector
finish kernel
run:l3/trove-cr_sum-4 34639
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-cr_sum-4.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 1 4 4 1 localId warpSize 0 1 2))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 4 8 32 -1 i struct-size 0 -1 2))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 4)
36
small_l3_trove-cr_sum-4.rkt - 2
solving...
(spec-cost 128)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 4)
(i 0 4)
(i 1 4)
(i 2 4)
(i 3 4)
finish permute-vector
finish kernel
run:l3/trove-cr_sum-4 34603
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-cr_sum-4.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 1 4 4 1 localId warpSize 0 1 2))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 4 8 32 -1 i struct-size 0 -1 2))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 4)
36
small_l3_trove-cr_sum-5.rkt - 0
solving...
(spec-cost 160)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 5)
(i 0 5)
(i 1 5)
(i 2 5)
(i 3 5)
(i 4 5)
finish permute-vector
finish kernel
run:l3/trove-cr_sum-5 49717
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-cr_sum-5.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 3 5 5 1 localId warpSize 1 1 0))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 5 -32 32 1 i struct-size 0 1 0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 5)
51
small_l3_trove-cr_sum-5.rkt - 1
solving...
(spec-cost 160)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 5)
(i 0 5)
(i 1 5)
(i 2 5)
(i 3 5)
(i 4 5)
finish permute-vector
finish kernel
run:l3/trove-cr_sum-5 49260
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-cr_sum-5.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 3 5 5 1 localId warpSize 1 1 0))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 5 -32 32 1 i struct-size 0 1 0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 5)
51
small_l3_trove-cr_sum-5.rkt - 2
solving...
(spec-cost 160)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 5)
(i 0 5)
(i 1 5)
(i 2 5)
(i 3 5)
(i 4 5)
finish permute-vector
finish kernel
run:l3/trove-cr_sum-5 49736
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-cr_sum-5.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 3 5 5 1 localId warpSize 1 1 0))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 5 -32 32 1 i struct-size 0 1 0))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 5)
51
small_l3_trove-cr_sum-7.rkt - 0
solving...
(spec-cost 224)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 7)
(i 0 7)
(i 1 7)
(i 2 7)
(i 3 7)
(i 4 7)
(i 5 7)
(i 6 7)
finish permute-vector
finish kernel
run:l3/trove-cr_sum-7 66065
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-cr_sum-7.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 5 7 7 1 localId warpSize 4 1 5))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 7 32 32 1 i struct-size 0 -1 6))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 7)
67
small_l3_trove-cr_sum-7.rkt - 1
solving...
(spec-cost 224)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 7)
(i 0 7)
(i 1 7)
(i 2 7)
(i 3 7)
(i 4 7)
(i 5 7)
(i 6 7)
finish permute-vector
finish kernel
run:l3/trove-cr_sum-7 65978
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-cr_sum-7.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 5 7 7 1 localId warpSize 4 1 5))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 7 32 32 1 i struct-size 0 -1 6))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 7)
68
small_l3_trove-cr_sum-7.rkt - 2
solving...
(spec-cost 224)
(blockID
 (0)
 (32)
 #((0)
   (1)
   (2)
   (3)
   (4)
   (5)
   (6)
   (7)
   (8)
   (9)
   (10)
   (11)
   (12)
   (13)
   (14)
   (15)
   (16)
   (17)
   (18)
   (19)
   (20)
   (21)
   (22)
   (23)
   (24)
   (25)
   (26)
   (27)
   (28)
   (29)
   (30)
   (31)))
(permute-vector 7)
(i 0 7)
(i 1 7)
(i 2 7)
(i 3 7)
(i 4 7)
(i 5 7)
(i 6 7)
finish permute-vector
finish kernel
run:l3/trove-cr_sum-7 66098
/home/krzysd/enumerative-search/swizzleflow/swizzle-inventor-benchmarks/small_l3_trove-cr_sum-7.rkt:90:0
'(define (AOS-sum-sketch threadId blockID blockDim I O I-sizes O-sizes a b c)
   (define I-cached (create-matrix-local (x-y-z struct-size)))
   (define gid (+ (* blockID blockDim) threadId))
   (define localId (get-idInWarp threadId))
   (global-to-local
    I
    I-cached
    (x-y-z 1)
    (* struct-size (- gid localId))
    (x-y-z (* warpSize struct-size))
    #f
    #:round
    struct-size)
   (define o (create-accumulator (list +) identity blockDim))
   (define I-cached2
     (permute-vector
      I-cached
      struct-size
      (lambda (i) (sw-xform i struct-size 5 7 7 1 localId warpSize 4 1 5))))
   (pretty-display "finish permute-vector")
   (for
    ((i struct-size))
    (let* ((lane (sw-xform localId warpSize 7 32 32 1 i struct-size 0 -1 6))
           (x (shfl (get I-cached2 (@dup i)) lane)))
      (accumulate o x #:pred #t)))
   (reg-to-global o O gid)
   (pretty-display "finish kernel"))
(cost 7)
68
