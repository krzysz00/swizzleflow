spec:./specs/poly-mult-2.json
load:matrices/4-reshape-2,2 density=0.0625; time=0.000038784;
load:matrices/4-reshape_2,2-transpose-2,2 density=0.0625; time=0.000025853;
load:matrices/4-reshape_2,2-transpose_2,2-cond_keep_no_consts{restrict[1|1]}-2,2,2 density=0.0625; time=0.000032234;
load:matrices/4-reshape_2,2-transpose_2,2-cond_keep_no_consts{restrict[1|1]}_2,2,2-cond_keep_no_consts{restrict[1|0]}-2,2,2 density=0.0625; time=0.000041691;
load:matrices/4-reshape_2,2-transpose_2,2-cond_keep_no_consts{restrict[1|1]}_2,2,2-cond_keep_no_consts{restrict[1|0]}_2,2,2-broadcast{group[1]}-2,2 density=0.25; time=0.000025662;
load:matrices/4-reshape_2,2-transpose_2,2-cond_keep_no_consts{restrict[1|1]}_2,2,2-cond_keep_no_consts{restrict[1|0]}_2,2,2-broadcast{group[1]}_2,2-rots_no_group{main[0]out[1]second[1]}-2,2 density=0.25; time=0.000032301;
load:matrices/4-reshape_2,2-transpose_2,2-cond_keep_no_consts{restrict[1|1]}_2,2,2-cond_keep_no_consts{restrict[1|0]}_2,2,2-broadcast{group[1]}_2,2-rots_no_group{main[0]out[1]second[1]}-2,2 density=0.25; time=0.000036789;
Begin search
solution:merge_fold[init;broadcast;id;id,init;broadcast;xform(0,1,2);id];broadcast;keep_if(d0 >= 0 + d2);keep_if(d0 < 0 + d2);tr;id
success_path [level 12 @ lane 0]
merge_fold[init;broadcast;id;id,init;broadcast;xform(0,1,2);id];broadcast;keep_if(d0 >= 0 + d2);keep_if(d0 < 0 + d2);tr;id:
[∑(∑(0, 2, ), ), ∑(∑(0, 3, ), ∑(1, 2, ), ), ∑(∑(1, 3, ), ), ⊥]
success_path [level 11 @ lane 0]
merge_fold[init;broadcast;id;id,init;broadcast;xform(0,1,2);id];broadcast;keep_if(d0 >= 0 + d2);keep_if(d0 < 0 + d2);tr;id:
[∑(∑(0, 2, ), ), ∑(∑(0, 3, ), ∑(1, 2, ), ), ∑(∑(1, 3, ), ), ⊥]
success_path [level 10 @ lane 0]
merge_fold[init;broadcast;id;id,init;broadcast;xform(0,1,2);id];broadcast;keep_if(d0 >= 0 + d2);keep_if(d0 < 0 + d2);tr:
[[∑(∑(0, 2, ), ), ∑(∑(0, 3, ), ∑(1, 2, ), )],
 [∑(∑(1, 3, ), ), ⊥]]
success_path [level 9 @ lane 0]
merge_fold[init;broadcast;id;id,init;broadcast;xform(0,1,2);id];broadcast;keep_if(d0 >= 0 + d2);keep_if(d0 < 0 + d2):
[[∑(∑(0, 2, ), ), ∑(∑(1, 3, ), )],
 [∑(∑(0, 3, ), ∑(1, 2, ), ), ⊥]]
success_path [level 8 @ lane 0]
merge_fold[init;broadcast;id;id,init;broadcast;xform(0,1,2);id];broadcast;keep_if(d0 >= 0 + d2):
[[[∑(0, 2, ), ⊥],
  [∑(0, 2, ), ∑(1, 3, )]],

 [[∑(0, 3, ), ∑(1, 2, )],
  [∑(0, 3, ), ∑(1, 2, )]]]
success_path [level 7 @ lane 0]
merge_fold[init;broadcast;id;id,init;broadcast;xform(0,1,2);id];broadcast:
[[[∑(0, 2, ), ∑(1, 3, )],
  [∑(0, 2, ), ∑(1, 3, )]],

 [[∑(0, 3, ), ∑(1, 2, )],
  [∑(0, 3, ), ∑(1, 2, )]]]
success_path [level 6 @ lane 0]
merge_fold[init;broadcast;id;id,init;broadcast;xform(0,1,2);id]:
[[∑(0, 2, ), ∑(1, 3, )],
 [∑(0, 3, ), ∑(1, 2, )]]
success_path [level 5 @ lane 1]
init;broadcast;xform(0,1,2);id:
[[2, 3],
 [3, 2]]
success_path [level 4 @ lane 1]
init;broadcast;xform(0,1,2):
[[2, 3],
 [3, 2]]
success_path [level 3 @ lane 0]
init;broadcast;id;id:
[[0, 1],
 [0, 1]]
success_path [level 2 @ lane 0]
init;broadcast;id:
[[0, 1],
 [0, 1]]
solution:merge_fold[init;broadcast;xform(0,1,2);id,init;broadcast;id;id];broadcast;keep_if(d0 >= 0 + d2);keep_if(d0 < 0 + d2);tr;id
success_path [level 12 @ lane 0]
merge_fold[init;broadcast;xform(0,1,2);id,init;broadcast;id;id];broadcast;keep_if(d0 >= 0 + d2);keep_if(d0 < 0 + d2);tr;id:
[∑(∑(0, 2, ), ), ∑(∑(0, 3, ), ∑(1, 2, ), ), ∑(∑(1, 3, ), ), ⊥]
success_path [level 11 @ lane 0]
merge_fold[init;broadcast;xform(0,1,2);id,init;broadcast;id;id];broadcast;keep_if(d0 >= 0 + d2);keep_if(d0 < 0 + d2);tr;id:
[∑(∑(0, 2, ), ), ∑(∑(0, 3, ), ∑(1, 2, ), ), ∑(∑(1, 3, ), ), ⊥]
success_path [level 10 @ lane 0]
merge_fold[init;broadcast;xform(0,1,2);id,init;broadcast;id;id];broadcast;keep_if(d0 >= 0 + d2);keep_if(d0 < 0 + d2);tr:
[[∑(∑(0, 2, ), ), ∑(∑(0, 3, ), ∑(1, 2, ), )],
 [∑(∑(1, 3, ), ), ⊥]]
success_path [level 9 @ lane 0]
merge_fold[init;broadcast;xform(0,1,2);id,init;broadcast;id;id];broadcast;keep_if(d0 >= 0 + d2);keep_if(d0 < 0 + d2):
[[∑(∑(0, 2, ), ), ∑(∑(1, 3, ), )],
 [∑(∑(0, 3, ), ∑(1, 2, ), ), ⊥]]
success_path [level 8 @ lane 0]
merge_fold[init;broadcast;xform(0,1,2);id,init;broadcast;id;id];broadcast;keep_if(d0 >= 0 + d2):
[[[∑(0, 2, ), ⊥],
  [∑(0, 2, ), ∑(1, 3, )]],

 [[∑(1, 2, ), ∑(0, 3, )],
  [∑(1, 2, ), ∑(0, 3, )]]]
success_path [level 7 @ lane 0]
merge_fold[init;broadcast;xform(0,1,2);id,init;broadcast;id;id];broadcast:
[[[∑(0, 2, ), ∑(1, 3, )],
  [∑(0, 2, ), ∑(1, 3, )]],

 [[∑(1, 2, ), ∑(0, 3, )],
  [∑(1, 2, ), ∑(0, 3, )]]]
success_path [level 6 @ lane 0]
merge_fold[init;broadcast;xform(0,1,2);id,init;broadcast;id;id]:
[[∑(0, 2, ), ∑(1, 3, )],
 [∑(1, 2, ), ∑(0, 3, )]]
success_path [level 5 @ lane 1]
init;broadcast;id;id:
[[2, 3],
 [2, 3]]
success_path [level 4 @ lane 1]
init;broadcast;id:
[[2, 3],
 [2, 3]]
success_path [level 3 @ lane 0]
init;broadcast;xform(0,1,2);id:
[[0, 1],
 [1, 0]]
success_path [level 2 @ lane 0]
init;broadcast;xform(0,1,2):
[[0, 1],
 [1, 0]]
success_path [level 1 @ lane 1]
init;broadcast:
[[2, 3],
 [2, 3]]
success_path [level 0 @ lane 0]
init;broadcast:
[[0, 1],
 [0, 1]]
stats:0 name=broadcast; lane=0; tested=1; found=0; failed=0; pruned=0; continued=1;
stats:1 name=broadcast; lane=1; tested=1; found=0; failed=0; pruned=0; continued=1;
stats:2 name=xforms_no_group{main[0]out[1]second[1]}; lane=0; tested=3; found=0; failed=0; pruned=1; continued=2;
stats:3 name=rots_no_group{main[0]out[1]second[1]}; lane=0; tested=6; found=0; failed=0; pruned=4; continued=2;
stats:4 name=xforms_no_group{main[0]out[1]second[1]}; lane=1; tested=6; found=0; failed=0; pruned=2; continued=4;
stats:5 name=rots_no_group{main[0]out[1]second[1]}; lane=1; tested=12; found=0; failed=0; pruned=8; continued=4;
stats:6 name=merge_folding; lane=0; tested=4; found=0; failed=0; pruned=2; continued=2;
stats:7 name=broadcast{group[1]}; lane=0; tested=2; found=0; failed=0; pruned=0; continued=2;
stats:8 name=cond_keep_no_consts{restrict[1|0]}; lane=0; tested=28; found=0; failed=0; pruned=24; continued=4;
stats:9 name=cond_keep_no_consts{restrict[1|1]}; lane=0; tested=56; found=0; failed=44; pruned=8; continued=4;
stats:10 name=transpose; lane=0; tested=4; found=0; failed=0; pruned=0; continued=4;
stats:11 name=reshape; lane=0; tested=4; found=0; failed=0; pruned=0; continued=4;
stats:12 name=(last); lane=0; tested=4; found=2; failed=2; pruned=0; continued=0;
search:./specs/poly-mult-2.json success=true; mode=All; time=0.000704836;
