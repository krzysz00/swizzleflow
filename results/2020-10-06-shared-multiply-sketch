construction:all time=0.009928107;
spec:specs/swinv_like/l1/mult-64-with-16-shared.swflow
elements: [0, 1], start: 0, end: 2
elements: [2, 10, 6, 14, 4, 8, 12, 16, 3, 5, 7, 9, 11, 13, 15, 17], start: 2, end: 18
elements: [18, 50, 34, 66, 26, 42, 58, 74, 22, 30, 38, 46, 54, 62, 70, 78, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81], start: 18, end: 82
elements: [82, 89, 85, 93, 83, 87, 91, 95, 84, 86, 88, 90, 92, 94, 96], start: 82, end: 97
load:matrices/4x4,,-[0>0]reshape-16,, n_ones=256; n_elems=65536; in_slots=16; out_slots=16; density=0.00390625; time=0.000034623;
file_map:b765602b83 raw=4x4,,-[0>0]transpose-4x4,,.4x4,,-[0>0]reshape-16,,
load:matrices/b765602b83 n_ones=256; n_elems=65536; in_slots=16; out_slots=16; density=0.00390625; time=0.000077846;
file_map:35f802bcac raw=4x4x4x4,,-[0>0]reshape{fold_len=16}-4x4,,.4x4,,-[0>0]transpose-4x4,,.4x4,,-[0>0]reshape-16,,
load:matrices/35f802bcac n_ones=65536; n_elems=16777216; in_slots=256; out_slots=16; density=0.00390625; time=0.009453094;
file_map:2ba238b643 raw=4x4x4,,-[0>0]broadcast{group=1}-4x4x4x4,,.4x4x4x4,,-[0>0]reshape{fold_len=16}-4x4,,.4x4,,-[0>0]transpose-4x4,,.4x4,,-[0>0]reshape-16,,
load:matrices/2ba238b643 n_ones=65536; n_elems=1048576; in_slots=64; out_slots=16; density=0.0625; time=0.000508548;
file_map:033e7df52c raw=4x4x4,4x4x4,-[0,1>0 -1]stack{fold_len=2}-4x4x4,,.4x4x4,,-[0>0]broadcast{group=1}-4x4x4x4,,.4x4x4x4,,-[0>0]reshape{fold_len=16}-4x4,,.4x4,,-[0>0]transpose-4x4,,.4x4,,-[0>0]reshape-16,,
load:matrices/033e7df52c n_ones=262144; n_elems=4194304; in_slots=128; out_slots=16; density=0.0625; time=0.001623388;
file_map:5dd56b5591 raw=4x4x4,4x4x2,-[1>1]b_dup_mult64-4x4x4,4x4x4,.4x4x4,4x4x4,-[0,1>0 -1]stack{fold_len=2}-4x4x4,,.4x4x4,,-[0>0]broadcast{group=1}-4x4x4x4,,.4x4x4x4,,-[0>0]reshape{fold_len=16}-4x4,,.4x4,,-[0>0]transpose-4x4,,.4x4,,-[0>0]reshape-16,,
load:matrices/5dd56b5591 n_ones=147456; n_elems=2359296; in_slots=96; out_slots=16; density=0.0625; time=0.001070976;
file_map:2d132b2405 raw=4x4x4,4x4,4x4-[2,1>1 -2]stack-4x4x4,4x4x2,.4x4x4,4x4x2,-[1>1]b_dup_mult64-4x4x4,4x4x4,.4x4x4,4x4x4,-[0,1>0 -1]stack{fold_len=2}-4x4x4,,.4x4x4,,-[0>0]broadcast{group=1}-4x4x4x4,,.4x4x4x4,,-[0>0]reshape{fold_len=16}-4x4,,.4x4,,-[0>0]transpose-4x4,,.4x4,,-[0>0]reshape-16,,
load:matrices/2d132b2405 n_ones=147456; n_elems=2359296; in_slots=96; out_slots=16; density=0.0625; time=0.001068031;
file_map:ecce3112d4 raw=4x4x4,4x8,4x4-[1>1]rots_no_group{main=1,out=1,second=0}-4x4x4,4x4,4x4.4x4x4,4x4,4x4-[2,1>1 -2]stack-4x4x4,4x4x2,.4x4x4,4x4x2,-[1>1]b_dup_mult64-4x4x4,4x4x4,.4x4x4,4x4x4,-[0,1>0 -1]stack{fold_len=2}-4x4x4,,.4x4x4,,-[0>0]broadcast{group=1}-4x4x4x4,,.4x4x4x4,,-[0>0]reshape{fold_len=16}-4x4,,.4x4,,-[0>0]transpose-4x4,,.4x4,,-[0>0]reshape-16,,
load:matrices/ecce3112d4 n_ones=198656; n_elems=3211264; in_slots=112; out_slots=16; density=0.06186224489795918; time=0.001464353;
file_map:22fe85f546 raw=4x4x4,4x8,4x4-[1>1]xforms_no_group{main=1,out=1,second=0}-4x4x4,4x8,4x4.4x4x4,4x8,4x4-[1>1]rots_no_group{main=1,out=1,second=0}-4x4x4,4x4,4x4.4x4x4,4x4,4x4-[2,1>1 -2]stack-4x4x4,4x4x2,.4x4x4,4x4x2,-[1>1]b_dup_mult64-4x4x4,4x4x4,.4x4x4,4x4x4,-[0,1>0 -1]stack{fold_len=2}-4x4x4,,.4x4x4,,-[0>0]broadcast{group=1}-4x4x4x4,,.4x4x4x4,,-[0>0]reshape{fold_len=16}-4x4,,.4x4,,-[0>0]transpose-4x4,,.4x4,,-[0>0]reshape-16,,
load:matrices/22fe85f546 n_ones=200704; n_elems=3211264; in_slots=112; out_slots=16; density=0.0625; time=0.001289849;
file_map:5092828d8b raw=4x4x4,4x8,4x8-[2>2]rots_no_group{main=1,out=1,second=0}-4x4x4,4x8,4x4.4x4x4,4x8,4x4-[1>1]xforms_no_group{main=1,out=1,second=0}-4x4x4,4x8,4x4.4x4x4,4x8,4x4-[1>1]rots_no_group{main=1,out=1,second=0}-4x4x4,4x4,4x4.4x4x4,4x4,4x4-[2,1>1 -2]stack-4x4x4,4x4x2,.4x4x4,4x4x2,-[1>1]b_dup_mult64-4x4x4,4x4x4,.4x4x4,4x4x4,-[0,1>0 -1]stack{fold_len=2}-4x4x4,,.4x4x4,,-[0>0]broadcast{group=1}-4x4x4x4,,.4x4x4x4,,-[0>0]reshape{fold_len=16}-4x4,,.4x4,,-[0>0]transpose-4x4,,.4x4,,-[0>0]reshape-16,,
load:matrices/5092828d8b n_ones=260096; n_elems=4194304; in_slots=128; out_slots=16; density=0.06201171875; time=0.001904577;
file_map:b615b89d2b raw=4x4x4,4x8,-[1>2]xforms_no_group{main=1,out=1,second=0}-4x4x4,4x8,4x8.4x4x4,4x8,4x8-[2>2]rots_no_group{main=1,out=1,second=0}-4x4x4,4x8,4x4.4x4x4,4x8,4x4-[1>1]xforms_no_group{main=1,out=1,second=0}-4x4x4,4x8,4x4.4x4x4,4x8,4x4-[1>1]rots_no_group{main=1,out=1,second=0}-4x4x4,4x4,4x4.4x4x4,4x4,4x4-[2,1>1 -2]stack-4x4x4,4x4x2,.4x4x4,4x4x2,-[1>1]b_dup_mult64-4x4x4,4x4x4,.4x4x4,4x4x4,-[0,1>0 -1]stack{fold_len=2}-4x4x4,,.4x4x4,,-[0>0]broadcast{group=1}-4x4x4x4,,.4x4x4x4,,-[0>0]reshape{fold_len=16}-4x4,,.4x4,,-[0>0]transpose-4x4,,.4x4,,-[0>0]reshape-16,,
load:matrices/b615b89d2b n_ones=147456; n_elems=2359296; in_slots=96; out_slots=16; density=0.0625; time=0.000929462;
file_map:7c2fa544c5 raw=4x4x4,8,-[1>1]broadcast-4x4x4,4x8,.4x4x4,4x8,-[1>2]xforms_no_group{main=1,out=1,second=0}-4x4x4,4x8,4x8.4x4x4,4x8,4x8-[2>2]rots_no_group{main=1,out=1,second=0}-4x4x4,4x8,4x4.4x4x4,4x8,4x4-[1>1]xforms_no_group{main=1,out=1,second=0}-4x4x4,4x8,4x4.4x4x4,4x8,4x4-[1>1]rots_no_group{main=1,out=1,second=0}-4x4x4,4x4,4x4.4x4x4,4x4,4x4-[2,1>1 -2]stack-4x4x4,4x4x2,.4x4x4,4x4x2,-[1>1]b_dup_mult64-4x4x4,4x4x4,.4x4x4,4x4x4,-[0,1>0 -1]stack{fold_len=2}-4x4x4,,.4x4x4,,-[0>0]broadcast{group=1}-4x4x4x4,,.4x4x4x4,,-[0>0]reshape{fold_len=16}-4x4,,.4x4,,-[0>0]transpose-4x4,,.4x4,,-[0>0]reshape-16,,
load:matrices/7c2fa544c5 n_ones=147456; n_elems=1327104; in_slots=72; out_slots=16; density=0.1111111111111111; time=0.000552083;
file_map:5f60bfffc8 raw=4x4x2,8,-[0>0]a_dup_mult64-4x4x4,8,.4x4x4,8,-[1>1]broadcast-4x4x4,4x8,.4x4x4,4x8,-[1>2]xforms_no_group{main=1,out=1,second=0}-4x4x4,4x8,4x8.4x4x4,4x8,4x8-[2>2]rots_no_group{main=1,out=1,second=0}-4x4x4,4x8,4x4.4x4x4,4x8,4x4-[1>1]xforms_no_group{main=1,out=1,second=0}-4x4x4,4x8,4x4.4x4x4,4x8,4x4-[1>1]rots_no_group{main=1,out=1,second=0}-4x4x4,4x4,4x4.4x4x4,4x4,4x4-[2,1>1 -2]stack-4x4x4,4x4x2,.4x4x4,4x4x2,-[1>1]b_dup_mult64-4x4x4,4x4x4,.4x4x4,4x4x4,-[0,1>0 -1]stack{fold_len=2}-4x4x4,,.4x4x4,,-[0>0]broadcast{group=1}-4x4x4x4,,.4x4x4x4,,-[0>0]reshape{fold_len=16}-4x4,,.4x4,,-[0>0]transpose-4x4,,.4x4,,-[0>0]reshape-16,,
load:matrices/5f60bfffc8 n_ones=65536; n_elems=409600; in_slots=40; out_slots=16; density=0.16; time=0.000238716;
file_map:7f0e767501 raw=4x4,8,4x4-[2,0>0 -2]stack-4x4x2,8,.4x4x2,8,-[0>0]a_dup_mult64-4x4x4,8,.4x4x4,8,-[1>1]broadcast-4x4x4,4x8,.4x4x4,4x8,-[1>2]xforms_no_group{main=1,out=1,second=0}-4x4x4,4x8,4x8.4x4x4,4x8,4x8-[2>2]rots_no_group{main=1,out=1,second=0}-4x4x4,4x8,4x4.4x4x4,4x8,4x4-[1>1]xforms_no_group{main=1,out=1,second=0}-4x4x4,4x8,4x4.4x4x4,4x8,4x4-[1>1]rots_no_group{main=1,out=1,second=0}-4x4x4,4x4,4x4.4x4x4,4x4,4x4-[2,1>1 -2]stack-4x4x4,4x4x2,.4x4x4,4x4x2,-[1>1]b_dup_mult64-4x4x4,4x4x4,.4x4x4,4x4x4,-[0,1>0 -1]stack{fold_len=2}-4x4x4,,.4x4x4,,-[0>0]broadcast{group=1}-4x4x4x4,,.4x4x4x4,,-[0>0]reshape{fold_len=16}-4x4,,.4x4,,-[0>0]transpose-4x4,,.4x4,,-[0>0]reshape-16,,
load:matrices/7f0e767501 n_ones=65536; n_elems=409600; in_slots=40; out_slots=16; density=0.16; time=0.000186144;
file_map:f81b0a9761 raw=4x8,8,4x4-[0>0]rots_no_group{main=1,out=1,second=0}-4x4,8,4x4.4x4,8,4x4-[2,0>0 -2]stack-4x4x2,8,.4x4x2,8,-[0>0]a_dup_mult64-4x4x4,8,.4x4x4,8,-[1>1]broadcast-4x4x4,4x8,.4x4x4,4x8,-[1>2]xforms_no_group{main=1,out=1,second=0}-4x4x4,4x8,4x8.4x4x4,4x8,4x8-[2>2]rots_no_group{main=1,out=1,second=0}-4x4x4,4x8,4x4.4x4x4,4x8,4x4-[1>1]xforms_no_group{main=1,out=1,second=0}-4x4x4,4x8,4x4.4x4x4,4x8,4x4-[1>1]rots_no_group{main=1,out=1,second=0}-4x4x4,4x4,4x4.4x4x4,4x4,4x4-[2,1>1 -2]stack-4x4x4,4x4x2,.4x4x4,4x4x2,-[1>1]b_dup_mult64-4x4x4,4x4x4,.4x4x4,4x4x4,-[0,1>0 -1]stack{fold_len=2}-4x4x4,,.4x4x4,,-[0>0]broadcast{group=1}-4x4x4x4,,.4x4x4x4,,-[0>0]reshape{fold_len=16}-4x4,,.4x4,,-[0>0]transpose-4x4,,.4x4,,-[0>0]reshape-16,,
load:matrices/f81b0a9761 n_ones=100352; n_elems=802816; in_slots=56; out_slots=16; density=0.125; time=0.000349847;
file_map:dc3e7fc475 raw=4x8,8,4x4-[0>0]xforms_no_group{main=1,out=1,second=0}-4x8,8,4x4.4x8,8,4x4-[0>0]rots_no_group{main=1,out=1,second=0}-4x4,8,4x4.4x4,8,4x4-[2,0>0 -2]stack-4x4x2,8,.4x4x2,8,-[0>0]a_dup_mult64-4x4x4,8,.4x4x4,8,-[1>1]broadcast-4x4x4,4x8,.4x4x4,4x8,-[1>2]xforms_no_group{main=1,out=1,second=0}-4x4x4,4x8,4x8.4x4x4,4x8,4x8-[2>2]rots_no_group{main=1,out=1,second=0}-4x4x4,4x8,4x4.4x4x4,4x8,4x4-[1>1]xforms_no_group{main=1,out=1,second=0}-4x4x4,4x8,4x4.4x4x4,4x8,4x4-[1>1]rots_no_group{main=1,out=1,second=0}-4x4x4,4x4,4x4.4x4x4,4x4,4x4-[2,1>1 -2]stack-4x4x4,4x4x2,.4x4x4,4x4x2,-[1>1]b_dup_mult64-4x4x4,4x4x4,.4x4x4,4x4x4,-[0,1>0 -1]stack{fold_len=2}-4x4x4,,.4x4x4,,-[0>0]broadcast{group=1}-4x4x4x4,,.4x4x4x4,,-[0>0]reshape{fold_len=16}-4x4,,.4x4,,-[0>0]transpose-4x4,,.4x4,,-[0>0]reshape-16,,
load:matrices/dc3e7fc475 n_ones=102400; n_elems=802816; in_slots=56; out_slots=16; density=0.12755102040816327; time=0.000411457;
file_map:bf5f8f245e raw=4x8,8,4x8-[2>2]rots_no_group{main=1,out=1,second=0}-4x8,8,4x4.4x8,8,4x4-[0>0]xforms_no_group{main=1,out=1,second=0}-4x8,8,4x4.4x8,8,4x4-[0>0]rots_no_group{main=1,out=1,second=0}-4x4,8,4x4.4x4,8,4x4-[2,0>0 -2]stack-4x4x2,8,.4x4x2,8,-[0>0]a_dup_mult64-4x4x4,8,.4x4x4,8,-[1>1]broadcast-4x4x4,4x8,.4x4x4,4x8,-[1>2]xforms_no_group{main=1,out=1,second=0}-4x4x4,4x8,4x8.4x4x4,4x8,4x8-[2>2]rots_no_group{main=1,out=1,second=0}-4x4x4,4x8,4x4.4x4x4,4x8,4x4-[1>1]xforms_no_group{main=1,out=1,second=0}-4x4x4,4x8,4x4.4x4x4,4x8,4x4-[1>1]rots_no_group{main=1,out=1,second=0}-4x4x4,4x4,4x4.4x4x4,4x4,4x4-[2,1>1 -2]stack-4x4x4,4x4x2,.4x4x4,4x4x2,-[1>1]b_dup_mult64-4x4x4,4x4x4,.4x4x4,4x4x4,-[0,1>0 -1]stack{fold_len=2}-4x4x4,,.4x4x4,,-[0>0]broadcast{group=1}-4x4x4x4,,.4x4x4x4,,-[0>0]reshape{fold_len=16}-4x4,,.4x4,,-[0>0]transpose-4x4,,.4x4,,-[0>0]reshape-16,,
load:matrices/bf5f8f245e n_ones=145408; n_elems=1327104; in_slots=72; out_slots=16; density=0.1095679012345679; time=0.000587098;
Copy bound @ output 33: min (1, 0) = None, max (1, 0) = None
Copy bound @ output 32: min (1, 0) = None, max (1, 0) = None
Copy bound @ output 31: min (1, 0) = None, max (1, 0) = None
Copy bound @ output 30: min (1, 0) = None, max (1, 0) = None
Copy bound @ output 29: min (1, 0) = None, max (1, 0) = None
Copy bound @ output 28: min (1, 0) = None, max (1, 0) = None
Copy bound @ output 27: min (1, 0) = None, max (1, 0) = None
Copy bound @ output 26: min (1, 0) = None, max (1, 0) = None
Copy bound @ output 25: min (1, 0) = None, max (1, 0) = None
Copy bound @ output 24: min (1, 0) = None, max (1, 0) = None
Copy bound @ output 23: min (1, 0) = None, max (1, 0) = None
Copy bound @ output 22: min (1, 0) = None, max (1, 0) = None
Copy bound @ output 21: min (1, 0) = None, max (1, 0) = None
Copy bound @ output 20: min (1, 0) = None, max (1, 0) = None
Copy bound @ output 19: min (1, 0) = None, max (1, 0) = None
Copy bound @ output 18: min (1, 0) = None, max (1, 0) = None
Copy bound @ output 17: min (1, 0) = None, max (1, 0) = None
Copy bound @ output 16: min (1, 0) = None, max (1, 0) = None
Copy bound @ output 15: min (1, 0) = None, max (1, 0) = None
Copy bound @ output 14: min (1, 0) = None, max (1, 0) = None
Copy bound @ output 13: min (1, 0) = None, max (1, 0) = None
Copy bound @ output 12: min (1, 0) = Some(0), max (1, 0) = Some(4)
Copy bound @ output 11: min (1, 0) = Some(0), max (1, 0) = Some(8)
Copy bound @ output 10: min (1, 0) = Some(0), max (1, 0) = Some(8)
Copy bound @ output 9: min (1, 0) = Some(0), max (1, 0) = Some(8)
Copy bound @ output 8: min (1, 0) = Some(0), max (1, 0) = Some(8)
Copy bound @ output 7: min (1, 0) = Some(0), max (1, 0) = Some(8)
Copy bound @ output 6: min (1, 0) = Some(0), max (1, 0) = Some(16)
Copy bound @ output 5: min (1, 0) = Some(0), max (1, 0) = Some(64)
Copy bound @ output 4: min (1, 0) = Some(0), max (1, 0) = Some(64)
Copy bound @ output 3: min (1, 0) = Some(0), max (1, 0) = Some(64)
Copy bound @ output 2: min (1, 0) = Some(0), max (1, 0) = Some(64)
Copy bound @ output 1: min (1, 0) = Some(0), max (1, 0) = Some(64)
Copy bound @ output 0: min (1, 0) = Some(0), max (1, 0) = Some(64)
copy_counts:this time=0.001465846;
Begin search
solution:[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); mult = stack(a_for_mult, b_for_mult); c0 = broadcast(mult); c1 = keep_if(false)(c0); c2 = keep_if(true)(c1); c3 = keep_if(false)(c2); c4 = keep_if(false)(c3); c5 = keep_if[d0 >= +d2](c4); c6 = keep_if(false)(c5); c7 = keep_if[d0 < +d2](c6); c8 = keep_if(false)(c7); c9 = keep_if(false)(c8); c10 = keep_if(false)(c9); c11 = keep_if(true)(c10); c12 = keep_if(false)(c11); c13 = keep_if(false)(c12); c14 = keep_if[d0 >= +d2](c13); c15 = keep_if(false)(c14); c16 = keep_if[d0 < +d2](c15); thread_by_accum = id(c16); accum_by_thread = tr(thread_by_accum); out = id(accum_by_thread);
success_path [step 35]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); mult = stack(a_for_mult, b_for_mult); c0 = broadcast(mult); c1 = keep_if(false)(c0); c2 = keep_if(true)(c1); c3 = keep_if(false)(c2); c4 = keep_if(false)(c3); c5 = keep_if[d0 >= +d2](c4); c6 = keep_if(false)(c5); c7 = keep_if[d0 < +d2](c6); c8 = keep_if(false)(c7); c9 = keep_if(false)(c8); c10 = keep_if(false)(c9); c11 = keep_if(true)(c10); c12 = keep_if(false)(c11); c13 = keep_if(false)(c12); c14 = keep_if[d0 >= +d2](c13); c15 = keep_if(false)(c14); c16 = keep_if[d0 < +d2](c15); thread_by_accum = id(c16); accum_by_thread = tr(thread_by_accum); out = id(accum_by_thread);:
0: [∑(∑(0, 8)), ∑(∑(0, 9), ∑(1, 8)), ∑(∑(0, 10), ∑(1, 9), ∑(2, 8)), ∑(∑(0, 11), ∑(1, 10), ∑(2, 9), ∑(3, 8)), ∑(∑(0, 12), ∑(1, 11), ∑(2, 10), ∑(3, 9), ∑(4, 8)), ∑(∑(0, 13), ∑(1, 12), ∑(2, 11), ∑(3, 10), ∑(4, 9), ∑(5, 8)), ∑(∑(0, 14), ∑(1, 13), ∑(2, 12), ∑(3, 11), ∑(4, 10), ∑(5, 9), ∑(6, 8)), ∑(∑(0, 15), ∑(1, 14), ∑(2, 13), ∑(3, 12), ∑(4, 11), ∑(5, 10), ∑(6, 9), ∑(7, 8)), ∑(∑(1, 15), ∑(2, 14), ∑(3, 13), ∑(4, 12), ∑(5, 11), ∑(6, 10), ∑(7, 9)), ∑(∑(2, 15), ∑(3, 14), ∑(4, 13), ∑(5, 12), ∑(6, 11), ∑(7, 10)), ∑(∑(3, 15), ∑(4, 14), ∑(5, 13), ∑(6, 12), ∑(7, 11)), ∑(∑(4, 15), ∑(5, 14), ∑(6, 13), ∑(7, 12)), ∑(∑(5, 15), ∑(6, 14), ∑(7, 13)), ∑(∑(6, 15), ∑(7, 14)), ∑(∑(7, 15)), ∅]
1: ⊥
2: ⊥
success_path [step 34]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); mult = stack(a_for_mult, b_for_mult); c0 = broadcast(mult); c1 = keep_if(false)(c0); c2 = keep_if(true)(c1); c3 = keep_if(false)(c2); c4 = keep_if(false)(c3); c5 = keep_if[d0 >= +d2](c4); c6 = keep_if(false)(c5); c7 = keep_if[d0 < +d2](c6); c8 = keep_if(false)(c7); c9 = keep_if(false)(c8); c10 = keep_if(false)(c9); c11 = keep_if(true)(c10); c12 = keep_if(false)(c11); c13 = keep_if(false)(c12); c14 = keep_if[d0 >= +d2](c13); c15 = keep_if(false)(c14); c16 = keep_if[d0 < +d2](c15); thread_by_accum = id(c16); accum_by_thread = tr(thread_by_accum); out = id(accum_by_thread);:
0: [∑(∑(0, 8)), ∑(∑(0, 9), ∑(1, 8)), ∑(∑(0, 10), ∑(1, 9), ∑(2, 8)), ∑(∑(0, 11), ∑(1, 10), ∑(2, 9), ∑(3, 8)), ∑(∑(0, 12), ∑(1, 11), ∑(2, 10), ∑(3, 9), ∑(4, 8)), ∑(∑(0, 13), ∑(1, 12), ∑(2, 11), ∑(3, 10), ∑(4, 9), ∑(5, 8)), ∑(∑(0, 14), ∑(1, 13), ∑(2, 12), ∑(3, 11), ∑(4, 10), ∑(5, 9), ∑(6, 8)), ∑(∑(0, 15), ∑(1, 14), ∑(2, 13), ∑(3, 12), ∑(4, 11), ∑(5, 10), ∑(6, 9), ∑(7, 8)), ∑(∑(1, 15), ∑(2, 14), ∑(3, 13), ∑(4, 12), ∑(5, 11), ∑(6, 10), ∑(7, 9)), ∑(∑(2, 15), ∑(3, 14), ∑(4, 13), ∑(5, 12), ∑(6, 11), ∑(7, 10)), ∑(∑(3, 15), ∑(4, 14), ∑(5, 13), ∑(6, 12), ∑(7, 11)), ∑(∑(4, 15), ∑(5, 14), ∑(6, 13), ∑(7, 12)), ∑(∑(5, 15), ∑(6, 14), ∑(7, 13)), ∑(∑(6, 15), ∑(7, 14)), ∑(∑(7, 15)), ∅]
1: ⊥
2: ⊥
success_path [step 33]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); mult = stack(a_for_mult, b_for_mult); c0 = broadcast(mult); c1 = keep_if(false)(c0); c2 = keep_if(true)(c1); c3 = keep_if(false)(c2); c4 = keep_if(false)(c3); c5 = keep_if[d0 >= +d2](c4); c6 = keep_if(false)(c5); c7 = keep_if[d0 < +d2](c6); c8 = keep_if(false)(c7); c9 = keep_if(false)(c8); c10 = keep_if(false)(c9); c11 = keep_if(true)(c10); c12 = keep_if(false)(c11); c13 = keep_if(false)(c12); c14 = keep_if[d0 >= +d2](c13); c15 = keep_if(false)(c14); c16 = keep_if[d0 < +d2](c15); thread_by_accum = id(c16); accum_by_thread = tr(thread_by_accum);:
0: [[∑(∑(0, 8)), ∑(∑(0, 9), ∑(1, 8)), ∑(∑(0, 10), ∑(1, 9), ∑(2, 8)), ∑(∑(0, 11), ∑(1, 10), ∑(2, 9), ∑(3, 8))],
 [∑(∑(0, 12), ∑(1, 11), ∑(2, 10), ∑(3, 9), ∑(4, 8)), ∑(∑(0, 13), ∑(1, 12), ∑(2, 11), ∑(3, 10), ∑(4, 9), ∑(5, 8)), ∑(∑(0, 14), ∑(1, 13), ∑(2, 12), ∑(3, 11), ∑(4, 10), ∑(5, 9), ∑(6, 8)), ∑(∑(0, 15), ∑(1, 14), ∑(2, 13), ∑(3, 12), ∑(4, 11), ∑(5, 10), ∑(6, 9), ∑(7, 8))],
 [∑(∑(1, 15), ∑(2, 14), ∑(3, 13), ∑(4, 12), ∑(5, 11), ∑(6, 10), ∑(7, 9)), ∑(∑(2, 15), ∑(3, 14), ∑(4, 13), ∑(5, 12), ∑(6, 11), ∑(7, 10)), ∑(∑(3, 15), ∑(4, 14), ∑(5, 13), ∑(6, 12), ∑(7, 11)), ∑(∑(4, 15), ∑(5, 14), ∑(6, 13), ∑(7, 12))],
 [∑(∑(5, 15), ∑(6, 14), ∑(7, 13)), ∑(∑(6, 15), ∑(7, 14)), ∑(∑(7, 15)), ∅]]
1: ⊥
2: ⊥
success_path [step 32]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); mult = stack(a_for_mult, b_for_mult); c0 = broadcast(mult); c1 = keep_if(false)(c0); c2 = keep_if(true)(c1); c3 = keep_if(false)(c2); c4 = keep_if(false)(c3); c5 = keep_if[d0 >= +d2](c4); c6 = keep_if(false)(c5); c7 = keep_if[d0 < +d2](c6); c8 = keep_if(false)(c7); c9 = keep_if(false)(c8); c10 = keep_if(false)(c9); c11 = keep_if(true)(c10); c12 = keep_if(false)(c11); c13 = keep_if(false)(c12); c14 = keep_if[d0 >= +d2](c13); c15 = keep_if(false)(c14); c16 = keep_if[d0 < +d2](c15); thread_by_accum = id(c16);:
0: [[∑(∑(0, 8)), ∑(∑(0, 12), ∑(1, 11), ∑(2, 10), ∑(3, 9), ∑(4, 8)), ∑(∑(1, 15), ∑(2, 14), ∑(3, 13), ∑(4, 12), ∑(5, 11), ∑(6, 10), ∑(7, 9)), ∑(∑(5, 15), ∑(6, 14), ∑(7, 13))],
 [∑(∑(0, 9), ∑(1, 8)), ∑(∑(0, 13), ∑(1, 12), ∑(2, 11), ∑(3, 10), ∑(4, 9), ∑(5, 8)), ∑(∑(2, 15), ∑(3, 14), ∑(4, 13), ∑(5, 12), ∑(6, 11), ∑(7, 10)), ∑(∑(6, 15), ∑(7, 14))],
 [∑(∑(0, 10), ∑(1, 9), ∑(2, 8)), ∑(∑(0, 14), ∑(1, 13), ∑(2, 12), ∑(3, 11), ∑(4, 10), ∑(5, 9), ∑(6, 8)), ∑(∑(3, 15), ∑(4, 14), ∑(5, 13), ∑(6, 12), ∑(7, 11)), ∑(∑(7, 15))],
 [∑(∑(0, 11), ∑(1, 10), ∑(2, 9), ∑(3, 8)), ∑(∑(0, 15), ∑(1, 14), ∑(2, 13), ∑(3, 12), ∑(4, 11), ∑(5, 10), ∑(6, 9), ∑(7, 8)), ∑(∑(4, 15), ∑(5, 14), ∑(6, 13), ∑(7, 12)), ∅]]
1: ⊥
2: ⊥
success_path [step 31]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); mult = stack(a_for_mult, b_for_mult); c0 = broadcast(mult); c1 = keep_if(false)(c0); c2 = keep_if(true)(c1); c3 = keep_if(false)(c2); c4 = keep_if(false)(c3); c5 = keep_if[d0 >= +d2](c4); c6 = keep_if(false)(c5); c7 = keep_if[d0 < +d2](c6); c8 = keep_if(false)(c7); c9 = keep_if(false)(c8); c10 = keep_if(false)(c9); c11 = keep_if(true)(c10); c12 = keep_if(false)(c11); c13 = keep_if(false)(c12); c14 = keep_if[d0 >= +d2](c13); c15 = keep_if(false)(c14); c16 = keep_if[d0 < +d2](c15);:
0: [[[[∅, ∑(0, 8), ∅, ∅],
   [∅, ∅, ∅, ∅],
   [∅, ∅, ∅, ∅],
   [∅, ∅, ∅, ∅]],

  [[∑(4, 8), ∅, ∅, ∑(0, 12)],
   [∑(3, 9), ∅, ∅, ∅],
   [∑(2, 10), ∅, ∅, ∅],
   [∑(1, 11), ∅, ∅, ∅]],

  [[∅, ∅, ∑(4, 12), ∅],
   [∅, ∑(7, 9), ∑(3, 13), ∅],
   [∅, ∑(6, 10), ∑(2, 14), ∅],
   [∅, ∑(5, 11), ∑(1, 15), ∅]],

  [[∅, ∅, ∅, ∅],
   [∅, ∅, ∅, ∑(7, 13)],
   [∅, ∅, ∅, ∑(6, 14)],
   [∅, ∅, ∅, ∑(5, 15)]]],


 [[[∅, ∑(1, 8), ∅, ∅],
   [∅, ∑(0, 9), ∅, ∅],
   [∅, ∅, ∅, ∅],
   [∅, ∅, ∅, ∅]],

  [[∑(5, 8), ∅, ∅, ∑(1, 12)],
   [∑(4, 9), ∅, ∅, ∑(0, 13)],
   [∑(3, 10), ∅, ∅, ∅],
   [∑(2, 11), ∅, ∅, ∅]],

  [[∅, ∅, ∑(5, 12), ∅],
   [∅, ∅, ∑(4, 13), ∅],
   [∅, ∑(7, 10), ∑(3, 14), ∅],
   [∅, ∑(6, 11), ∑(2, 15), ∅]],

  [[∅, ∅, ∅, ∅],
   [∅, ∅, ∅, ∅],
   [∅, ∅, ∅, ∑(7, 14)],
   [∅, ∅, ∅, ∑(6, 15)]]],


 [[[∅, ∑(2, 8), ∅, ∅],
   [∅, ∑(1, 9), ∅, ∅],
   [∅, ∑(0, 10), ∅, ∅],
   [∅, ∅, ∅, ∅]],

  [[∑(6, 8), ∅, ∅, ∑(2, 12)],
   [∑(5, 9), ∅, ∅, ∑(1, 13)],
   [∑(4, 10), ∅, ∅, ∑(0, 14)],
   [∑(3, 11), ∅, ∅, ∅]],

  [[∅, ∅, ∑(6, 12), ∅],
   [∅, ∅, ∑(5, 13), ∅],
   [∅, ∅, ∑(4, 14), ∅],
   [∅, ∑(7, 11), ∑(3, 15), ∅]],

  [[∅, ∅, ∅, ∅],
   [∅, ∅, ∅, ∅],
   [∅, ∅, ∅, ∅],
   [∅, ∅, ∅, ∑(7, 15)]]],


 [[[∅, ∑(3, 8), ∅, ∅],
   [∅, ∑(2, 9), ∅, ∅],
   [∅, ∑(1, 10), ∅, ∅],
   [∅, ∑(0, 11), ∅, ∅]],

  [[∑(7, 8), ∅, ∅, ∑(3, 12)],
   [∑(6, 9), ∅, ∅, ∑(2, 13)],
   [∑(5, 10), ∅, ∅, ∑(1, 14)],
   [∑(4, 11), ∅, ∅, ∑(0, 15)]],

  [[∅, ∅, ∑(7, 12), ∅],
   [∅, ∅, ∑(6, 13), ∅],
   [∅, ∅, ∑(5, 14), ∅],
   [∅, ∅, ∑(4, 15), ∅]],

  [[∅, ∅, ∅, ∅],
   [∅, ∅, ∅, ∅],
   [∅, ∅, ∅, ∅],
   [∅, ∅, ∅, ∅]]]]
1: ⊥
2: ⊥
success_path [step 30]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); mult = stack(a_for_mult, b_for_mult); c0 = broadcast(mult); c1 = keep_if(false)(c0); c2 = keep_if(true)(c1); c3 = keep_if(false)(c2); c4 = keep_if(false)(c3); c5 = keep_if[d0 >= +d2](c4); c6 = keep_if(false)(c5); c7 = keep_if[d0 < +d2](c6); c8 = keep_if(false)(c7); c9 = keep_if(false)(c8); c10 = keep_if(false)(c9); c11 = keep_if(true)(c10); c12 = keep_if(false)(c11); c13 = keep_if(false)(c12); c14 = keep_if[d0 >= +d2](c13); c15 = keep_if(false)(c14);:
0: [[[[∅, ∑(0, 8), ∅, ∅],
   [∅, ∅, ∅, ∅],
   [∅, ∅, ∅, ∅],
   [∅, ∅, ∅, ∅]],

  [[∑(4, 8), ∅, ∅, ∑(0, 12)],
   [∑(3, 9), ∅, ∅, ∅],
   [∑(2, 10), ∅, ∅, ∅],
   [∑(1, 11), ∅, ∅, ∅]],

  [[∅, ∅, ∑(4, 12), ∅],
   [∅, ∑(7, 9), ∑(3, 13), ∅],
   [∅, ∑(6, 10), ∑(2, 14), ∅],
   [∅, ∑(5, 11), ∑(1, 15), ∅]],

  [[∅, ∅, ∅, ∑(0, 12)],
   [∅, ∅, ∅, ∑(7, 13)],
   [∅, ∅, ∅, ∑(6, 14)],
   [∅, ∅, ∅, ∑(5, 15)]]],


 [[[∅, ∑(1, 8), ∅, ∅],
   [∅, ∑(0, 9), ∅, ∅],
   [∅, ∅, ∅, ∅],
   [∅, ∅, ∅, ∅]],

  [[∑(5, 8), ∅, ∅, ∑(1, 12)],
   [∑(4, 9), ∅, ∅, ∑(0, 13)],
   [∑(3, 10), ∅, ∅, ∅],
   [∑(2, 11), ∅, ∅, ∅]],

  [[∅, ∅, ∑(5, 12), ∅],
   [∅, ∅, ∑(4, 13), ∅],
   [∅, ∑(7, 10), ∑(3, 14), ∅],
   [∅, ∑(6, 11), ∑(2, 15), ∅]],

  [[∅, ∅, ∅, ∑(1, 12)],
   [∅, ∅, ∅, ∑(0, 13)],
   [∅, ∅, ∅, ∑(7, 14)],
   [∅, ∅, ∅, ∑(6, 15)]]],


 [[[∅, ∑(2, 8), ∅, ∅],
   [∅, ∑(1, 9), ∅, ∅],
   [∅, ∑(0, 10), ∅, ∅],
   [∅, ∅, ∅, ∅]],

  [[∑(6, 8), ∅, ∅, ∑(2, 12)],
   [∑(5, 9), ∅, ∅, ∑(1, 13)],
   [∑(4, 10), ∅, ∅, ∑(0, 14)],
   [∑(3, 11), ∅, ∅, ∅]],

  [[∅, ∅, ∑(6, 12), ∅],
   [∅, ∅, ∑(5, 13), ∅],
   [∅, ∅, ∑(4, 14), ∅],
   [∅, ∑(7, 11), ∑(3, 15), ∅]],

  [[∅, ∅, ∅, ∑(2, 12)],
   [∅, ∅, ∅, ∑(1, 13)],
   [∅, ∅, ∅, ∑(0, 14)],
   [∅, ∅, ∅, ∑(7, 15)]]],


 [[[∅, ∑(3, 8), ∅, ∅],
   [∅, ∑(2, 9), ∅, ∅],
   [∅, ∑(1, 10), ∅, ∅],
   [∅, ∑(0, 11), ∅, ∅]],

  [[∑(7, 8), ∅, ∅, ∑(3, 12)],
   [∑(6, 9), ∅, ∅, ∑(2, 13)],
   [∑(5, 10), ∅, ∅, ∑(1, 14)],
   [∑(4, 11), ∅, ∅, ∑(0, 15)]],

  [[∅, ∅, ∑(7, 12), ∅],
   [∅, ∅, ∑(6, 13), ∅],
   [∅, ∅, ∑(5, 14), ∅],
   [∅, ∅, ∑(4, 15), ∅]],

  [[∅, ∅, ∅, ∑(3, 12)],
   [∅, ∅, ∅, ∑(2, 13)],
   [∅, ∅, ∅, ∑(1, 14)],
   [∅, ∅, ∅, ∑(0, 15)]]]]
1: ⊥
2: ⊥
success_path [step 29]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); mult = stack(a_for_mult, b_for_mult); c0 = broadcast(mult); c1 = keep_if(false)(c0); c2 = keep_if(true)(c1); c3 = keep_if(false)(c2); c4 = keep_if(false)(c3); c5 = keep_if[d0 >= +d2](c4); c6 = keep_if(false)(c5); c7 = keep_if[d0 < +d2](c6); c8 = keep_if(false)(c7); c9 = keep_if(false)(c8); c10 = keep_if(false)(c9); c11 = keep_if(true)(c10); c12 = keep_if(false)(c11); c13 = keep_if(false)(c12); c14 = keep_if[d0 >= +d2](c13);:
0: [[[[∅, ∑(0, 8), ∅, ∅],
   [∅, ∅, ∅, ∅],
   [∅, ∅, ∅, ∅],
   [∅, ∅, ∅, ∅]],

  [[∑(4, 8), ∅, ∅, ∑(0, 12)],
   [∑(3, 9), ∅, ∅, ∅],
   [∑(2, 10), ∅, ∅, ∅],
   [∑(1, 11), ∅, ∅, ∅]],

  [[∅, ∅, ∑(4, 12), ∑(0, 12)],
   [∅, ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∅, ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∅, ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

  [[∅, ∅, ∅, ∑(0, 12)],
   [∅, ∅, ∅, ∑(7, 13)],
   [∅, ∅, ∅, ∑(6, 14)],
   [∅, ∅, ∅, ∑(5, 15)]]],


 [[[∅, ∑(1, 8), ∅, ∅],
   [∅, ∑(0, 9), ∅, ∅],
   [∅, ∅, ∅, ∅],
   [∅, ∅, ∅, ∅]],

  [[∑(5, 8), ∅, ∅, ∑(1, 12)],
   [∑(4, 9), ∅, ∅, ∑(0, 13)],
   [∑(3, 10), ∅, ∅, ∅],
   [∑(2, 11), ∅, ∅, ∅]],

  [[∅, ∅, ∑(5, 12), ∑(1, 12)],
   [∅, ∅, ∑(4, 13), ∑(0, 13)],
   [∅, ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∅, ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

  [[∅, ∅, ∅, ∑(1, 12)],
   [∅, ∅, ∅, ∑(0, 13)],
   [∅, ∅, ∅, ∑(7, 14)],
   [∅, ∅, ∅, ∑(6, 15)]]],


 [[[∅, ∑(2, 8), ∅, ∅],
   [∅, ∑(1, 9), ∅, ∅],
   [∅, ∑(0, 10), ∅, ∅],
   [∅, ∅, ∅, ∅]],

  [[∑(6, 8), ∅, ∅, ∑(2, 12)],
   [∑(5, 9), ∅, ∅, ∑(1, 13)],
   [∑(4, 10), ∅, ∅, ∑(0, 14)],
   [∑(3, 11), ∅, ∅, ∅]],

  [[∅, ∅, ∑(6, 12), ∑(2, 12)],
   [∅, ∅, ∑(5, 13), ∑(1, 13)],
   [∅, ∅, ∑(4, 14), ∑(0, 14)],
   [∅, ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

  [[∅, ∅, ∅, ∑(2, 12)],
   [∅, ∅, ∅, ∑(1, 13)],
   [∅, ∅, ∅, ∑(0, 14)],
   [∅, ∅, ∅, ∑(7, 15)]]],


 [[[∅, ∑(3, 8), ∅, ∅],
   [∅, ∑(2, 9), ∅, ∅],
   [∅, ∑(1, 10), ∅, ∅],
   [∅, ∑(0, 11), ∅, ∅]],

  [[∑(7, 8), ∅, ∅, ∑(3, 12)],
   [∑(6, 9), ∅, ∅, ∑(2, 13)],
   [∑(5, 10), ∅, ∅, ∑(1, 14)],
   [∑(4, 11), ∅, ∅, ∑(0, 15)]],

  [[∅, ∅, ∑(7, 12), ∑(3, 12)],
   [∅, ∅, ∑(6, 13), ∑(2, 13)],
   [∅, ∅, ∑(5, 14), ∑(1, 14)],
   [∅, ∅, ∑(4, 15), ∑(0, 15)]],

  [[∅, ∅, ∅, ∑(3, 12)],
   [∅, ∅, ∅, ∑(2, 13)],
   [∅, ∅, ∅, ∑(1, 14)],
   [∅, ∅, ∅, ∑(0, 15)]]]]
1: ⊥
2: ⊥
success_path [step 28]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); mult = stack(a_for_mult, b_for_mult); c0 = broadcast(mult); c1 = keep_if(false)(c0); c2 = keep_if(true)(c1); c3 = keep_if(false)(c2); c4 = keep_if(false)(c3); c5 = keep_if[d0 >= +d2](c4); c6 = keep_if(false)(c5); c7 = keep_if[d0 < +d2](c6); c8 = keep_if(false)(c7); c9 = keep_if(false)(c8); c10 = keep_if(false)(c9); c11 = keep_if(true)(c10); c12 = keep_if(false)(c11); c13 = keep_if(false)(c12);:
0: [[[[∅, ∑(0, 8), ∅, ∅],
   [∅, ∅, ∅, ∅],
   [∅, ∅, ∅, ∅],
   [∅, ∅, ∅, ∅]],

  [[∑(4, 8), ∅, ∅, ∑(0, 12)],
   [∑(3, 9), ∅, ∅, ∑(7, 13)],
   [∑(2, 10), ∅, ∅, ∑(6, 14)],
   [∑(1, 11), ∅, ∅, ∑(5, 15)]],

  [[∅, ∅, ∑(4, 12), ∑(0, 12)],
   [∅, ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∅, ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∅, ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

  [[∅, ∅, ∅, ∑(0, 12)],
   [∅, ∅, ∅, ∑(7, 13)],
   [∅, ∅, ∅, ∑(6, 14)],
   [∅, ∅, ∅, ∑(5, 15)]]],


 [[[∅, ∑(1, 8), ∅, ∅],
   [∅, ∑(0, 9), ∅, ∅],
   [∅, ∅, ∅, ∅],
   [∅, ∅, ∅, ∅]],

  [[∑(5, 8), ∅, ∅, ∑(1, 12)],
   [∑(4, 9), ∅, ∅, ∑(0, 13)],
   [∑(3, 10), ∅, ∅, ∑(7, 14)],
   [∑(2, 11), ∅, ∅, ∑(6, 15)]],

  [[∅, ∅, ∑(5, 12), ∑(1, 12)],
   [∅, ∅, ∑(4, 13), ∑(0, 13)],
   [∅, ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∅, ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

  [[∅, ∅, ∅, ∑(1, 12)],
   [∅, ∅, ∅, ∑(0, 13)],
   [∅, ∅, ∅, ∑(7, 14)],
   [∅, ∅, ∅, ∑(6, 15)]]],


 [[[∅, ∑(2, 8), ∅, ∅],
   [∅, ∑(1, 9), ∅, ∅],
   [∅, ∑(0, 10), ∅, ∅],
   [∅, ∅, ∅, ∅]],

  [[∑(6, 8), ∅, ∅, ∑(2, 12)],
   [∑(5, 9), ∅, ∅, ∑(1, 13)],
   [∑(4, 10), ∅, ∅, ∑(0, 14)],
   [∑(3, 11), ∅, ∅, ∑(7, 15)]],

  [[∅, ∅, ∑(6, 12), ∑(2, 12)],
   [∅, ∅, ∑(5, 13), ∑(1, 13)],
   [∅, ∅, ∑(4, 14), ∑(0, 14)],
   [∅, ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

  [[∅, ∅, ∅, ∑(2, 12)],
   [∅, ∅, ∅, ∑(1, 13)],
   [∅, ∅, ∅, ∑(0, 14)],
   [∅, ∅, ∅, ∑(7, 15)]]],


 [[[∅, ∑(3, 8), ∅, ∅],
   [∅, ∑(2, 9), ∅, ∅],
   [∅, ∑(1, 10), ∅, ∅],
   [∅, ∑(0, 11), ∅, ∅]],

  [[∑(7, 8), ∅, ∅, ∑(3, 12)],
   [∑(6, 9), ∅, ∅, ∑(2, 13)],
   [∑(5, 10), ∅, ∅, ∑(1, 14)],
   [∑(4, 11), ∅, ∅, ∑(0, 15)]],

  [[∅, ∅, ∑(7, 12), ∑(3, 12)],
   [∅, ∅, ∑(6, 13), ∑(2, 13)],
   [∅, ∅, ∑(5, 14), ∑(1, 14)],
   [∅, ∅, ∑(4, 15), ∑(0, 15)]],

  [[∅, ∅, ∅, ∑(3, 12)],
   [∅, ∅, ∅, ∑(2, 13)],
   [∅, ∅, ∅, ∑(1, 14)],
   [∅, ∅, ∅, ∑(0, 15)]]]]
1: ⊥
2: ⊥
success_path [step 27]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); mult = stack(a_for_mult, b_for_mult); c0 = broadcast(mult); c1 = keep_if(false)(c0); c2 = keep_if(true)(c1); c3 = keep_if(false)(c2); c4 = keep_if(false)(c3); c5 = keep_if[d0 >= +d2](c4); c6 = keep_if(false)(c5); c7 = keep_if[d0 < +d2](c6); c8 = keep_if(false)(c7); c9 = keep_if(false)(c8); c10 = keep_if(false)(c9); c11 = keep_if(true)(c10); c12 = keep_if(false)(c11);:
0: [[[[∅, ∑(0, 8), ∅, ∑(0, 12)],
   [∅, ∅, ∅, ∑(7, 13)],
   [∅, ∅, ∅, ∑(6, 14)],
   [∅, ∅, ∅, ∑(5, 15)]],

  [[∑(4, 8), ∅, ∅, ∑(0, 12)],
   [∑(3, 9), ∅, ∅, ∑(7, 13)],
   [∑(2, 10), ∅, ∅, ∑(6, 14)],
   [∑(1, 11), ∅, ∅, ∑(5, 15)]],

  [[∅, ∅, ∑(4, 12), ∑(0, 12)],
   [∅, ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∅, ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∅, ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

  [[∅, ∅, ∅, ∑(0, 12)],
   [∅, ∅, ∅, ∑(7, 13)],
   [∅, ∅, ∅, ∑(6, 14)],
   [∅, ∅, ∅, ∑(5, 15)]]],


 [[[∅, ∑(1, 8), ∅, ∑(1, 12)],
   [∅, ∑(0, 9), ∅, ∑(0, 13)],
   [∅, ∅, ∅, ∑(7, 14)],
   [∅, ∅, ∅, ∑(6, 15)]],

  [[∑(5, 8), ∅, ∅, ∑(1, 12)],
   [∑(4, 9), ∅, ∅, ∑(0, 13)],
   [∑(3, 10), ∅, ∅, ∑(7, 14)],
   [∑(2, 11), ∅, ∅, ∑(6, 15)]],

  [[∅, ∅, ∑(5, 12), ∑(1, 12)],
   [∅, ∅, ∑(4, 13), ∑(0, 13)],
   [∅, ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∅, ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

  [[∅, ∅, ∅, ∑(1, 12)],
   [∅, ∅, ∅, ∑(0, 13)],
   [∅, ∅, ∅, ∑(7, 14)],
   [∅, ∅, ∅, ∑(6, 15)]]],


 [[[∅, ∑(2, 8), ∅, ∑(2, 12)],
   [∅, ∑(1, 9), ∅, ∑(1, 13)],
   [∅, ∑(0, 10), ∅, ∑(0, 14)],
   [∅, ∅, ∅, ∑(7, 15)]],

  [[∑(6, 8), ∅, ∅, ∑(2, 12)],
   [∑(5, 9), ∅, ∅, ∑(1, 13)],
   [∑(4, 10), ∅, ∅, ∑(0, 14)],
   [∑(3, 11), ∅, ∅, ∑(7, 15)]],

  [[∅, ∅, ∑(6, 12), ∑(2, 12)],
   [∅, ∅, ∑(5, 13), ∑(1, 13)],
   [∅, ∅, ∑(4, 14), ∑(0, 14)],
   [∅, ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

  [[∅, ∅, ∅, ∑(2, 12)],
   [∅, ∅, ∅, ∑(1, 13)],
   [∅, ∅, ∅, ∑(0, 14)],
   [∅, ∅, ∅, ∑(7, 15)]]],


 [[[∅, ∑(3, 8), ∅, ∑(3, 12)],
   [∅, ∑(2, 9), ∅, ∑(2, 13)],
   [∅, ∑(1, 10), ∅, ∑(1, 14)],
   [∅, ∑(0, 11), ∅, ∑(0, 15)]],

  [[∑(7, 8), ∅, ∅, ∑(3, 12)],
   [∑(6, 9), ∅, ∅, ∑(2, 13)],
   [∑(5, 10), ∅, ∅, ∑(1, 14)],
   [∑(4, 11), ∅, ∅, ∑(0, 15)]],

  [[∅, ∅, ∑(7, 12), ∑(3, 12)],
   [∅, ∅, ∑(6, 13), ∑(2, 13)],
   [∅, ∅, ∑(5, 14), ∑(1, 14)],
   [∅, ∅, ∑(4, 15), ∑(0, 15)]],

  [[∅, ∅, ∅, ∑(3, 12)],
   [∅, ∅, ∅, ∑(2, 13)],
   [∅, ∅, ∅, ∑(1, 14)],
   [∅, ∅, ∅, ∑(0, 15)]]]]
1: ⊥
2: ⊥
success_path [step 26]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); mult = stack(a_for_mult, b_for_mult); c0 = broadcast(mult); c1 = keep_if(false)(c0); c2 = keep_if(true)(c1); c3 = keep_if(false)(c2); c4 = keep_if(false)(c3); c5 = keep_if[d0 >= +d2](c4); c6 = keep_if(false)(c5); c7 = keep_if[d0 < +d2](c6); c8 = keep_if(false)(c7); c9 = keep_if(false)(c8); c10 = keep_if(false)(c9); c11 = keep_if(true)(c10);:
0: [[[[∅, ∑(0, 8), ∅, ∑(0, 12)],
   [∅, ∅, ∅, ∑(7, 13)],
   [∅, ∅, ∅, ∑(6, 14)],
   [∅, ∅, ∅, ∑(5, 15)]],

  [[∑(4, 8), ∅, ∅, ∑(0, 12)],
   [∑(3, 9), ∅, ∅, ∑(7, 13)],
   [∑(2, 10), ∅, ∅, ∑(6, 14)],
   [∑(1, 11), ∅, ∅, ∑(5, 15)]],

  [[∅, ∅, ∑(4, 12), ∑(0, 12)],
   [∅, ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∅, ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∅, ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

  [[∅, ∅, ∑(4, 12), ∑(0, 12)],
   [∅, ∅, ∑(3, 13), ∑(7, 13)],
   [∅, ∅, ∑(2, 14), ∑(6, 14)],
   [∅, ∅, ∑(1, 15), ∑(5, 15)]]],


 [[[∅, ∑(1, 8), ∅, ∑(1, 12)],
   [∅, ∑(0, 9), ∅, ∑(0, 13)],
   [∅, ∅, ∅, ∑(7, 14)],
   [∅, ∅, ∅, ∑(6, 15)]],

  [[∑(5, 8), ∅, ∅, ∑(1, 12)],
   [∑(4, 9), ∅, ∅, ∑(0, 13)],
   [∑(3, 10), ∅, ∅, ∑(7, 14)],
   [∑(2, 11), ∅, ∅, ∑(6, 15)]],

  [[∅, ∅, ∑(5, 12), ∑(1, 12)],
   [∅, ∅, ∑(4, 13), ∑(0, 13)],
   [∅, ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∅, ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

  [[∅, ∅, ∑(5, 12), ∑(1, 12)],
   [∅, ∅, ∑(4, 13), ∑(0, 13)],
   [∅, ∅, ∑(3, 14), ∑(7, 14)],
   [∅, ∅, ∑(2, 15), ∑(6, 15)]]],


 [[[∅, ∑(2, 8), ∅, ∑(2, 12)],
   [∅, ∑(1, 9), ∅, ∑(1, 13)],
   [∅, ∑(0, 10), ∅, ∑(0, 14)],
   [∅, ∅, ∅, ∑(7, 15)]],

  [[∑(6, 8), ∅, ∅, ∑(2, 12)],
   [∑(5, 9), ∅, ∅, ∑(1, 13)],
   [∑(4, 10), ∅, ∅, ∑(0, 14)],
   [∑(3, 11), ∅, ∅, ∑(7, 15)]],

  [[∅, ∅, ∑(6, 12), ∑(2, 12)],
   [∅, ∅, ∑(5, 13), ∑(1, 13)],
   [∅, ∅, ∑(4, 14), ∑(0, 14)],
   [∅, ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

  [[∅, ∅, ∑(6, 12), ∑(2, 12)],
   [∅, ∅, ∑(5, 13), ∑(1, 13)],
   [∅, ∅, ∑(4, 14), ∑(0, 14)],
   [∅, ∅, ∑(3, 15), ∑(7, 15)]]],


 [[[∅, ∑(3, 8), ∅, ∑(3, 12)],
   [∅, ∑(2, 9), ∅, ∑(2, 13)],
   [∅, ∑(1, 10), ∅, ∑(1, 14)],
   [∅, ∑(0, 11), ∅, ∑(0, 15)]],

  [[∑(7, 8), ∅, ∅, ∑(3, 12)],
   [∑(6, 9), ∅, ∅, ∑(2, 13)],
   [∑(5, 10), ∅, ∅, ∑(1, 14)],
   [∑(4, 11), ∅, ∅, ∑(0, 15)]],

  [[∅, ∅, ∑(7, 12), ∑(3, 12)],
   [∅, ∅, ∑(6, 13), ∑(2, 13)],
   [∅, ∅, ∑(5, 14), ∑(1, 14)],
   [∅, ∅, ∑(4, 15), ∑(0, 15)]],

  [[∅, ∅, ∑(7, 12), ∑(3, 12)],
   [∅, ∅, ∑(6, 13), ∑(2, 13)],
   [∅, ∅, ∑(5, 14), ∑(1, 14)],
   [∅, ∅, ∑(4, 15), ∑(0, 15)]]]]
1: ⊥
2: ⊥
success_path [step 25]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); mult = stack(a_for_mult, b_for_mult); c0 = broadcast(mult); c1 = keep_if(false)(c0); c2 = keep_if(true)(c1); c3 = keep_if(false)(c2); c4 = keep_if(false)(c3); c5 = keep_if[d0 >= +d2](c4); c6 = keep_if(false)(c5); c7 = keep_if[d0 < +d2](c6); c8 = keep_if(false)(c7); c9 = keep_if(false)(c8); c10 = keep_if(false)(c9);:
0: [[[[∅, ∑(0, 8), ∅, ∑(0, 12)],
   [∅, ∅, ∅, ∑(7, 13)],
   [∅, ∅, ∅, ∑(6, 14)],
   [∅, ∅, ∅, ∑(5, 15)]],

  [[∑(4, 8), ∅, ∅, ∑(0, 12)],
   [∑(3, 9), ∅, ∅, ∑(7, 13)],
   [∑(2, 10), ∅, ∅, ∑(6, 14)],
   [∑(1, 11), ∅, ∅, ∑(5, 15)]],

  [[∅, ∅, ∑(4, 12), ∑(0, 12)],
   [∅, ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∅, ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∅, ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

  [[∅, ∅, ∑(4, 12), ∑(0, 12)],
   [∅, ∅, ∑(3, 13), ∑(7, 13)],
   [∅, ∅, ∑(2, 14), ∑(6, 14)],
   [∅, ∅, ∑(1, 15), ∑(5, 15)]]],


 [[[∅, ∑(1, 8), ∅, ∑(1, 12)],
   [∅, ∑(0, 9), ∅, ∑(0, 13)],
   [∅, ∅, ∅, ∑(7, 14)],
   [∅, ∅, ∅, ∑(6, 15)]],

  [[∑(5, 8), ∅, ∅, ∑(1, 12)],
   [∑(4, 9), ∅, ∅, ∑(0, 13)],
   [∑(3, 10), ∅, ∅, ∑(7, 14)],
   [∑(2, 11), ∅, ∅, ∑(6, 15)]],

  [[∅, ∅, ∑(5, 12), ∑(1, 12)],
   [∅, ∅, ∑(4, 13), ∑(0, 13)],
   [∅, ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∅, ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

  [[∅, ∅, ∑(5, 12), ∑(1, 12)],
   [∅, ∅, ∑(4, 13), ∑(0, 13)],
   [∅, ∅, ∑(3, 14), ∑(7, 14)],
   [∅, ∅, ∑(2, 15), ∑(6, 15)]]],


 [[[∅, ∑(2, 8), ∅, ∑(2, 12)],
   [∅, ∑(1, 9), ∅, ∑(1, 13)],
   [∅, ∑(0, 10), ∅, ∑(0, 14)],
   [∅, ∅, ∅, ∑(7, 15)]],

  [[∑(6, 8), ∅, ∅, ∑(2, 12)],
   [∑(5, 9), ∅, ∅, ∑(1, 13)],
   [∑(4, 10), ∅, ∅, ∑(0, 14)],
   [∑(3, 11), ∅, ∅, ∑(7, 15)]],

  [[∅, ∅, ∑(6, 12), ∑(2, 12)],
   [∅, ∅, ∑(5, 13), ∑(1, 13)],
   [∅, ∅, ∑(4, 14), ∑(0, 14)],
   [∅, ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

  [[∅, ∅, ∑(6, 12), ∑(2, 12)],
   [∅, ∅, ∑(5, 13), ∑(1, 13)],
   [∅, ∅, ∑(4, 14), ∑(0, 14)],
   [∅, ∅, ∑(3, 15), ∑(7, 15)]]],


 [[[∅, ∑(3, 8), ∅, ∑(3, 12)],
   [∅, ∑(2, 9), ∅, ∑(2, 13)],
   [∅, ∑(1, 10), ∅, ∑(1, 14)],
   [∅, ∑(0, 11), ∅, ∑(0, 15)]],

  [[∑(7, 8), ∅, ∅, ∑(3, 12)],
   [∑(6, 9), ∅, ∅, ∑(2, 13)],
   [∑(5, 10), ∅, ∅, ∑(1, 14)],
   [∑(4, 11), ∅, ∅, ∑(0, 15)]],

  [[∅, ∅, ∑(7, 12), ∑(3, 12)],
   [∅, ∅, ∑(6, 13), ∑(2, 13)],
   [∅, ∅, ∑(5, 14), ∑(1, 14)],
   [∅, ∅, ∑(4, 15), ∑(0, 15)]],

  [[∅, ∅, ∑(7, 12), ∑(3, 12)],
   [∅, ∅, ∑(6, 13), ∑(2, 13)],
   [∅, ∅, ∑(5, 14), ∑(1, 14)],
   [∅, ∅, ∑(4, 15), ∑(0, 15)]]]]
1: ⊥
2: ⊥
success_path [step 24]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); mult = stack(a_for_mult, b_for_mult); c0 = broadcast(mult); c1 = keep_if(false)(c0); c2 = keep_if(true)(c1); c3 = keep_if(false)(c2); c4 = keep_if(false)(c3); c5 = keep_if[d0 >= +d2](c4); c6 = keep_if(false)(c5); c7 = keep_if[d0 < +d2](c6); c8 = keep_if(false)(c7); c9 = keep_if(false)(c8);:
0: [[[[∅, ∑(0, 8), ∅, ∑(0, 12)],
   [∅, ∅, ∅, ∑(7, 13)],
   [∅, ∅, ∅, ∑(6, 14)],
   [∅, ∅, ∅, ∑(5, 15)]],

  [[∑(4, 8), ∅, ∑(4, 12), ∑(0, 12)],
   [∑(3, 9), ∅, ∑(3, 13), ∑(7, 13)],
   [∑(2, 10), ∅, ∑(2, 14), ∑(6, 14)],
   [∑(1, 11), ∅, ∑(1, 15), ∑(5, 15)]],

  [[∅, ∅, ∑(4, 12), ∑(0, 12)],
   [∅, ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∅, ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∅, ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

  [[∅, ∅, ∑(4, 12), ∑(0, 12)],
   [∅, ∅, ∑(3, 13), ∑(7, 13)],
   [∅, ∅, ∑(2, 14), ∑(6, 14)],
   [∅, ∅, ∑(1, 15), ∑(5, 15)]]],


 [[[∅, ∑(1, 8), ∅, ∑(1, 12)],
   [∅, ∑(0, 9), ∅, ∑(0, 13)],
   [∅, ∅, ∅, ∑(7, 14)],
   [∅, ∅, ∅, ∑(6, 15)]],

  [[∑(5, 8), ∅, ∑(5, 12), ∑(1, 12)],
   [∑(4, 9), ∅, ∑(4, 13), ∑(0, 13)],
   [∑(3, 10), ∅, ∑(3, 14), ∑(7, 14)],
   [∑(2, 11), ∅, ∑(2, 15), ∑(6, 15)]],

  [[∅, ∅, ∑(5, 12), ∑(1, 12)],
   [∅, ∅, ∑(4, 13), ∑(0, 13)],
   [∅, ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∅, ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

  [[∅, ∅, ∑(5, 12), ∑(1, 12)],
   [∅, ∅, ∑(4, 13), ∑(0, 13)],
   [∅, ∅, ∑(3, 14), ∑(7, 14)],
   [∅, ∅, ∑(2, 15), ∑(6, 15)]]],


 [[[∅, ∑(2, 8), ∅, ∑(2, 12)],
   [∅, ∑(1, 9), ∅, ∑(1, 13)],
   [∅, ∑(0, 10), ∅, ∑(0, 14)],
   [∅, ∅, ∅, ∑(7, 15)]],

  [[∑(6, 8), ∅, ∑(6, 12), ∑(2, 12)],
   [∑(5, 9), ∅, ∑(5, 13), ∑(1, 13)],
   [∑(4, 10), ∅, ∑(4, 14), ∑(0, 14)],
   [∑(3, 11), ∅, ∑(3, 15), ∑(7, 15)]],

  [[∅, ∅, ∑(6, 12), ∑(2, 12)],
   [∅, ∅, ∑(5, 13), ∑(1, 13)],
   [∅, ∅, ∑(4, 14), ∑(0, 14)],
   [∅, ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

  [[∅, ∅, ∑(6, 12), ∑(2, 12)],
   [∅, ∅, ∑(5, 13), ∑(1, 13)],
   [∅, ∅, ∑(4, 14), ∑(0, 14)],
   [∅, ∅, ∑(3, 15), ∑(7, 15)]]],


 [[[∅, ∑(3, 8), ∅, ∑(3, 12)],
   [∅, ∑(2, 9), ∅, ∑(2, 13)],
   [∅, ∑(1, 10), ∅, ∑(1, 14)],
   [∅, ∑(0, 11), ∅, ∑(0, 15)]],

  [[∑(7, 8), ∅, ∑(7, 12), ∑(3, 12)],
   [∑(6, 9), ∅, ∑(6, 13), ∑(2, 13)],
   [∑(5, 10), ∅, ∑(5, 14), ∑(1, 14)],
   [∑(4, 11), ∅, ∑(4, 15), ∑(0, 15)]],

  [[∅, ∅, ∑(7, 12), ∑(3, 12)],
   [∅, ∅, ∑(6, 13), ∑(2, 13)],
   [∅, ∅, ∑(5, 14), ∑(1, 14)],
   [∅, ∅, ∑(4, 15), ∑(0, 15)]],

  [[∅, ∅, ∑(7, 12), ∑(3, 12)],
   [∅, ∅, ∑(6, 13), ∑(2, 13)],
   [∅, ∅, ∑(5, 14), ∑(1, 14)],
   [∅, ∅, ∑(4, 15), ∑(0, 15)]]]]
1: ⊥
2: ⊥
success_path [step 23]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); mult = stack(a_for_mult, b_for_mult); c0 = broadcast(mult); c1 = keep_if(false)(c0); c2 = keep_if(true)(c1); c3 = keep_if(false)(c2); c4 = keep_if(false)(c3); c5 = keep_if[d0 >= +d2](c4); c6 = keep_if(false)(c5); c7 = keep_if[d0 < +d2](c6); c8 = keep_if(false)(c7);:
0: [[[[∅, ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∅, ∅, ∑(3, 13), ∑(7, 13)],
   [∅, ∅, ∑(2, 14), ∑(6, 14)],
   [∅, ∅, ∑(1, 15), ∑(5, 15)]],

  [[∑(4, 8), ∅, ∑(4, 12), ∑(0, 12)],
   [∑(3, 9), ∅, ∑(3, 13), ∑(7, 13)],
   [∑(2, 10), ∅, ∑(2, 14), ∑(6, 14)],
   [∑(1, 11), ∅, ∑(1, 15), ∑(5, 15)]],

  [[∅, ∅, ∑(4, 12), ∑(0, 12)],
   [∅, ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∅, ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∅, ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

  [[∅, ∅, ∑(4, 12), ∑(0, 12)],
   [∅, ∅, ∑(3, 13), ∑(7, 13)],
   [∅, ∅, ∑(2, 14), ∑(6, 14)],
   [∅, ∅, ∑(1, 15), ∑(5, 15)]]],


 [[[∅, ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∅, ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∅, ∅, ∑(3, 14), ∑(7, 14)],
   [∅, ∅, ∑(2, 15), ∑(6, 15)]],

  [[∑(5, 8), ∅, ∑(5, 12), ∑(1, 12)],
   [∑(4, 9), ∅, ∑(4, 13), ∑(0, 13)],
   [∑(3, 10), ∅, ∑(3, 14), ∑(7, 14)],
   [∑(2, 11), ∅, ∑(2, 15), ∑(6, 15)]],

  [[∅, ∅, ∑(5, 12), ∑(1, 12)],
   [∅, ∅, ∑(4, 13), ∑(0, 13)],
   [∅, ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∅, ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

  [[∅, ∅, ∑(5, 12), ∑(1, 12)],
   [∅, ∅, ∑(4, 13), ∑(0, 13)],
   [∅, ∅, ∑(3, 14), ∑(7, 14)],
   [∅, ∅, ∑(2, 15), ∑(6, 15)]]],


 [[[∅, ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∅, ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∅, ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∅, ∅, ∑(3, 15), ∑(7, 15)]],

  [[∑(6, 8), ∅, ∑(6, 12), ∑(2, 12)],
   [∑(5, 9), ∅, ∑(5, 13), ∑(1, 13)],
   [∑(4, 10), ∅, ∑(4, 14), ∑(0, 14)],
   [∑(3, 11), ∅, ∑(3, 15), ∑(7, 15)]],

  [[∅, ∅, ∑(6, 12), ∑(2, 12)],
   [∅, ∅, ∑(5, 13), ∑(1, 13)],
   [∅, ∅, ∑(4, 14), ∑(0, 14)],
   [∅, ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

  [[∅, ∅, ∑(6, 12), ∑(2, 12)],
   [∅, ∅, ∑(5, 13), ∑(1, 13)],
   [∅, ∅, ∑(4, 14), ∑(0, 14)],
   [∅, ∅, ∑(3, 15), ∑(7, 15)]]],


 [[[∅, ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∅, ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∅, ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∅, ∑(0, 11), ∑(4, 15), ∑(0, 15)]],

  [[∑(7, 8), ∅, ∑(7, 12), ∑(3, 12)],
   [∑(6, 9), ∅, ∑(6, 13), ∑(2, 13)],
   [∑(5, 10), ∅, ∑(5, 14), ∑(1, 14)],
   [∑(4, 11), ∅, ∑(4, 15), ∑(0, 15)]],

  [[∅, ∅, ∑(7, 12), ∑(3, 12)],
   [∅, ∅, ∑(6, 13), ∑(2, 13)],
   [∅, ∅, ∑(5, 14), ∑(1, 14)],
   [∅, ∅, ∑(4, 15), ∑(0, 15)]],

  [[∅, ∅, ∑(7, 12), ∑(3, 12)],
   [∅, ∅, ∑(6, 13), ∑(2, 13)],
   [∅, ∅, ∑(5, 14), ∑(1, 14)],
   [∅, ∅, ∑(4, 15), ∑(0, 15)]]]]
1: ⊥
2: ⊥
success_path [step 22]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); mult = stack(a_for_mult, b_for_mult); c0 = broadcast(mult); c1 = keep_if(false)(c0); c2 = keep_if(true)(c1); c3 = keep_if(false)(c2); c4 = keep_if(false)(c3); c5 = keep_if[d0 >= +d2](c4); c6 = keep_if(false)(c5); c7 = keep_if[d0 < +d2](c6);:
0: [[[[∅, ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∅, ∅, ∑(3, 13), ∑(7, 13)],
   [∅, ∅, ∑(2, 14), ∑(6, 14)],
   [∅, ∅, ∑(1, 15), ∑(5, 15)]],

  [[∑(4, 8), ∅, ∑(4, 12), ∑(0, 12)],
   [∑(3, 9), ∅, ∑(3, 13), ∑(7, 13)],
   [∑(2, 10), ∅, ∑(2, 14), ∑(6, 14)],
   [∑(1, 11), ∅, ∑(1, 15), ∑(5, 15)]],

  [[∅, ∅, ∑(4, 12), ∑(0, 12)],
   [∅, ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∅, ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∅, ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

  [[∅, ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∅, ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∅, ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∅, ∑(5, 11), ∑(1, 15), ∑(5, 15)]]],


 [[[∅, ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∅, ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∅, ∅, ∑(3, 14), ∑(7, 14)],
   [∅, ∅, ∑(2, 15), ∑(6, 15)]],

  [[∑(5, 8), ∅, ∑(5, 12), ∑(1, 12)],
   [∑(4, 9), ∅, ∑(4, 13), ∑(0, 13)],
   [∑(3, 10), ∅, ∑(3, 14), ∑(7, 14)],
   [∑(2, 11), ∅, ∑(2, 15), ∑(6, 15)]],

  [[∅, ∅, ∑(5, 12), ∑(1, 12)],
   [∅, ∅, ∑(4, 13), ∑(0, 13)],
   [∅, ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∅, ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

  [[∅, ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∅, ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∅, ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∅, ∑(6, 11), ∑(2, 15), ∑(6, 15)]]],


 [[[∅, ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∅, ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∅, ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∅, ∅, ∑(3, 15), ∑(7, 15)]],

  [[∑(6, 8), ∅, ∑(6, 12), ∑(2, 12)],
   [∑(5, 9), ∅, ∑(5, 13), ∑(1, 13)],
   [∑(4, 10), ∅, ∑(4, 14), ∑(0, 14)],
   [∑(3, 11), ∅, ∑(3, 15), ∑(7, 15)]],

  [[∅, ∅, ∑(6, 12), ∑(2, 12)],
   [∅, ∅, ∑(5, 13), ∑(1, 13)],
   [∅, ∅, ∑(4, 14), ∑(0, 14)],
   [∅, ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

  [[∅, ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∅, ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∅, ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∅, ∑(7, 11), ∑(3, 15), ∑(7, 15)]]],


 [[[∅, ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∅, ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∅, ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∅, ∑(0, 11), ∑(4, 15), ∑(0, 15)]],

  [[∑(7, 8), ∅, ∑(7, 12), ∑(3, 12)],
   [∑(6, 9), ∅, ∑(6, 13), ∑(2, 13)],
   [∑(5, 10), ∅, ∑(5, 14), ∑(1, 14)],
   [∑(4, 11), ∅, ∑(4, 15), ∑(0, 15)]],

  [[∅, ∅, ∑(7, 12), ∑(3, 12)],
   [∅, ∅, ∑(6, 13), ∑(2, 13)],
   [∅, ∅, ∑(5, 14), ∑(1, 14)],
   [∅, ∅, ∑(4, 15), ∑(0, 15)]],

  [[∅, ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∅, ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∅, ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∅, ∑(0, 11), ∑(4, 15), ∑(0, 15)]]]]
1: ⊥
2: ⊥
success_path [step 21]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); mult = stack(a_for_mult, b_for_mult); c0 = broadcast(mult); c1 = keep_if(false)(c0); c2 = keep_if(true)(c1); c3 = keep_if(false)(c2); c4 = keep_if(false)(c3); c5 = keep_if[d0 >= +d2](c4); c6 = keep_if(false)(c5);:
0: [[[[∅, ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∅, ∅, ∑(3, 13), ∑(7, 13)],
   [∅, ∅, ∑(2, 14), ∑(6, 14)],
   [∅, ∅, ∑(1, 15), ∑(5, 15)]],

  [[∑(4, 8), ∅, ∑(4, 12), ∑(0, 12)],
   [∑(3, 9), ∅, ∑(3, 13), ∑(7, 13)],
   [∑(2, 10), ∅, ∑(2, 14), ∑(6, 14)],
   [∑(1, 11), ∅, ∑(1, 15), ∑(5, 15)]],

  [[∅, ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∅, ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∅, ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∅, ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

  [[∅, ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∅, ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∅, ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∅, ∑(5, 11), ∑(1, 15), ∑(5, 15)]]],


 [[[∅, ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∅, ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∅, ∅, ∑(3, 14), ∑(7, 14)],
   [∅, ∅, ∑(2, 15), ∑(6, 15)]],

  [[∑(5, 8), ∅, ∑(5, 12), ∑(1, 12)],
   [∑(4, 9), ∅, ∑(4, 13), ∑(0, 13)],
   [∑(3, 10), ∅, ∑(3, 14), ∑(7, 14)],
   [∑(2, 11), ∅, ∑(2, 15), ∑(6, 15)]],

  [[∅, ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∅, ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∅, ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∅, ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

  [[∅, ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∅, ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∅, ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∅, ∑(6, 11), ∑(2, 15), ∑(6, 15)]]],


 [[[∅, ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∅, ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∅, ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∅, ∅, ∑(3, 15), ∑(7, 15)]],

  [[∑(6, 8), ∅, ∑(6, 12), ∑(2, 12)],
   [∑(5, 9), ∅, ∑(5, 13), ∑(1, 13)],
   [∑(4, 10), ∅, ∑(4, 14), ∑(0, 14)],
   [∑(3, 11), ∅, ∑(3, 15), ∑(7, 15)]],

  [[∅, ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∅, ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∅, ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∅, ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

  [[∅, ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∅, ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∅, ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∅, ∑(7, 11), ∑(3, 15), ∑(7, 15)]]],


 [[[∅, ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∅, ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∅, ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∅, ∑(0, 11), ∑(4, 15), ∑(0, 15)]],

  [[∑(7, 8), ∅, ∑(7, 12), ∑(3, 12)],
   [∑(6, 9), ∅, ∑(6, 13), ∑(2, 13)],
   [∑(5, 10), ∅, ∑(5, 14), ∑(1, 14)],
   [∑(4, 11), ∅, ∑(4, 15), ∑(0, 15)]],

  [[∅, ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∅, ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∅, ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∅, ∑(0, 11), ∑(4, 15), ∑(0, 15)]],

  [[∅, ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∅, ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∅, ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∅, ∑(0, 11), ∑(4, 15), ∑(0, 15)]]]]
1: ⊥
2: ⊥
success_path [step 20]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); mult = stack(a_for_mult, b_for_mult); c0 = broadcast(mult); c1 = keep_if(false)(c0); c2 = keep_if(true)(c1); c3 = keep_if(false)(c2); c4 = keep_if(false)(c3); c5 = keep_if[d0 >= +d2](c4);:
0: [[[[∅, ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∅, ∅, ∑(3, 13), ∑(7, 13)],
   [∅, ∅, ∑(2, 14), ∑(6, 14)],
   [∅, ∅, ∑(1, 15), ∑(5, 15)]],

  [[∑(4, 8), ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∑(3, 9), ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∑(2, 10), ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∑(1, 11), ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

  [[∅, ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∅, ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∅, ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∅, ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

  [[∅, ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∅, ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∅, ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∅, ∑(5, 11), ∑(1, 15), ∑(5, 15)]]],


 [[[∅, ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∅, ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∅, ∅, ∑(3, 14), ∑(7, 14)],
   [∅, ∅, ∑(2, 15), ∑(6, 15)]],

  [[∑(5, 8), ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∑(4, 9), ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∑(3, 10), ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∑(2, 11), ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

  [[∅, ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∅, ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∅, ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∅, ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

  [[∅, ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∅, ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∅, ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∅, ∑(6, 11), ∑(2, 15), ∑(6, 15)]]],


 [[[∅, ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∅, ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∅, ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∅, ∅, ∑(3, 15), ∑(7, 15)]],

  [[∑(6, 8), ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∑(5, 9), ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∑(4, 10), ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∑(3, 11), ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

  [[∅, ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∅, ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∅, ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∅, ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

  [[∅, ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∅, ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∅, ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∅, ∑(7, 11), ∑(3, 15), ∑(7, 15)]]],


 [[[∅, ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∅, ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∅, ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∅, ∑(0, 11), ∑(4, 15), ∑(0, 15)]],

  [[∑(7, 8), ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∑(6, 9), ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∑(5, 10), ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∑(4, 11), ∑(0, 11), ∑(4, 15), ∑(0, 15)]],

  [[∅, ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∅, ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∅, ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∅, ∑(0, 11), ∑(4, 15), ∑(0, 15)]],

  [[∅, ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∅, ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∅, ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∅, ∑(0, 11), ∑(4, 15), ∑(0, 15)]]]]
1: ⊥
2: ⊥
success_path [step 19]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); mult = stack(a_for_mult, b_for_mult); c0 = broadcast(mult); c1 = keep_if(false)(c0); c2 = keep_if(true)(c1); c3 = keep_if(false)(c2); c4 = keep_if(false)(c3);:
0: [[[[∅, ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∅, ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∅, ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∅, ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

  [[∑(4, 8), ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∑(3, 9), ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∑(2, 10), ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∑(1, 11), ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

  [[∅, ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∅, ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∅, ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∅, ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

  [[∅, ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∅, ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∅, ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∅, ∑(5, 11), ∑(1, 15), ∑(5, 15)]]],


 [[[∅, ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∅, ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∅, ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∅, ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

  [[∑(5, 8), ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∑(4, 9), ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∑(3, 10), ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∑(2, 11), ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

  [[∅, ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∅, ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∅, ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∅, ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

  [[∅, ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∅, ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∅, ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∅, ∑(6, 11), ∑(2, 15), ∑(6, 15)]]],


 [[[∅, ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∅, ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∅, ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∅, ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

  [[∑(6, 8), ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∑(5, 9), ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∑(4, 10), ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∑(3, 11), ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

  [[∅, ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∅, ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∅, ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∅, ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

  [[∅, ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∅, ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∅, ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∅, ∑(7, 11), ∑(3, 15), ∑(7, 15)]]],


 [[[∅, ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∅, ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∅, ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∅, ∑(0, 11), ∑(4, 15), ∑(0, 15)]],

  [[∑(7, 8), ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∑(6, 9), ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∑(5, 10), ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∑(4, 11), ∑(0, 11), ∑(4, 15), ∑(0, 15)]],

  [[∅, ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∅, ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∅, ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∅, ∑(0, 11), ∑(4, 15), ∑(0, 15)]],

  [[∅, ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∅, ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∅, ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∅, ∑(0, 11), ∑(4, 15), ∑(0, 15)]]]]
1: ⊥
2: ⊥
success_path [step 18]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); mult = stack(a_for_mult, b_for_mult); c0 = broadcast(mult); c1 = keep_if(false)(c0); c2 = keep_if(true)(c1); c3 = keep_if(false)(c2);:
0: [[[[∅, ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∅, ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∅, ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∅, ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

  [[∑(4, 8), ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∑(3, 9), ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∑(2, 10), ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∑(1, 11), ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

  [[∅, ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∅, ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∅, ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∅, ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

  [[∑(4, 8), ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∑(3, 9), ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∑(2, 10), ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∑(1, 11), ∑(5, 11), ∑(1, 15), ∑(5, 15)]]],


 [[[∅, ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∅, ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∅, ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∅, ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

  [[∑(5, 8), ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∑(4, 9), ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∑(3, 10), ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∑(2, 11), ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

  [[∅, ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∅, ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∅, ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∅, ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

  [[∑(5, 8), ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∑(4, 9), ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∑(3, 10), ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∑(2, 11), ∑(6, 11), ∑(2, 15), ∑(6, 15)]]],


 [[[∅, ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∅, ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∅, ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∅, ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

  [[∑(6, 8), ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∑(5, 9), ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∑(4, 10), ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∑(3, 11), ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

  [[∅, ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∅, ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∅, ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∅, ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

  [[∑(6, 8), ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∑(5, 9), ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∑(4, 10), ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∑(3, 11), ∑(7, 11), ∑(3, 15), ∑(7, 15)]]],


 [[[∅, ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∅, ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∅, ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∅, ∑(0, 11), ∑(4, 15), ∑(0, 15)]],

  [[∑(7, 8), ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∑(6, 9), ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∑(5, 10), ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∑(4, 11), ∑(0, 11), ∑(4, 15), ∑(0, 15)]],

  [[∅, ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∅, ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∅, ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∅, ∑(0, 11), ∑(4, 15), ∑(0, 15)]],

  [[∑(7, 8), ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∑(6, 9), ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∑(5, 10), ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∑(4, 11), ∑(0, 11), ∑(4, 15), ∑(0, 15)]]]]
1: ⊥
2: ⊥
success_path [step 17]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); mult = stack(a_for_mult, b_for_mult); c0 = broadcast(mult); c1 = keep_if(false)(c0); c2 = keep_if(true)(c1);:
0: [[[[∅, ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∅, ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∅, ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∅, ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

  [[∑(4, 8), ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∑(3, 9), ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∑(2, 10), ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∑(1, 11), ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

  [[∑(4, 8), ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∑(3, 9), ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∑(2, 10), ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∑(1, 11), ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

  [[∑(4, 8), ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∑(3, 9), ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∑(2, 10), ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∑(1, 11), ∑(5, 11), ∑(1, 15), ∑(5, 15)]]],


 [[[∅, ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∅, ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∅, ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∅, ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

  [[∑(5, 8), ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∑(4, 9), ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∑(3, 10), ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∑(2, 11), ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

  [[∑(5, 8), ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∑(4, 9), ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∑(3, 10), ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∑(2, 11), ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

  [[∑(5, 8), ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∑(4, 9), ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∑(3, 10), ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∑(2, 11), ∑(6, 11), ∑(2, 15), ∑(6, 15)]]],


 [[[∅, ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∅, ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∅, ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∅, ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

  [[∑(6, 8), ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∑(5, 9), ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∑(4, 10), ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∑(3, 11), ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

  [[∑(6, 8), ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∑(5, 9), ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∑(4, 10), ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∑(3, 11), ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

  [[∑(6, 8), ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∑(5, 9), ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∑(4, 10), ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∑(3, 11), ∑(7, 11), ∑(3, 15), ∑(7, 15)]]],


 [[[∅, ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∅, ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∅, ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∅, ∑(0, 11), ∑(4, 15), ∑(0, 15)]],

  [[∑(7, 8), ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∑(6, 9), ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∑(5, 10), ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∑(4, 11), ∑(0, 11), ∑(4, 15), ∑(0, 15)]],

  [[∑(7, 8), ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∑(6, 9), ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∑(5, 10), ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∑(4, 11), ∑(0, 11), ∑(4, 15), ∑(0, 15)]],

  [[∑(7, 8), ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∑(6, 9), ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∑(5, 10), ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∑(4, 11), ∑(0, 11), ∑(4, 15), ∑(0, 15)]]]]
1: ⊥
2: ⊥
success_path [step 16]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); mult = stack(a_for_mult, b_for_mult); c0 = broadcast(mult); c1 = keep_if(false)(c0);:
0: [[[[∅, ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∅, ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∅, ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∅, ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

  [[∑(4, 8), ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∑(3, 9), ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∑(2, 10), ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∑(1, 11), ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

  [[∑(4, 8), ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∑(3, 9), ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∑(2, 10), ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∑(1, 11), ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

  [[∑(4, 8), ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∑(3, 9), ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∑(2, 10), ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∑(1, 11), ∑(5, 11), ∑(1, 15), ∑(5, 15)]]],


 [[[∅, ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∅, ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∅, ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∅, ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

  [[∑(5, 8), ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∑(4, 9), ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∑(3, 10), ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∑(2, 11), ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

  [[∑(5, 8), ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∑(4, 9), ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∑(3, 10), ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∑(2, 11), ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

  [[∑(5, 8), ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∑(4, 9), ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∑(3, 10), ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∑(2, 11), ∑(6, 11), ∑(2, 15), ∑(6, 15)]]],


 [[[∅, ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∅, ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∅, ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∅, ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

  [[∑(6, 8), ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∑(5, 9), ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∑(4, 10), ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∑(3, 11), ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

  [[∑(6, 8), ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∑(5, 9), ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∑(4, 10), ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∑(3, 11), ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

  [[∑(6, 8), ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∑(5, 9), ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∑(4, 10), ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∑(3, 11), ∑(7, 11), ∑(3, 15), ∑(7, 15)]]],


 [[[∅, ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∅, ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∅, ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∅, ∑(0, 11), ∑(4, 15), ∑(0, 15)]],

  [[∑(7, 8), ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∑(6, 9), ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∑(5, 10), ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∑(4, 11), ∑(0, 11), ∑(4, 15), ∑(0, 15)]],

  [[∑(7, 8), ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∑(6, 9), ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∑(5, 10), ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∑(4, 11), ∑(0, 11), ∑(4, 15), ∑(0, 15)]],

  [[∑(7, 8), ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∑(6, 9), ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∑(5, 10), ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∑(4, 11), ∑(0, 11), ∑(4, 15), ∑(0, 15)]]]]
1: ⊥
2: ⊥
success_path [step 15]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); mult = stack(a_for_mult, b_for_mult); c0 = broadcast(mult);:
0: [[[[∑(4, 8), ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∑(3, 9), ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∑(2, 10), ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∑(1, 11), ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

  [[∑(4, 8), ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∑(3, 9), ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∑(2, 10), ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∑(1, 11), ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

  [[∑(4, 8), ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∑(3, 9), ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∑(2, 10), ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∑(1, 11), ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

  [[∑(4, 8), ∑(0, 8), ∑(4, 12), ∑(0, 12)],
   [∑(3, 9), ∑(7, 9), ∑(3, 13), ∑(7, 13)],
   [∑(2, 10), ∑(6, 10), ∑(2, 14), ∑(6, 14)],
   [∑(1, 11), ∑(5, 11), ∑(1, 15), ∑(5, 15)]]],


 [[[∑(5, 8), ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∑(4, 9), ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∑(3, 10), ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∑(2, 11), ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

  [[∑(5, 8), ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∑(4, 9), ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∑(3, 10), ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∑(2, 11), ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

  [[∑(5, 8), ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∑(4, 9), ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∑(3, 10), ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∑(2, 11), ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

  [[∑(5, 8), ∑(1, 8), ∑(5, 12), ∑(1, 12)],
   [∑(4, 9), ∑(0, 9), ∑(4, 13), ∑(0, 13)],
   [∑(3, 10), ∑(7, 10), ∑(3, 14), ∑(7, 14)],
   [∑(2, 11), ∑(6, 11), ∑(2, 15), ∑(6, 15)]]],


 [[[∑(6, 8), ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∑(5, 9), ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∑(4, 10), ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∑(3, 11), ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

  [[∑(6, 8), ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∑(5, 9), ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∑(4, 10), ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∑(3, 11), ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

  [[∑(6, 8), ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∑(5, 9), ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∑(4, 10), ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∑(3, 11), ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

  [[∑(6, 8), ∑(2, 8), ∑(6, 12), ∑(2, 12)],
   [∑(5, 9), ∑(1, 9), ∑(5, 13), ∑(1, 13)],
   [∑(4, 10), ∑(0, 10), ∑(4, 14), ∑(0, 14)],
   [∑(3, 11), ∑(7, 11), ∑(3, 15), ∑(7, 15)]]],


 [[[∑(7, 8), ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∑(6, 9), ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∑(5, 10), ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∑(4, 11), ∑(0, 11), ∑(4, 15), ∑(0, 15)]],

  [[∑(7, 8), ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∑(6, 9), ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∑(5, 10), ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∑(4, 11), ∑(0, 11), ∑(4, 15), ∑(0, 15)]],

  [[∑(7, 8), ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∑(6, 9), ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∑(5, 10), ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∑(4, 11), ∑(0, 11), ∑(4, 15), ∑(0, 15)]],

  [[∑(7, 8), ∑(3, 8), ∑(7, 12), ∑(3, 12)],
   [∑(6, 9), ∑(2, 9), ∑(6, 13), ∑(2, 13)],
   [∑(5, 10), ∑(1, 10), ∑(5, 14), ∑(1, 14)],
   [∑(4, 11), ∑(0, 11), ∑(4, 15), ∑(0, 15)]]]]
1: ⊥
2: ⊥
success_path [step 14]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b); mult = stack(a_for_mult, b_for_mult);:
0: [[[∑(4, 8), ∑(0, 8), ∑(4, 12), ∑(0, 12)],
  [∑(3, 9), ∑(7, 9), ∑(3, 13), ∑(7, 13)],
  [∑(2, 10), ∑(6, 10), ∑(2, 14), ∑(6, 14)],
  [∑(1, 11), ∑(5, 11), ∑(1, 15), ∑(5, 15)]],

 [[∑(5, 8), ∑(1, 8), ∑(5, 12), ∑(1, 12)],
  [∑(4, 9), ∑(0, 9), ∑(4, 13), ∑(0, 13)],
  [∑(3, 10), ∑(7, 10), ∑(3, 14), ∑(7, 14)],
  [∑(2, 11), ∑(6, 11), ∑(2, 15), ∑(6, 15)]],

 [[∑(6, 8), ∑(2, 8), ∑(6, 12), ∑(2, 12)],
  [∑(5, 9), ∑(1, 9), ∑(5, 13), ∑(1, 13)],
  [∑(4, 10), ∑(0, 10), ∑(4, 14), ∑(0, 14)],
  [∑(3, 11), ∑(7, 11), ∑(3, 15), ∑(7, 15)]],

 [[∑(7, 8), ∑(3, 8), ∑(7, 12), ∑(3, 12)],
  [∑(6, 9), ∑(2, 9), ∑(6, 13), ∑(2, 13)],
  [∑(5, 10), ∑(1, 10), ∑(5, 14), ∑(1, 14)],
  [∑(4, 11), ∑(0, 11), ∑(4, 15), ∑(0, 15)]]]
1: ⊥
2: ⊥
success_path [step 13]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2); b_for_mult = b_dup_mult64(recv_b);:
0: [[[4, 0, 4, 0],
  [3, 7, 3, 7],
  [2, 6, 2, 6],
  [1, 5, 1, 5]],

 [[5, 1, 5, 1],
  [4, 0, 4, 0],
  [3, 7, 3, 7],
  [2, 6, 2, 6]],

 [[6, 2, 6, 2],
  [5, 1, 5, 1],
  [4, 0, 4, 0],
  [3, 7, 3, 7]],

 [[7, 3, 7, 3],
  [6, 2, 6, 2],
  [5, 1, 5, 1],
  [4, 0, 4, 0]]]
1: [[[8, 8, 12, 12],
  [9, 9, 13, 13],
  [10, 10, 14, 14],
  [11, 11, 15, 15]],

 [[8, 8, 12, 12],
  [9, 9, 13, 13],
  [10, 10, 14, 14],
  [11, 11, 15, 15]],

 [[8, 8, 12, 12],
  [9, 9, 13, 13],
  [10, 10, 14, 14],
  [11, 11, 15, 15]],

 [[8, 8, 12, 12],
  [9, 9, 13, 13],
  [10, 10, 14, 14],
  [11, 11, 15, 15]]]
2: ⊥
success_path [step 12]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b); recv_b2 = rot[shift=4](recv_b2_1); recv_b = stack(recv_b1, recv_b2);:
0: [[[4, 0, 4, 0],
  [3, 7, 3, 7],
  [2, 6, 2, 6],
  [1, 5, 1, 5]],

 [[5, 1, 5, 1],
  [4, 0, 4, 0],
  [3, 7, 3, 7],
  [2, 6, 2, 6]],

 [[6, 2, 6, 2],
  [5, 1, 5, 1],
  [4, 0, 4, 0],
  [3, 7, 3, 7]],

 [[7, 3, 7, 3],
  [6, 2, 6, 2],
  [5, 1, 5, 1],
  [4, 0, 4, 0]]]
1: [[[8, 12],
  [9, 13],
  [10, 14],
  [11, 15]],

 [[8, 12],
  [9, 13],
  [10, 14],
  [11, 15]],

 [[8, 12],
  [9, 13],
  [10, 14],
  [11, 15]],

 [[8, 12],
  [9, 13],
  [10, 14],
  [11, 15]]]
2: ⊥
success_path [step 11]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b); recv_b2 = rot[shift=4](recv_b2_1);:
0: [[[4, 0, 4, 0],
  [3, 7, 3, 7],
  [2, 6, 2, 6],
  [1, 5, 1, 5]],

 [[5, 1, 5, 1],
  [4, 0, 4, 0],
  [3, 7, 3, 7],
  [2, 6, 2, 6]],

 [[6, 2, 6, 2],
  [5, 1, 5, 1],
  [4, 0, 4, 0],
  [3, 7, 3, 7]],

 [[7, 3, 7, 3],
  [6, 2, 6, 2],
  [5, 1, 5, 1],
  [4, 0, 4, 0]]]
1: [[12, 13, 14, 15],
 [12, 13, 14, 15],
 [12, 13, 14, 15],
 [12, 13, 14, 15]]
2: [[8, 9, 10, 11],
 [8, 9, 10, 11],
 [8, 9, 10, 11],
 [8, 9, 10, 11]]
success_path [step 10]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1); recv_b2_1 = id(b);:
0: [[[4, 0, 4, 0],
  [3, 7, 3, 7],
  [2, 6, 2, 6],
  [1, 5, 1, 5]],

 [[5, 1, 5, 1],
  [4, 0, 4, 0],
  [3, 7, 3, 7],
  [2, 6, 2, 6]],

 [[6, 2, 6, 2],
  [5, 1, 5, 1],
  [4, 0, 4, 0],
  [3, 7, 3, 7]],

 [[7, 3, 7, 3],
  [6, 2, 6, 2],
  [5, 1, 5, 1],
  [4, 0, 4, 0]]]
1: [[8, 9, 10, 11, 12, 13, 14, 15],
 [8, 9, 10, 11, 12, 13, 14, 15],
 [8, 9, 10, 11, 12, 13, 14, 15],
 [8, 9, 10, 11, 12, 13, 14, 15]]
2: [[8, 9, 10, 11],
 [8, 9, 10, 11],
 [8, 9, 10, 11],
 [8, 9, 10, 11]]
success_path [step 9]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b); recv_b1 = rot[shift=0](recv_b1_1);:
0: [[[4, 0, 4, 0],
  [3, 7, 3, 7],
  [2, 6, 2, 6],
  [1, 5, 1, 5]],

 [[5, 1, 5, 1],
  [4, 0, 4, 0],
  [3, 7, 3, 7],
  [2, 6, 2, 6]],

 [[6, 2, 6, 2],
  [5, 1, 5, 1],
  [4, 0, 4, 0],
  [3, 7, 3, 7]],

 [[7, 3, 7, 3],
  [6, 2, 6, 2],
  [5, 1, 5, 1],
  [4, 0, 4, 0]]]
1: [[8, 9, 10, 11, 12, 13, 14, 15],
 [8, 9, 10, 11, 12, 13, 14, 15],
 [8, 9, 10, 11, 12, 13, 14, 15],
 [8, 9, 10, 11, 12, 13, 14, 15]]
2: [[8, 9, 10, 11],
 [8, 9, 10, 11],
 [8, 9, 10, 11],
 [8, 9, 10, 11]]
success_path [step 8]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b); recv_b1_1 = id(b);:
0: [[[4, 0, 4, 0],
  [3, 7, 3, 7],
  [2, 6, 2, 6],
  [1, 5, 1, 5]],

 [[5, 1, 5, 1],
  [4, 0, 4, 0],
  [3, 7, 3, 7],
  [2, 6, 2, 6]],

 [[6, 2, 6, 2],
  [5, 1, 5, 1],
  [4, 0, 4, 0],
  [3, 7, 3, 7]],

 [[7, 3, 7, 3],
  [6, 2, 6, 2],
  [5, 1, 5, 1],
  [4, 0, 4, 0]]]
1: [[8, 9, 10, 11, 12, 13, 14, 15],
 [8, 9, 10, 11, 12, 13, 14, 15],
 [8, 9, 10, 11, 12, 13, 14, 15],
 [8, 9, 10, 11, 12, 13, 14, 15]]
2: [[8, 9, 10, 11, 12, 13, 14, 15],
 [8, 9, 10, 11, 12, 13, 14, 15],
 [8, 9, 10, 11, 12, 13, 14, 15],
 [8, 9, 10, 11, 12, 13, 14, 15]]
success_path [step 7]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a); b = broadcast(b);:
0: [[[4, 0, 4, 0],
  [3, 7, 3, 7],
  [2, 6, 2, 6],
  [1, 5, 1, 5]],

 [[5, 1, 5, 1],
  [4, 0, 4, 0],
  [3, 7, 3, 7],
  [2, 6, 2, 6]],

 [[6, 2, 6, 2],
  [5, 1, 5, 1],
  [4, 0, 4, 0],
  [3, 7, 3, 7]],

 [[7, 3, 7, 3],
  [6, 2, 6, 2],
  [5, 1, 5, 1],
  [4, 0, 4, 0]]]
1: [[8, 9, 10, 11, 12, 13, 14, 15],
 [8, 9, 10, 11, 12, 13, 14, 15],
 [8, 9, 10, 11, 12, 13, 14, 15],
 [8, 9, 10, 11, 12, 13, 14, 15]]
2: ⊥
success_path [step 6]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2); a_for_mult = a_dup_mult64(recv_a);:
0: [[[4, 0, 4, 0],
  [3, 7, 3, 7],
  [2, 6, 2, 6],
  [1, 5, 1, 5]],

 [[5, 1, 5, 1],
  [4, 0, 4, 0],
  [3, 7, 3, 7],
  [2, 6, 2, 6]],

 [[6, 2, 6, 2],
  [5, 1, 5, 1],
  [4, 0, 4, 0],
  [3, 7, 3, 7]],

 [[7, 3, 7, 3],
  [6, 2, 6, 2],
  [5, 1, 5, 1],
  [4, 0, 4, 0]]]
1: [8, 9, 10, 11, 12, 13, 14, 15]
2: ⊥
success_path [step 5]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1); recv_a = stack(recv_a1, recv_a2);:
0: [[[4, 0],
  [3, 7],
  [2, 6],
  [1, 5]],

 [[5, 1],
  [4, 0],
  [3, 7],
  [2, 6]],

 [[6, 2],
  [5, 1],
  [4, 0],
  [3, 7]],

 [[7, 3],
  [6, 2],
  [5, 1],
  [4, 0]]]
1: [8, 9, 10, 11, 12, 13, 14, 15]
2: ⊥
success_path [step 4]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a); recv_a2 = rot[shift=0](recv_a2_1);:
0: [[0, 7, 6, 5],
 [1, 0, 7, 6],
 [2, 1, 0, 7],
 [3, 2, 1, 0]]
1: [8, 9, 10, 11, 12, 13, 14, 15]
2: [[4, 3, 2, 1],
 [5, 4, 3, 2],
 [6, 5, 4, 3],
 [7, 6, 5, 4]]
success_path [step 3]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1); recv_a2_1 = xform[cf=7,cr=1,dr=4](a);:
0: [[0, 7, 6, 5, 4, 3, 2, 1],
 [1, 0, 7, 6, 5, 4, 3, 2],
 [2, 1, 0, 7, 6, 5, 4, 3],
 [3, 2, 1, 0, 7, 6, 5, 4]]
1: [8, 9, 10, 11, 12, 13, 14, 15]
2: [[4, 3, 2, 1],
 [5, 4, 3, 2],
 [6, 5, 4, 3],
 [7, 6, 5, 4]]
success_path [step 2]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a); recv_a1 = rot[shift=4](recv_a1_1);:
0: [[0, 1, 2, 3, 4, 5, 6, 7],
 [0, 1, 2, 3, 4, 5, 6, 7],
 [0, 1, 2, 3, 4, 5, 6, 7],
 [0, 1, 2, 3, 4, 5, 6, 7]]
1: [8, 9, 10, 11, 12, 13, 14, 15]
2: [[4, 3, 2, 1],
 [5, 4, 3, 2],
 [6, 5, 4, 3],
 [7, 6, 5, 4]]
success_path [step 1]
[init]; a = broadcast(a); recv_a1_1 = xform[cf=7,cr=1,dr=4](a);:
0: [[0, 1, 2, 3, 4, 5, 6, 7],
 [0, 1, 2, 3, 4, 5, 6, 7],
 [0, 1, 2, 3, 4, 5, 6, 7],
 [0, 1, 2, 3, 4, 5, 6, 7]]
1: [8, 9, 10, 11, 12, 13, 14, 15]
2: [[0, 7, 6, 5, 4, 3, 2, 1],
 [1, 0, 7, 6, 5, 4, 3, 2],
 [2, 1, 0, 7, 6, 5, 4, 3],
 [3, 2, 1, 0, 7, 6, 5, 4]]
success_path [step 0]
[init]; a = broadcast(a);:
0: [[0, 1, 2, 3, 4, 5, 6, 7],
 [0, 1, 2, 3, 4, 5, 6, 7],
 [0, 1, 2, 3, 4, 5, 6, 7],
 [0, 1, 2, 3, 4, 5, 6, 7]]
1: [8, 9, 10, 11, 12, 13, 14, 15]
2: ⊥
stats:: n_syms=16;
stats:0 name=broadcast; pruning=false; tested=1; failed=0; pruned=0; copy_count=0; continued=1; in_solution=1; value_checks=[];
stats:: n_syms=16;
stats:1 name=xforms_no_group{main=1,out=1,second=0}; pruning=true; tested=8; failed=0; pruned=0; copy_count=0; continued=8; in_solution=1; value_checks=[];
stats:: n_syms=16;
stats:2 name=rots_no_group{main=1,out=1,second=0}; pruning=true; tested=61; failed=0; pruned=0; copy_count=0; continued=61; in_solution=1; value_checks=[];
stats:: n_syms=16;
stats:3 name=xforms_no_group{main=1,out=1,second=0}; pruning=true; tested=6832; failed=0; pruned=6603; copy_count=0; continued=229; in_solution=1; value_checks=[(2, 3149), (4, 1131), (5, 571), (8, 574), (9, 231), (10, 110), (11, 38), (16, 30), (33, 338), (34, 69), (37, 44), (38, 12), (39, 10), (40, 4), (45, 16), (59, 43), (62, 79), (64, 16), (65, 2), (70, 14), (74, 2), (75, 4), (101, 84), (102, 22), (103, 1), (108, 2), (109, 1), (110, 4), (116, 2)];
stats:: n_syms=16;
stats:4 name=rots_no_group{main=1,out=1,second=0}; pruning=true; tested=1825; failed=0; pruned=1679; copy_count=0; continued=146; in_solution=1; value_checks=[(1, 1155), (2, 348), (4, 52), (5, 29), (8, 61), (9, 18), (10, 9), (11, 7)];
stats:: n_syms=16;
stats:5 name=stack; pruning=false; tested=146; failed=0; pruned=0; copy_count=0; continued=146; in_solution=1; value_checks=[];
stats:: n_syms=16;
stats:6 name=a_dup_mult64; pruning=false; tested=146; failed=0; pruned=0; copy_count=0; continued=146; in_solution=1; value_checks=[];
stats:: n_syms=16;
stats:7 name=broadcast; pruning=false; tested=146; failed=0; pruned=0; copy_count=0; continued=146; in_solution=1; value_checks=[];
stats:: n_syms=16;
stats:8 name=xforms_no_group{main=1,out=1,second=0}; pruning=true; tested=16297; failed=0; pruned=0; copy_count=0; continued=16297; in_solution=1; value_checks=[];
stats:: n_syms=16;
stats:9 name=rots_no_group{main=1,out=1,second=0}; pruning=true; tested=130371; failed=0; pruned=0; copy_count=0; continued=130371; in_solution=1; value_checks=[];
stats:: n_syms=16;
stats:10 name=xforms_no_group{main=1,out=1,second=0}; pruning=true; tested=14601449; failed=0; pruned=14028816; copy_count=0; continued=572633; in_solution=1; value_checks=[(18, 5014009), (21, 3354703), (22, 1356571), (27, 1579881), (28, 563773), (29, 282540), (30, 184218), (31, 40120), (48, 591667), (49, 270873), (54, 135185), (55, 71406), (56, 40404), (57, 14255), (58, 35452), (82, 208937), (87, 43236), (88, 27096), (89, 9739), (90, 3193), (91, 6694), (96, 15310), (97, 2622), (98, 2182), (99, 1452), (100, 4372), (127, 119410), (128, 29999), (129, 2623), (130, 2330), (131, 2769), (132, 8156), (134, 3639)];
stats:: n_syms=16;
stats:11 name=rots_no_group{main=1,out=1,second=0}; pruning=true; tested=4581064; failed=0; pruned=4255154; copy_count=0; continued=325910; in_solution=1; value_checks=[(1, 2885822), (3, 785901), (6, 248939), (7, 69022), (12, 206129), (13, 37259), (14, 13075), (15, 9007)];
stats:: n_syms=16;
stats:12 name=stack; pruning=false; tested=325910; failed=0; pruned=0; copy_count=0; continued=325910; in_solution=1; value_checks=[];
stats:: n_syms=16;
stats:13 name=b_dup_mult64; pruning=false; tested=325910; failed=0; pruned=0; copy_count=0; continued=325910; in_solution=1; value_checks=[];
stats:: n_syms=64;
stats:14 name=stack{fold_len=2}; pruning=true; tested=325910; failed=0; pruned=325873; copy_count=0; continued=37; in_solution=1; value_checks=[(1, 317529), (2, 6264), (3, 136), (4, 1340), (5, 173), (8, 296), (16, 32), (17, 7), (32, 96)];
stats:: n_syms=64;
stats:15 name=broadcast{group=1}; pruning=false; tested=37; failed=0; pruned=0; copy_count=0; continued=37; in_solution=1; value_checks=[];
stats:: n_syms=64;
stats:16 name=cond_keep_no_consts{restrict=[3,0,1,0]}; pruning=true; tested=511; failed=0; pruned=207; copy_count=0; continued=304; in_solution=1; value_checks=[(1, 56), (2, 16), (4, 28), (5, 14), (16, 28), (18, 14), (32, 17), (33, 29), (36, 2), (40, 3)];
stats:: n_syms=64;
stats:17 name=cond_keep_no_consts{restrict=[3,0,1,1]}; pruning=true; tested=4252; failed=0; pruned=4154; copy_count=829; continued=98; in_solution=1; value_checks=[(1, 762), (3, 297), (6, 448), (7, 106), (8, 462), (9, 187), (10, 75), (11, 115), (17, 44), (19, 12), (20, 124), (22, 113), (24, 57), (26, 12), (34, 96), (35, 147), (37, 55), (38, 12), (41, 14), (44, 134), (45, 3), (48, 29), (52, 21)];
stats:: n_syms=64;
stats:18 name=cond_keep_no_consts{restrict=[3,0,1,2]}; pruning=true; tested=1360; failed=0; pruned=1348; copy_count=222; continued=12; in_solution=1; value_checks=[(12, 413), (13, 149), (14, 92), (15, 48), (21, 122), (23, 61), (25, 8), (39, 55), (43, 6), (46, 53), (50, 8), (53, 74), (57, 3), (60, 34)];
stats:: n_syms=64;
stats:19 name=cond_keep_no_consts{restrict=[3,0,1,3]}; pruning=true; tested=155; failed=0; pruned=152; copy_count=53; continued=3; in_solution=1; value_checks=[(29, 28), (31, 12), (55, 28), (59, 16), (62, 15)];
stats:: n_syms=64;
stats:20 name=cond_keep_no_consts{restrict=[3,1,1,0]}; pruning=true; tested=33; failed=0; pruned=12; copy_count=0; continued=21; in_solution=1; value_checks=[(1, 1), (2, 3), (16, 7), (32, 1)];
stats:: n_syms=64;
stats:21 name=cond_keep_no_consts{restrict=[3,1,1,1]}; pruning=true; tested=291; failed=0; pruned=272; copy_count=90; continued=19; in_solution=1; value_checks=[(8, 98), (9, 14), (11, 28), (24, 14), (44, 28)];
stats:: n_syms=64;
stats:22 name=cond_keep_no_consts{restrict=[3,1,1,2]}; pruning=true; tested=263; failed=0; pruned=260; copy_count=51; continued=3; in_solution=1; value_checks=[(12, 119), (13, 17), (15, 34), (28, 4), (30, 1), (60, 34)];
stats:: n_syms=64;
stats:23 name=cond_keep_no_consts{restrict=[3,1,1,3]}; pruning=true; tested=32; failed=0; pruned=29; copy_count=29; continued=3; in_solution=1; value_checks=[];
stats:: n_syms=64;
stats:24 name=cond_keep_no_consts{restrict=[3,2,1,0]}; pruning=true; tested=33; failed=0; pruned=10; copy_count=0; continued=23; in_solution=1; value_checks=[(1, 7), (2, 1), (5, 2)];
stats:: n_syms=64;
stats:25 name=cond_keep_no_consts{restrict=[3,2,1,1]}; pruning=true; tested=316; failed=0; pruned=281; copy_count=113; continued=35; in_solution=1; value_checks=[(1, 98), (3, 14), (7, 28), (17, 14), (34, 14)];
stats:: n_syms=64;
stats:26 name=cond_keep_no_consts{restrict=[3,2,1,2]}; pruning=true; tested=487; failed=0; pruned=482; copy_count=69; continued=5; in_solution=1; value_checks=[(12, 166), (13, 96), (21, 103), (23, 24), (25, 8), (46, 16)];
stats:: n_syms=64;
stats:27 name=cond_keep_no_consts{restrict=[3,2,1,3]}; pruning=true; tested=60; failed=0; pruned=59; copy_count=11; continued=1; in_solution=1; value_checks=[(29, 28), (31, 12), (62, 8)];
stats:: n_syms=64;
stats:28 name=cond_keep_no_consts{restrict=[3,3,1,0]}; pruning=true; tested=10; failed=0; pruned=0; copy_count=0; continued=10; in_solution=1; value_checks=[];
stats:: n_syms=64;
stats:29 name=cond_keep_no_consts{restrict=[3,3,1,1]}; pruning=true; tested=138; failed=0; pruned=136; copy_count=18; continued=2; in_solution=1; value_checks=[(8, 69), (9, 40), (17, 9)];
stats:: n_syms=64;
stats:30 name=cond_keep_no_consts{restrict=[3,3,1,2]}; pruning=true; tested=20; failed=0; pruned=17; copy_count=17; continued=3; in_solution=1; value_checks=[];
stats:: n_syms=64;
stats:31 name=cond_keep_no_consts{restrict=[3,3,1,3]}; pruning=true; tested=33; failed=0; pruned=32; copy_count=15; continued=1; in_solution=1; value_checks=[(29, 15), (31, 2)];
stats:: n_syms=15;
stats:32 name=reshape{fold_len=16}; pruning=true; tested=1; failed=0; pruned=0; copy_count=0; continued=1; in_solution=1; value_checks=[];
stats:: n_syms=15;
stats:33 name=transpose; pruning=false; tested=1; failed=0; pruned=0; copy_count=0; continued=1; in_solution=1; value_checks=[];
stats:: n_syms=15;
stats:34 name=reshape; pruning=false; tested=1; failed=0; pruned=0; copy_count=0; continued=1; in_solution=1; value_checks=[];
stats:: n_syms=0;
stats:35 name=(last); pruning=false; tested=1; failed=0; pruned=0; copy_count=0; continued=1; in_solution=1; value_checks=[];
search:specs/swinv_like/l1/mult-64-with-16-shared.swflow success=true; mode=First; prune_fuel=64; time=2576.920788606;
