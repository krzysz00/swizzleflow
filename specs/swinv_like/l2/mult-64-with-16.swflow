define a_dup_mult64([4, 4, 2]) -> [4, 4, 4] =
[[[ 0,  1,  0,  1],
  [ 2,  3,  2,  3],
  [ 4,  5,  4,  5],
  [ 6,  7,  6,  7]],

 [[ 8,  9,  8,  9],
  [10, 11, 10, 11],
  [12, 13, 12, 13],
  [14, 15, 14, 15]],

 [[16, 17, 16, 17],
  [18, 19, 18, 19],
  [20, 21, 20, 21],
  [22, 23, 22, 23]],

 [[24, 25, 24, 25],
  [26, 27, 26, 27],
  [28, 29, 28, 29],
  [30, 31, 30, 31]]]

define b_dup_mult64([4, 4, 2]) -> [4, 4, 4] =
[[[ 0,  0,  1,  1],
  [ 2,  2,  3,  3],
  [ 4,  4,  5,  5],
  [ 6,  6,  7,  7]],

 [[ 8,  8,  9,  9],
  [10, 10, 11, 11],
  [12, 12, 13, 13],
  [14, 14, 15, 15]],

 [[16, 16, 17, 17],
  [18, 18, 19, 19],
  [20, 20, 21, 21],
  [22, 22, 23, 23]],

 [[24, 24, 25, 25],
  [26, 26, 27, 27],
  [28, 28, 29, 29],
  [30, 30, 31, 31]]]

goal: [16] poly_mult {w=8}
a1: [4] = range(0, 4)
a2: [4] = range(4, 8)
b1: [4] = range(8, 12)
b2: [4] = range(12, 16)

a1: [4, 4] = broadcast(a1)
a2: [4, 4] = broadcast(a2)
b1: [4, 4] = broadcast(b1)
b2: [4, 4] = broadcast(b2)

recv_a1_1: [4, 4] = ?xforms_no_group{main=0,second=1,out=1}(a1)
recv_a1: [4, 4] = ?rots_no_group{main=0,second=1,out=1}(recv_a1_1)
recv_a2_1: [4, 4] = ?xforms_no_group{main=0,second=1,out=1}(a2)
recv_a2: [4, 4] = rots_no_group{main=0,second=1,out=1}(recv_a2_1)
recv_a: [4, 4, 2] = stack(recv_a1, recv_a2)
a_for_mult: [4, 4, 4] = a_dup_mult64(recv_a)

recv_b1_1: [4, 4] = xforms_no_group{main=0,second=1,out=1}(b1)
recv_b1: [4, 4] = rots_no_group{main=0,second=1,out=1}(recv_b1_1)
recv_b2_1: [4, 4] = xforms_no_group{main=0,second=1,out=1}(b2)
recv_b2: [4, 4] = rots_no_group{main=0,second=1,out=1}(recv_b2_1)
recv_b: [4, 4, 2] = stack(recv_b1, recv_b2)
b_for_mult: [4, 4, 4] = b_dup_mult64(recv_b)

mult: [4, 4, 4] = fold stack{fold_len=2}(a_for_mult, b_for_mult)

c0: [4, 4, 4, 4] = broadcast{group=1}(mult)

c1: [4, 4, 4, 4] = ?cond_keep{restrict=[3, 0, 1, 0]}(c0)
c2: [4, 4, 4, 4] = ?cond_keep{restrict=[3, 0, 1, 1]}(c1)
c3: [4, 4, 4, 4] = ?cond_keep{restrict=[3, 0, 1, 2]}(c2)
c4: [4, 4, 4, 4] = ?cond_keep{restrict=[3, 0, 1, 3]}(c3)
c5: [4, 4, 4, 4] = ?cond_keep{restrict=[3, 1, 1, 0]}(c4)
c6: [4, 4, 4, 4] = ?cond_keep{restrict=[3, 1, 1, 1]}(c5)
c7: [4, 4, 4, 4] = ?cond_keep{restrict=[3, 1, 1, 2]}(c6)
c8: [4, 4, 4, 4] = ?cond_keep{restrict=[3, 1, 1, 3]}(c7)
c9: [4, 4, 4, 4] = ?cond_keep{restrict=[3, 2, 1, 0]}(c8)
c10: [4, 4, 4, 4] = ?cond_keep{restrict=[3, 2, 1, 1]}(c9)
c11: [4, 4, 4, 4] = ?cond_keep{restrict=[3, 2, 1, 2]}(c10)
c12: [4, 4, 4, 4] = ?cond_keep{restrict=[3, 2, 1, 3]}(c11)
c13: [4, 4, 4, 4] = ?cond_keep{restrict=[3, 3, 1, 0]}(c12)
c14: [4, 4, 4, 4] = ?cond_keep{restrict=[3, 3, 1, 1]}(c13)
c15: [4, 4, 4, 4] = ?cond_keep{restrict=[3, 3, 1, 2]}(c14)
c16: [4, 4, 4, 4] = ?cond_keep{restrict=[3, 3, 1, 3]}(c15)

@prune
thread_by_accum: [4, 4] = fold reshape{fold_len=16}(c16)
accum_by_thread: [4, 4] = transpose(thread_by_accum)
out: [16] = reshape(accum_by_thread)
