goal: [16] = fold fold
[[[0, 18], [1, 19], [2, 18]],
 [[1, 18], [2, 19], [3, 18]],
 [[2, 18], [3, 19], [4, 18]],
 [[3, 18], [4, 19], [5, 18]],
 [[4, 18], [5, 19], [6, 18]],
 [[5, 18], [6, 19], [7, 18]],
 [[6, 18], [7, 19], [8, 18]],
 [[7, 18], [8, 19], [9, 18]],
 [[8, 18], [9, 19], [10, 18]],
 [[9, 18], [10, 19], [11, 18]],
 [[10, 18], [11, 19], [12, 18]],
 [[11, 18], [12, 19], [13, 18]],
 [[12, 18], [13, 19], [14, 18]],
 [[13, 18], [14, 19], [15, 18]],
 [[14, 18], [15, 19], [16, 18]],
 [[15, 18], [16, 19], [17, 18]]]

init: [4, 8] = [[1, 3, 5, 7, 9, 11, 13, 15],
                [2, 4, 6, 8, 10, 12, 14, 16],
                [-1, -1, -1, -1, -1, -1, -1, 0],
                [17, -1, -1, -1, -1, -1, -1, -1]]

define setup_add3([7, 8]) -> [3, 8] =
[[(0, (4, 0)), (0, (4, 1)), (0, (4, 2)), (0, (4, 3)),
  (0, (4, 4)), (0, (4, 5)), (0, (4, 6)), (0, (4, 7))],
 [(0, (5, 0)), (0, (5, 1)), (0, (5, 2)), (0, (5, 3)),
  (0, (5, 4)), (0, (5, 5)), (0, (5, 6)), (0, (5, 7))],
 [(0, (6, 0)), (0, (6, 1)), (0, (6, 2)), (0, (6, 3)),
  (0, (6, 4)), (0, (6, 5)), (0, (6, 6)), (0, (6, 7))]]

even_side: [8] = {
  o1: [5, 8] = ?hvx_2x1{in_lim=4,fresh}(init)
  o2: [6, 8] = ?hvx_2x1{in_lim=4,fresh}(o1)
  o3: [7, 8] = ?hvx_2x1{in_lim=4,fresh}(o2)
  to_add: [3, 8] = setup_add3(o3)
  grouped_for_arith: [8, 3] = rot_idx{r=1}(to_add)

  consts: [3] = [18, 19, 18]
  consts: [8, 3] = ?broadcast(consts)

  multiplied: [8, 3] = fold stack{fold_len=2}(grouped_for_arith, consts)
  sums: [8] = fold multiplied{fold_len=3}
}

odd_side: [8] = {
  o1: [5, 8] = ?hvx_2x1{in_lim=4,fresh}(init)
  o2: [6, 8] = ?hvx_2x1{in_lim=4,fresh}(o1)
  o3: [7, 8] = ?hvx_2x1{in_lim=4,fresh}(o2)
  to_add: [3, 8] = setup_add3(o3)
  grouped_for_arith: [8, 3] = rot_idx{r=1}(to_add)

  consts: [3] = [18, 19, 18]
  consts: [8, 3] = ?broadcast(consts)

  multiplied: [8, 3] = fold stack{fold_len=2}(grouped_for_arith, consts)
  sums: [8] = fold multiplied{fold_len=3}
}

stacked: [8, 2] = stack(even_side, odd_side)
out: [16] = reshape(stacked)
